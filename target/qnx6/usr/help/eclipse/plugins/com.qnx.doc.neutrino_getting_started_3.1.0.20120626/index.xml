<?xml version='1.0' encoding='UTF-8' ?>
<index>
 <entry keyword="/dev/null resource manager">
  <topic href="s1_resmgr.html#the_resource_manager_library" title="The resource manager library"/>
 </entry>
 <entry keyword="sys/*.h">
 </entry>
 <entry keyword="sys/netmgr.h">
  <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
 </entry>
 <entry keyword="sys/neutrino.h">
  <topic href="s1_msg.html#id33" title="Creating the channel"/>
  <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  <topic href="s1_msg.html#id35" title="Message handling"/>
  <topic href="s1_msg.html#id58" title="Multipart messages"/>
  <topic href="s1_msg.html#id37" title="Server framework"/>
  <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
  <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
 </entry>
 <entry keyword="sys/siginfo.h">
  <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
 </entry>
 <entry keyword="time.h">
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
 </entry>
 <entry keyword="absolute timer">
  <topic href="s1_timer.html#id70" title="Summary"/>
  <topic href="s1_timer.html#id13" title="Types of timers"/>
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  <entry keyword="converting time formats">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
 </entry>
 <entry keyword="address space">
  <topic href="s1_procs.html#id51" title="Why processes?"/>
 </entry>
 <entry keyword="adjusting time of day">
  <entry keyword="abruptly">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
  <entry keyword="gradually">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
 </entry>
 <entry keyword="adjusting timebase">
  <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
 </entry>
 <entry keyword="alignment">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="anonymous union">
  <entry keyword="used in struct sigevent">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
 </entry>
 <entry keyword="arming timeouts">
  <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
 </entry>
 <entry keyword="asctime()">
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
 </entry>
 <entry keyword="asynchronous">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="See also synchronous"/>
 </entry>
 <entry keyword="asynchronous messaging">
 </entry>
 <entry keyword="atomic operation">
  <topic href="s1_procs.html#smpbeware" title="Things to watch out for when using SMP"/>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="atomic_*()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
 </entry>
 <entry keyword="atomic_set()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
 </entry>
 <entry keyword="attribute structure">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="thread">
   <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   <topic href="s1_procs.html#id74" title="Thread attribute administration"/>
  </entry>
 </entry>
 <entry keyword="barrier">
  <entry keyword="analogy">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
  <entry keyword="and threads">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="base timing resolution">
  <entry keyword="getting and setting">
   <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
  </entry>
  <entry keyword="limits">
   <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
  </entry>
 </entry>
 <entry keyword="basename()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="Bell, Gordon">
  <topic href="preface.html#id3" title="A little history"/>
 </entry>
 <entry keyword="block_func()">
  <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  <topic href="s1_procs.html#id114" title="The thread pool functions"/>
 </entry>
 <entry keyword="blocking">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="in client due to message passing">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
 </entry>
 <entry keyword="blocking state">
  <topic href="s1_procs.html#id29" title="The kernel as arbiter"/>
 </entry>
 <entry keyword="cancellation point">
  <topic href="s1_msg.html#id60" title="What about the other versions?"/>
 </entry>
 <entry keyword="cautions">
  <entry keyword="about timers and creating threads on trigger">
   <topic href="s1_timer.html#id49" title="Timers creating threads"/>
  </entry>
 </entry>
 <entry keyword="channel">
  <entry keyword="abstraction">
   <topic href="s1_msg.html#id42" title="More about channels"/>
  </entry>
  <entry keyword="as class of service">
   <topic href="s1_msg.html#id42" title="More about channels"/>
  </entry>
  <entry keyword="constants">
   <entry keyword="_NTO_CHF_COID_DISCONNECT">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_DISCONNECT">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_FIXED_PRIORITY">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_REPLY_LEN">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_SENDER_LEN">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_THREAD_DEATH">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_UNBLOCK">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
  </entry>
  <entry keyword="creation by server">
   <topic href="s1_msg.html#id33" title="Creating the channel"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="with multiple threads">
   <topic href="s1_msg.html#id42" title="More about channels"/>
  </entry>
 </entry>
 <entry keyword="channel ID">
  <topic href="s1_msg.html#id29" title="Establishing a connection"/>
  <topic href="s1_msg.html#id42" title="More about channels"/>
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  <entry keyword="how to find">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="process manager">
   <topic href="s1_resmgr.html#id15" title="Finding the process manager"/>
  </entry>
 </entry>
 <entry keyword="ChannelCreate()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#chanflags" title="Channel flags"/>
  <topic href="s1_msg.html#id33" title="Creating the channel"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
  <topic href="s1_timer.html#main" title="main()"/>
  <topic href="s1_msg.html#id92" title="So what's the trick?"/>
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  <entry keyword="example">
   <topic href="s1_timer.html#main" title="main()"/>
  </entry>
  <entry keyword="flags">
   <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   <entry keyword="_NTO_CHF_COID_DISCONNECT">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_DISCONNECT">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_FIXED_PRIORITY">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_REPLY_LEN">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_SENDER_LEN">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   </entry>
   <entry keyword="_NTO_CHF_THREAD_DEATH">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_UNBLOCK">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   </entry>
  </entry>
  <entry keyword="priority inheritance">
   <topic href="s1_msg.html#id92" title="So what's the trick?"/>
  </entry>
 </entry>
 <entry keyword="ChannelDestroy()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#id33" title="Creating the channel"/>
 </entry>
 <entry keyword="CHIDs">
  <entry keyword="message passing">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
 </entry>
 <entry keyword="chips">
  <entry keyword="82C54">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
 </entry>
 <entry keyword="chmod()">
  <topic href="s1_resmgr.html#the_resource_manager_library" title="The resource manager library"/>
 </entry>
 <entry keyword="chown()">
  <topic href="s1_resmgr.html#the_resource_manager_library" title="The resource manager library"/>
 </entry>
 <entry keyword="cksum">
  <topic href="s3_help.html#id29" title="Versions"/>
 </entry>
 <entry keyword="class of service">
  <entry keyword="via channels">
   <topic href="s1_msg.html#id42" title="More about channels"/>
  </entry>
 </entry>
 <entry keyword="clearing timeouts">
  <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
 </entry>
 <entry keyword="client">
  <entry keyword="and not replying to them">
   <topic href="s1_timer.html#notes" title="Notes"/>
  </entry>
  <entry keyword="assumptions about data area">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="basic operation">
   <topic href="s1_msg.html#sampcli" title="Sending messages"/>
  </entry>
  <entry keyword="behavior modified by _NTO_CHF_UNBLOCK">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
  <entry keyword="being notified by server">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="blocked during MsgSend()">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="busy server">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="connecting to server">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
   <entry keyword="diagram">
    <topic href="s1_msg.html#id33" title="Creating the channel"/>
   </entry>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="establishing a connection">
   <topic href="s1_msg.html#id27" title="The client"/>
  </entry>
  <entry keyword="informing server of unblock">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="limiting transfer size">
   <topic href="s1_msg.html#id37" title="Server framework"/>
  </entry>
  <entry keyword="multi-threaded server">
   <topic href="s1_msg.html#id22" title="Multi-threaded server"/>
  </entry>
  <entry keyword="node descriptor">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="operation of">
   <topic href="s1_msg.html#id27" title="The client"/>
  </entry>
  <entry keyword="reply blocked and server">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="reply-blocked state">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="send-blocked state">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="server/subserver">
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
  </entry>
  <entry keyword="servers with mismatched buffer sizes">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="specifying event to server">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="state">
   <entry keyword="diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="timeouts">
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
  </entry>
  <entry keyword="unblocked by server">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="unblocked by timeout">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
  <entry keyword="unblocking">
   <entry keyword="due to signal">
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   </entry>
  </entry>
  <entry keyword="unblocking server">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
 </entry>
 <entry keyword="client/server">
  <topic href="s1_msg.html#id12" title="Server/subserver"/>
  <entry keyword="analogy">
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_msg.html#id16" title="Send-driven (client/server)"/>
  </entry>
  <entry keyword="message passing">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="problems with single threaded">
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
  </entry>
 </entry>
 <entry keyword="clock">
  <entry keyword="drift">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
  <entry keyword="hardware">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="how maintained">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="jitter">
   <topic href="s1_timer.html#id11" title="Timing jitter"/>
   <entry keyword="diagram">
    <topic href="s1_timer.html#id11" title="Timing jitter"/>
   </entry>
  </entry>
 </entry>
 <entry keyword="clock tick">
  <entry keyword="adjusting time gradually">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
 </entry>
 <entry keyword="clock_getres()">
  <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
 </entry>
 <entry keyword="clock_gettime()">
  <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
 </entry>
 <entry keyword="CLOCK_MONOTONIC">
  <topic href="s1_timer.html#Advanced" title="Advanced topics"/>
  <topic href="s1_timer.html#id60" title="CLOCK_MONOTONIC"/>
  <topic href="s1_timer.html#id30" title="Creating a timer"/>
  <topic href="s1_timer.html#id62" title="So what does CLOCK_SOFTTIME do?"/>
  <entry keyword="characteristics">
   <topic href="s1_timer.html#id60" title="CLOCK_MONOTONIC"/>
  </entry>
 </entry>
 <entry keyword="clock_nanosleep()">
  <topic href="s1_timer.html#id64" title="Using different clock sources"/>
 </entry>
 <entry keyword="CLOCK_REALTIME">
  <topic href="s1_timer.html#id60" title="CLOCK_MONOTONIC"/>
  <topic href="s1_timer.html#id30" title="Creating a timer"/>
  <topic href="s1_timer.html#id52" title="Getting and setting"/>
  <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  <topic href="s1_timer.html#otherclock" title="Other clock sources"/>
  <topic href="s1_timer.html#id32" title="Signal, pulse, or thread?"/>
  <topic href="s1_timer.html#id62" title="So what does CLOCK_SOFTTIME do?"/>
  <entry keyword="used with ClockAdjust()">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
 </entry>
 <entry keyword="clock_settime()">
  <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
 </entry>
 <entry keyword="CLOCK_SOFTTIME">
  <topic href="s1_timer.html#Advanced" title="Advanced topics"/>
  <topic href="s1_timer.html#id30" title="Creating a timer"/>
  <topic href="s1_timer.html#id62" title="So what does CLOCK_SOFTTIME do?"/>
 </entry>
 <entry keyword="ClockAdjust()">
  <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
  <entry keyword="CLOCK_REALTIME">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
  <entry keyword="struct _clockadjust">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
 </entry>
 <entry keyword="ClockCycles()">
  <topic href="s1_timer.html#id56" title="An accurate timestamp"/>
  <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
 </entry>
 <entry keyword="ClockPeriod()">
  <topic href="s1_timer.html#id52" title="Getting and setting"/>
  <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
  <topic href="s1_procs.html#id37" title="Round Robin"/>
  <entry keyword="struct _clockperiod">
   <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
  </entry>
 </entry>
 <entry keyword="ClockTime()">
  <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
 </entry>
 <entry keyword="close()">
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
 </entry>
 <entry keyword="CODE_TIMER">
  <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
 </entry>
 <entry keyword="command">
  <entry keyword="cksum">
   <topic href="s3_help.html#id29" title="Versions"/>
  </entry>
  <entry keyword="devc-pty">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="esh">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="export">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
  <entry keyword="fs-cache">
   <topic href="s1_resmgr.html#id19" title="Union'd filesystems"/>
  </entry>
  <entry keyword="fs-qnx4">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="grep">
   <topic href="s3_help.html#id19" title="Utilities Reference"/>
  </entry>
  <entry keyword="gunzip">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
  <entry keyword="gzip">
   <topic href="s3_help.html#id35" title="Narrow it down"/>
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
  <entry keyword="ls">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   <topic href="s3_help.html#id19" title="Utilities Reference"/>
   <topic href="s3_help.html#id29" title="Versions"/>
  </entry>
  <entry keyword="make">
   <topic href="s3_help.html#id19" title="Utilities Reference"/>
  </entry>
  <entry keyword="mqueue">
   <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
  </entry>
  <entry keyword="nice">
   <topic href="s1_procs.html#id55" title="Starting a process from the command line"/>
  </entry>
  <entry keyword="pidin">
   <topic href="s1_procs.html#id82" title="A few examples"/>
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="procnto">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="tar">
   <topic href="s3_help.html#id35" title="Narrow it down"/>
  </entry>
  <entry keyword="telnet">
   <topic href="s3_help.html#id29" title="Versions"/>
  </entry>
 </entry>
 <entry keyword="condition variable">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="See synchronization"/>
 </entry>
 <entry keyword="condvar">
 </entry>
 <entry keyword="ConnectAttach()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#id33" title="Creating the channel"/>
  <topic href="s1_msg.html#id29" title="Establishing a connection"/>
  <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_msg.html#id82" title="Impact on ConnectAttach()"/>
  <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  <topic href="s1_msg.html#the_server" title="The server"/>
  <entry keyword="example">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="networked case">
   <topic href="s1_msg.html#id82" title="Impact on ConnectAttach()"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
  </entry>
 </entry>
 <entry keyword="ConnectDetach()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#id29" title="Establishing a connection"/>
 </entry>
 <entry keyword="connection">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="connection ID">
  <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  <entry keyword="as equivalent to file descriptor">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="obtaining">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
  </entry>
  <entry keyword="resource manager">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  </entry>
 </entry>
 <entry keyword="constants">
  <entry keyword="channel">
   <entry keyword="_NTO_CHF_COID_DISCONNECT">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_DISCONNECT">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_FIXED_PRIORITY">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
    <topic href="s1_msg.html#id92" title="So what's the trick?"/>
   </entry>
   <entry keyword="_NTO_CHF_REPLY_LEN">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="_NTO_CHF_SENDER_LEN">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="_NTO_CHF_THREAD_DEATH">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="_NTO_CHF_UNBLOCK">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
    <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
    <topic href="s1_timer.html#id27" title="Signal notification"/>
    <topic href="s1_msg.html#id75" title="Synchronization problem"/>
   </entry>
  </entry>
  <entry keyword="clock">
   <entry keyword="CLOCK_MONOTONIC">
    <topic href="s1_timer.html#Advanced" title="Advanced topics"/>
    <topic href="s1_timer.html#id60" title="CLOCK_MONOTONIC"/>
    <topic href="s1_timer.html#id30" title="Creating a timer"/>
    <topic href="s1_timer.html#id62" title="So what does CLOCK_SOFTTIME do?"/>
   </entry>
   <entry keyword="CLOCK_REALTIME">
    <topic href="s1_timer.html#id60" title="CLOCK_MONOTONIC"/>
    <topic href="s1_timer.html#id30" title="Creating a timer"/>
    <topic href="s1_timer.html#id52" title="Getting and setting"/>
    <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
    <topic href="s1_timer.html#otherclock" title="Other clock sources"/>
    <topic href="s1_timer.html#id32" title="Signal, pulse, or thread?"/>
    <topic href="s1_timer.html#id62" title="So what does CLOCK_SOFTTIME do?"/>
   </entry>
   <entry keyword="CLOCK_SOFTTIME">
    <topic href="s1_timer.html#Advanced" title="Advanced topics"/>
    <topic href="s1_timer.html#id30" title="Creating a timer"/>
    <topic href="s1_timer.html#id62" title="So what does CLOCK_SOFTTIME do?"/>
   </entry>
  </entry>
  <entry keyword="CODE_TIMER">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="error">
   <entry keyword="EINTR">
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   </entry>
   <entry keyword="ENOSYS">
    <topic href="s1_procs.html#id67" title="Process creation and threads"/>
   </entry>
   <entry keyword="EOK">
    <topic href="s1_resmgr.html#id13" title="Finding the server"/>
    <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
    <topic href="s1_resmgr.html#id19" title="Union'd filesystems"/>
   </entry>
   <entry keyword="EROFS">
    <topic href="s1_resmgr.html#id13" title="Finding the server"/>
    <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
    <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
   </entry>
   <entry keyword="ETIMEDOUT">
    <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   </entry>
  </entry>
  <entry keyword="FD_CLOEXEC">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
  <entry keyword="_FTYPE_ANY">
   <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
  </entry>
  <entry keyword="_FTYPE_MQUEUE">
   <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
  </entry>
  <entry keyword="message passing">
   <entry keyword="_NTO_CHF_UNBLOCK">
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
   <entry keyword="_NTO_MI_UNBLOCK_REQ">
    <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
    <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
  </entry>
  <entry keyword="MT_TIMEDOUT">
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
  </entry>
  <entry keyword="ND_LOCAL_NODE">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="_NTO_INTR_FLAGS_END">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="_NTO_INTR_FLAGS_PROCESS">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="_NTO_INTR_FLAGS_TRK_MSK">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="_NTO_MI_ENDIAN_BIG">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="_NTO_MI_ENDIAN_DIFF">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="_NTO_MI_NET_CRED_DIRTY">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="_NTO_MI_UNBLOCK_REQ">
   <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="open mode">
   <entry keyword="O_RDONLY">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="O_RDWR">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="O_WRONLY">
    <topic href="s1_resmgr.html#id13" title="Finding the server"/>
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
  </entry>
  <entry keyword="P_NOWAIT">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
  </entry>
  <entry keyword="P_NOWAITO">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
  <entry keyword="P_OVERLAY">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
  <entry keyword="P_WAIT">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
  <entry keyword="POOL_FLAG_EXIT_SELF">
   <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  </entry>
  <entry keyword="POOL_FLAG_USE_SELF">
   <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  </entry>
  <entry keyword="process">
   <entry keyword="SPAWN_NOZOMBIE">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
  </entry>
  <entry keyword="PTHREAD_EXPLICIT_SCHED">
   <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
  </entry>
  <entry keyword="PTHREAD_STACK_LAZY">
   <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
  </entry>
  <entry keyword="PTHREAD_STACK_NOTLAZY">
   <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
  </entry>
  <entry keyword="pulse">
   <entry keyword="_PULSE_CODE_UNBLOCK">
    <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
   </entry>
  </entry>
  <entry keyword="resource manager">
   <entry keyword="DCMD_AUDIO_GET_SAMPLE_RATE">
    <topic href="s1_resmgr.html#devctl_simple2" title="An io_devctl() example that deals with data"/>
   </entry>
   <entry keyword="DCMD_AUDIO_SET_SAMPLE_RATE">
    <topic href="s1_resmgr.html#devctl_simple2" title="An io_devctl() example that deals with data"/>
   </entry>
   <entry keyword="F_ALLOCSP">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="F_FREESP">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="_IO_CHMOD">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
   </entry>
   <entry keyword="_IO_CHOWN">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="_IO_CLOSE_DUP">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
   <entry keyword="_IO_CONNECT">
    <topic href="s3_qnx2nto.html#id29" title="Client/Server using an I/O manager"/>
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
   <entry keyword="_IO_CONNECT_COMBINE">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="_IO_CONNECT_COMBINE_CLOSE">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#should_be_connect" title="Messages that  be connect messages but aren't"/>
   </entry>
   <entry keyword="_IO_CONNECT_LINK">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
   </entry>
   <entry keyword="_IO_CONNECT_MKNOD">
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
   </entry>
   <entry keyword="_IO_CONNECT_MOUNT">
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
   </entry>
   <entry keyword="_IO_CONNECT_OPEN">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="_IO_CONNECT_READLINK">
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
   </entry>
   <entry keyword="_IO_CONNECT_RENAME">
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
   </entry>
   <entry keyword="_IO_CONNECT_UNLINK">
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="_IO_DEVCTL">
    <topic href="s1_resmgr.html#devctl_simple" title="A simple io_devctl() example"/>
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
   </entry>
   <entry keyword="_IO_DUP">
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
   </entry>
   <entry keyword="_IO_FDINFO">
    <topic href="s1_resmgr.html#io_fdinfo" title="io_fdinfo()"/>
   </entry>
   <entry keyword="_IO_FLAG_RD">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="_IO_FLAG_WR">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="_IO_LSEEK">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
   <entry keyword="_IO_MMAP">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="_IO_MSG">
    <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
    <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
    <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
   </entry>
   <entry keyword="_IO_NOTIFY">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="_IO_OPENFD">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="_IO_PATHCONF">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="_IO_READ">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#id112" title="Step 2"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
   <entry keyword="_IO_SET_CONNECT_RET">
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="_IO_SET_FDINFO_LEN">
    <topic href="s1_resmgr.html#io_fdinfo" title="io_fdinfo()"/>
   </entry>
   <entry keyword="_IO_SET_PATHCONF_VALUE">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="_IO_SET_READ_NBYTES">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
   </entry>
   <entry keyword="_IO_SET_WRITE_NBYTES">
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="_IO_SPACE">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="_IO_STAT">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
   </entry>
   <entry keyword="_IO_SYNC">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="_IO_UTIME">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="_IO_WRITE">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="_IO_XTYPE_NONE">
    <topic href="s1_resmgr.html#id125" title="Step 2"/>
   </entry>
   <entry keyword="_IO_XTYPE_OFFSET">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#id125" title="Step 2"/>
    <topic href="s1_resmgr.html#id133" title="Step 7"/>
    <topic href="s1_resmgr.html#id154" title="Step 7"/>
   </entry>
   <entry keyword="IOFUNC_ATTR_ATIME">
    <topic href="s1_resmgr.html#id131" title="Step 6"/>
    <topic href="s1_resmgr.html#id154" title="Step 7"/>
   </entry>
   <entry keyword="IOFUNC_ATTR_DIRTY_TIME">
    <topic href="s1_resmgr.html#id131" title="Step 6"/>
   </entry>
   <entry keyword="IOFUNC_ATTR_MTIME">
    <topic href="s1_resmgr.html#id154" title="Step 7"/>
   </entry>
   <entry keyword="IOFUNC_MOUNT_32BIT">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="IOFUNC_MOUNT_FLAGS_PRIVATE">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="_IOFUNC_NFUNCS">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="IOFUNC_OCB_FLAGS_PRIVATE">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="IOFUNC_OCB_MMAP">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="IOFUNC_OCB_PRIVILEGED">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="IOFUNC_OCB_T">
    <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
   </entry>
   <entry keyword="IOFUNC_PC_CHOWN_RESTRICTED">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="IOFUNC_PC_LINK_DIR">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="IOFUNC_PC_NO_TRUNC">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="IOFUNC_PC_SYNC_IO">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="_IOMGR_PRIVATE_BASE">
    <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
   </entry>
   <entry keyword="_IOMGR_PRIVATE_MAX">
    <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
   </entry>
   <entry keyword="_POSIX_DEVDIR_FROM">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="_POSIX_DEVDIR_TO">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="_RESMGR_CONNECT_NFUNCS">
    <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
   </entry>
   <entry keyword="_RESMGR_DEFAULT">
    <topic href="s1_resmgr.html#general" title="General notes"/>
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#id159" title="Step 1"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_AFTER">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_BEFORE">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_DIR">
    <topic href="s1_resmgr.html#rc_main" title="main() and declarations"/>
    <topic href="s1_resmgr.html#returning_dirents" title="Returning directory entries"/>
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_FTYPEALL">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_FTYPEONLY">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_OPAQUE">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_SELF">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_IO_NFUNCS">
    <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
   </entry>
   <entry keyword="_RESMGR_NOREPLY">
    <topic href="s1_resmgr.html#blocking_in_resmgr" title="Blocking within the resource manager"/>
    <topic href="s1_resmgr.html#general" title="General notes"/>
    <topic href="s1_resmgr.html#id137" title="Step 9"/>
   </entry>
   <entry keyword="_RESMGR_STATUS">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
    <topic href="s1_resmgr.html#io_lock_ocb" title="io_lock_ocb()"/>
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
    <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
    <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
    <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
   </entry>
  </entry>
  <entry keyword="_SC_PAGESIZE">
   <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
  </entry>
  <entry keyword="scheduling">
   <entry keyword="SCHED_FIFO">
    <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
   </entry>
   <entry keyword="SCHED_OTHER">
    <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
   </entry>
   <entry keyword="SCHED_RR">
    <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
   </entry>
  </entry>
  <entry keyword="sharing flags">
   <entry keyword="SH_COMPAT">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="SH_DENYNO">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="SH_DENYRD">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="SH_DENYRW">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="SH_DENYWR">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
  </entry>
  <entry keyword="signal">
   <entry keyword="SIGALRM">
    <topic href="s1_timer.html#id20" title="Signal notification"/>
    <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
   </entry>
   <entry keyword="SIGEV_INTR">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
    <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
    <topic href="s1_inter.html#id33" title="The trade-offs"/>
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
   <entry keyword="SIGEV_PULSE">
    <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
    <topic href="s1_timer.html#id18" title="Pulse notification"/>
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
   <entry keyword="SIGEV_PULSE_PRIO_INHERIT">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
    <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
    <topic href="s1_timer.html#id20" title="Signal notification"/>
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL family">
    <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_CODE">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
    <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
    <topic href="s1_timer.html#id20" title="Signal notification"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_PULSE">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_THREAD">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
    <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
    <topic href="s1_timer.html#id20" title="Signal notification"/>
   </entry>
   <entry keyword="SIGEV_THREAD">
    <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
    <topic href="s1_timer.html#sigev_thread" title="Thread notification"/>
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
   <entry keyword="SIGEV_UNBLOCK">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
    <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
    <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   </entry>
   <entry keyword="SIGEV_UNBLOCK example">
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   </entry>
   <entry keyword="SIGSEGV">
    <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
   </entry>
   <entry keyword="SIGUSR1">
    <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
   </entry>
  </entry>
  <entry keyword="thread">
   <entry keyword="STATE_CONDVAR">
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_DEAD">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_INTR">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_JOIN">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_MUTEX">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
    <topic href="s1_procs.html#id46" title="The blocked states"/>
   </entry>
   <entry keyword="STATE_NANOSLEEP">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_NET_REPLY">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_NET_SEND">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_READY">
    <topic href="s1_inter.html#id15" title="Attaching with InterruptAttachEvent()"/>
    <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
    <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
    <topic href="s1_timer.html#id15" title="Notification schemes"/>
    <topic href="s1_timer.html#id4" title="Operating periodically"/>
    <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
    <topic href="s1_procs.html#id44" title="READY"/>
    <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
    <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
    <topic href="s1_procs.html#id46" title="The blocked states"/>
    <topic href="s1_timer.html#id11" title="Timing jitter"/>
   </entry>
   <entry keyword="STATE_RECEIVE">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_RECV">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
    <topic href="s1_timer.html#id25" title="Pulse notification"/>
    <topic href="s1_msg.html#id92" title="So what's the trick?"/>
   </entry>
   <entry keyword="STATE_REPLY">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
    <topic href="s1_timer.html#notes" title="Notes"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   </entry>
   <entry keyword="STATE_RUNNING">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
    <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
    <topic href="s1_procs.html#id44" title="READY"/>
    <topic href="s1_procs.html#id42" title="RUNNING"/>
   </entry>
   <entry keyword="STATE_SEM">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
    <topic href="s1_procs.html#id46" title="The blocked states"/>
   </entry>
   <entry keyword="STATE_SEND">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
    <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
   </entry>
   <entry keyword="STATE_SIGSUSPEND">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_SIGWAITINFO">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_STACK">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_STOPPED">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_WAITCTX">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_WAITPAGE">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
   <entry keyword="STATE_WAITTHREAD">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   </entry>
  </entry>
  <entry keyword="timer">
   <entry keyword="TIMER_ABSTIME">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
  </entry>
 </entry>
 <entry keyword="consumer">
  <entry keyword="and producer">
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
   <entry keyword="state analysis">
    <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
   </entry>
  </entry>
  <entry keyword="and producer using condvars">
   <entry keyword="example">
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
   </entry>
  </entry>
 </entry>
 <entry keyword="context switch">
  <topic href="s1_procs.html#id29" title="The kernel as arbiter"/>
  <topic href="s1_procs.html#id51" title="Why processes?"/>
 </entry>
 <entry keyword="context_alloc()">
  <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  <topic href="s1_procs.html#id114" title="The thread pool functions"/>
 </entry>
 <entry keyword="context_free()">
  <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  <topic href="s1_procs.html#id114" title="The thread pool functions"/>
 </entry>
 <entry keyword="conventions">
  <entry keyword="typographical">
   <topic href="about.html#Typographical_conventions" title="Typographical conventions"/>
  </entry>
 </entry>
 <entry keyword="cookbook">
  <topic href="s1_resmgr.html#examples" title="Examples"/>
 </entry>
 <entry keyword="counter">
  <entry keyword="high accuracy">
   <topic href="s1_timer.html#id56" title="An accurate timestamp"/>
  </entry>
  <entry keyword="high frequency">
   <topic href="s1_timer.html#id56" title="An accurate timestamp"/>
  </entry>
 </entry>
 <entry keyword="CPU hog">
  <topic href="s1_timer.html#id4" title="Operating periodically"/>
 </entry>
 <entry keyword="Creceive() (QNX 4)">
  <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
  <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
 </entry>
 <entry keyword="ctime()">
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
 </entry>
 <entry keyword="data structure">
 </entry>
 <entry keyword="data type">
 </entry>
 <entry keyword="data types">
  <entry keyword="struct _clockadjust">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
  <entry keyword="struct _clockperiod">
   <entry keyword="members">
    <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
   </entry>
  </entry>
  <entry keyword="struct itimerspec">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="struct sigevent">
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
   <entry keyword="and SIGEV_UNBLOCK">
    <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
   </entry>
   <entry keyword="shortcut initialization">
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   </entry>
  </entry>
  <entry keyword="struct sigevent example">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="struct timespec">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
 </entry>
 <entry keyword="DCMD_AUDIO_GET_SAMPLE_RATE">
  <topic href="s1_resmgr.html#devctl_simple2" title="An io_devctl() example that deals with data"/>
 </entry>
 <entry keyword="DCMD_AUDIO_SET_SAMPLE_RATE">
  <topic href="s1_resmgr.html#devctl_simple2" title="An io_devctl() example that deals with data"/>
 </entry>
 <entry keyword="deadlock">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="with message passing">
   <topic href="s1_msg.html#sendhierarchy" title="The send-hierarchy"/>
  </entry>
 </entry>
 <entry keyword="decoupling">
  <topic href="s1_procs.html#id101" title="Comparisons"/>
  <entry keyword="via message passing">
   <topic href="s1_msg.html#id4" title="A small microkernel and message passing"/>
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
   <topic href="s1_msg.html#What_it_means" title="What it means for you"/>
  </entry>
 </entry>
 <entry keyword="delay()">
  <topic href="s1_timer.html#id7" title="Base timing resolution"/>
  <topic href="s1_timer.html#id11" title="Timing jitter"/>
 </entry>
 <entry keyword="detaching interrupt handlers">
  <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
 </entry>
 <entry keyword="devc-pty">
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
 </entry>
 <entry keyword="devctl()">
  <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
  <topic href="s3_qnx2nto.html#id26" title="Translating messages to standard file-descriptor-based POSIX calls"/>
 </entry>
 <entry keyword="_DEVCTL_DATA()">
  <topic href="s1_resmgr.html#id168" title="Step 1"/>
 </entry>
 <entry keyword="diagram">
  <entry keyword="big picture of timer chain">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
  <entry keyword="clock jitter">
   <topic href="s1_timer.html#id11" title="Timing jitter"/>
  </entry>
  <entry keyword="InterruptAttach() and wakeups">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
  <entry keyword="InterruptAttachEvent() and wakeups">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
  <entry keyword="interrupts and waking up only when required">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
  <entry keyword="interrupts with unnecessary wakeups">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
  <entry keyword="server/subserver">
   <topic href="s1_msg.html#id20" title="An important subtlety"/>
  </entry>
  <entry keyword="using InterruptAttach()">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
 </entry>
 <entry keyword="dirent">
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
  <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
 </entry>
 <entry keyword="disabling interrupts">
  <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
 </entry>
 <entry keyword="discontinuities in time flow">
  <topic href="s1_timer.html#id52" title="Getting and setting"/>
 </entry>
 <entry keyword="dispatch_block()">
  <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
 </entry>
 <entry keyword="dispatch_context_alloc()">
  <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
 </entry>
 <entry keyword="dispatch_create()">
  <topic href="s1_resmgr.html#skeleton" title="The basic skeleton of a resource manager"/>
  <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
 </entry>
 <entry keyword="dispatch_handler()">
  <topic href="s1_resmgr.html#id36" title="Behind the scenes at the library"/>
  <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
 </entry>
 <entry keyword="Dodge, Dan">
  <topic href="preface.html#id3" title="A little history"/>
 </entry>
 <entry keyword="domain of authority">
  <topic href="s1_resmgr.html#id24" title="Registering a pathname"/>
 </entry>
 <entry keyword="edge-sensitive interrupt">
  <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  <entry keyword="diagram">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  </entry>
 </entry>
 <entry keyword="EINTR">
  <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  <entry keyword="message passing">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
 </entry>
 <entry keyword="enabling interrupts">
  <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
 </entry>
 <entry keyword="endian">
  <entry keyword="server flags">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
 </entry>
 <entry keyword="ENOSYS">
  <topic href="s1_procs.html#id67" title="Process creation and threads"/>
 </entry>
 <entry keyword="environment variable">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  <entry keyword="PATH">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
 </entry>
 <entry keyword="EOK">
  <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  <topic href="s1_resmgr.html#id19" title="Union'd filesystems"/>
 </entry>
 <entry keyword="EROFS">
  <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
 </entry>
 <entry keyword="errno">
  <entry keyword="MsgError()">
   <topic href="s1_resmgr.html#general" title="General notes"/>
   <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  </entry>
  <entry keyword="MsgReply()">
   <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  </entry>
 </entry>
 <entry keyword="esh">
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
 </entry>
 <entry keyword="ETIMEDOUT">
  <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
 </entry>
 <entry keyword="event">
  <entry keyword="and interrupt handlers">
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
  <entry keyword="and interrupts">
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
  </entry>
  <entry keyword="and ISRs">
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
 </entry>
 <entry keyword="example">
  <entry keyword="/dev/null resource manager">
   <topic href="s1_resmgr.html#the_resource_manager_library" title="The resource manager library"/>
  </entry>
  <entry keyword="absolute timers">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="barriers">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
  <entry keyword="car using timers">
   <topic href="s1_timer.html#Clocks" title="Clocks and timers"/>
  </entry>
  <entry keyword="ChannelCreate()">
   <topic href="s1_timer.html#main" title="main()"/>
  </entry>
  <entry keyword="ConnectAttach()">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="connecting to a server">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
  </entry>
  <entry keyword="creating a tar file">
   <topic href="s3_help.html#id35" title="Narrow it down"/>
  </entry>
  <entry keyword="creating a thread">
   <topic href="s1_procs.html#id82" title="A few examples"/>
   <topic href="s1_procs.html#parallel" title="Threads in mathematical operations"/>
  </entry>
  <entry keyword="demultiplexing pulse versus message">
   <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
  </entry>
  <entry keyword="demultiplexing the pulse code">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
  <entry keyword="detaching interrupt handler">
   <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
  </entry>
  <entry keyword="file">
   <entry keyword="time1.c">
    <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
   </entry>
   <entry keyword="tt1.c">
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   </entry>
  </entry>
  <entry keyword="filling struct itimerspec">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="interrupt handler">
   <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
  <entry keyword="InterruptAttach()">
   <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
  <entry keyword="InterruptAttachEvent()">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="InterruptWait()">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="IOV">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="ISR">
   <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
  <entry keyword="ISR pseudo-code">
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
  </entry>
  <entry keyword="kernel timeout">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="message passing">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <topic href="s1_msg.html#sampcli" title="Sending messages"/>
   <entry keyword="fs-qnx4">
    <topic href="s1_msg.html#id56" title="Reading and writing data"/>
   </entry>
   <entry keyword="multipart messages">
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
   </entry>
   <entry keyword="replying with no data">
    <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
   </entry>
   <entry keyword="server">
    <topic href="s1_msg.html#id37" title="Server framework"/>
   </entry>
   <entry keyword="write()">
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
   </entry>
  </entry>
  <entry keyword="messages">
   <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   <topic href="s1_timer.html#main" title="main()"/>
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="MsgReadv()">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="MsgReceive()">
   <topic href="s1_timer.html#main" title="main()"/>
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
   <topic href="s1_msg.html#id37" title="Server framework"/>
  </entry>
  <entry keyword="MsgReply()">
   <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   <topic href="s1_msg.html#id37" title="Server framework"/>
  </entry>
  <entry keyword="MsgSend()">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <topic href="s1_msg.html#sampcli" title="Sending messages"/>
  </entry>
  <entry keyword="MsgSendv()">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="netmgr_remote_nd()">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="netmgr_strtond()">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="networked message passing">
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
  </entry>
  <entry keyword="node descriptors">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="non-blocking pthread_join()">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="one-shot timers">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="periodic timers">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="priority inversion">
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  </entry>
  <entry keyword="producer">
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  </entry>
  <entry keyword="producer and consumer">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  </entry>
  <entry keyword="pthread_attr_init()">
   <topic href="s1_procs.html#id82" title="A few examples"/>
  </entry>
  <entry keyword="pthread_attr_setdetachstate()">
   <topic href="s1_procs.html#id82" title="A few examples"/>
  </entry>
  <entry keyword="pthread_attr_setinheritsched()">
   <topic href="s1_procs.html#id82" title="A few examples"/>
  </entry>
  <entry keyword="pthread_attr_setschedpolicy()">
   <topic href="s1_procs.html#id82" title="A few examples"/>
  </entry>
  <entry keyword="pthread_attr_t">
   <topic href="s1_procs.html#id82" title="A few examples"/>
  </entry>
  <entry keyword="pthread_barrier_init()">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
  <entry keyword="pthread_barrier_wait()">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
  <entry keyword="pthread_cond_signal()">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
  </entry>
  <entry keyword="pthread_cond_wait()">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
  </entry>
  <entry keyword="pthread_create()">
   <topic href="s1_procs.html#id82" title="A few examples"/>
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
   <topic href="s1_procs.html#parallel" title="Threads in mathematical operations"/>
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
  <entry keyword="pthread_join()">
   <topic href="s1_procs.html#id88" title="Joining"/>
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="pthread_mutex_lock()">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
  </entry>
  <entry keyword="pthread_mutex_unlock()">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
  </entry>
  <entry keyword="pthread_sleepon_lock()">
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  </entry>
  <entry keyword="pthread_sleepon_signal()">
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  </entry>
  <entry keyword="pthread_sleepon_unlock()">
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  </entry>
  <entry keyword="pthread_sleepon_wait()">
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  </entry>
  <entry keyword="pulses">
   <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   <topic href="s1_timer.html#main" title="main()"/>
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="receive ID">
   <topic href="s1_msg.html#id37" title="Server framework"/>
  </entry>
  <entry keyword="receiving a message">
   <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
  </entry>
  <entry keyword="receiving a pulse">
   <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
  </entry>
  <entry keyword="relative timers">
   <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   <topic href="s1_timer.html#main" title="main()"/>
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="replying with an error code">
   <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  </entry>
  <entry keyword="replying with just EOK">
   <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  </entry>
  <entry keyword="resource manager">
   <entry keyword="io_devctl()">
    <topic href="s1_resmgr.html#devctl_simple" title="A simple io_devctl() example"/>
    <topic href="s1_resmgr.html#devctl_simple2" title="An io_devctl() example that deals with data"/>
   </entry>
   <entry keyword="io_open() handler">
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
   </entry>
   <entry keyword="io_read()">
    <topic href="s1_resmgr.html#read_simple" title="A simple io_read() example"/>
    <topic href="s1_resmgr.html#id121" title="The code"/>
   </entry>
   <entry keyword="io_write()">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
   </entry>
   <entry keyword="returning data to a client">
    <topic href="s1_resmgr.html#read_simple" title="A simple io_read() example"/>
    <topic href="s1_resmgr.html#id121" title="The code"/>
   </entry>
  </entry>
  <entry keyword="SETIOV() macro">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="SIGEV_PULSE_INIT() (macro)">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="SIGEV_THREAD_INIT() (macro)">
   <topic href="s1_timer.html#id49" title="Timers creating threads"/>
  </entry>
  <entry keyword="struct itimerspec">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="struct sigevent">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   <entry keyword="SIGEV_UNBLOCK">
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   </entry>
  </entry>
  <entry keyword="the pulse value">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
  <entry keyword="thread">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
  <entry keyword="thread pool">
   <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  </entry>
  <entry keyword="thread_pool_create()">
   <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  </entry>
  <entry keyword="thread_pool_start()">
   <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  </entry>
  <entry keyword="thread_pool_start() pseudo code">
   <topic href="s1_procs.html#id114" title="The thread pool functions"/>
  </entry>
  <entry keyword="timeouts">
   <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   <topic href="s1_timer.html#main" title="main()"/>
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="timer_create()">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="timer_create() and signals">
   <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
  </entry>
  <entry keyword="timer_settime()">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="TimerTimeout()">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   <entry keyword="and multiple states">
    <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
   </entry>
  </entry>
  <entry keyword="where to use pthread_cond_broadcast()">
   <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
  </entry>
  <entry keyword="where to use pthread_cond_signal()">
   <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
  </entry>
  <entry keyword="where to use pthread_sleepon_broadcast()">
   <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
  </entry>
  <entry keyword="where to use pthread_sleepon_signal()">
   <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
  </entry>
 </entry>
 <entry keyword="exceptions and scheduling">
  <topic href="s1_procs.html#id121" title="Rescheduling — exceptions"/>
  <topic href="s1_procs.html#sched_real_world" title="Scheduling and the real world"/>
 </entry>
 <entry keyword="exec()">
  <topic href="s1_procs.html#id69" title="So what should you use?"/>
  <topic href="s1_procs.html#id65" title="Starting a process with the vfork() call"/>
 </entry>
 <entry keyword="exec() family">
  <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="execl()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="execle()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="execlp()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="execlpe()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="execv()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="execve()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="execvp()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="execvpe()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="exit function">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="exit()">
  <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
  <topic href="s1_procs.html#id65" title="Starting a process with the vfork() call"/>
  <entry keyword="and interrupts">
   <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
  </entry>
 </entry>
 <entry keyword="export">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="F_ALLOCSP">
  <topic href="s1_resmgr.html#io_space" title="io_space()"/>
 </entry>
 <entry keyword="F_FREESP">
  <topic href="s1_resmgr.html#io_space" title="io_space()"/>
 </entry>
 <entry keyword="faults and scheduling">
  <topic href="s1_procs.html#id121" title="Rescheduling — exceptions"/>
  <topic href="s1_procs.html#sched_real_world" title="Scheduling and the real world"/>
 </entry>
 <entry keyword="fcntl()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="FD_CLOEXEC">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="fgets()">
  <topic href="s1_resmgr.html#id21" title="Client summary"/>
  <topic href="s1_resmgr.html#id8" title="Filesystem"/>
 </entry>
 <entry keyword="FIFO scheduling">
  <topic href="s1_procs.html#id33" title="Scheduling policies"/>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="FILE">
  <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  <topic href="s1_resmgr.html#id21" title="Client summary"/>
 </entry>
 <entry keyword="file descriptor">
  <entry keyword="and Resource managers">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  </entry>
  <entry keyword="connection ID">
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="resource manager">
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  </entry>
 </entry>
 <entry keyword="file stream">
  <entry keyword="and Resource managers">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  </entry>
 </entry>
 <entry keyword="filesystem">
  <entry keyword="chown restricted">
   <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
  </entry>
  <entry keyword="server example">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="union">
   <topic href="s1_resmgr.html#id19" title="Union'd filesystems"/>
  </entry>
 </entry>
 <entry keyword="floating-point operations">
  <entry keyword="not safe to use in ISRs">
   <topic href="s1_inter.html#id4" title="Interrupt service routine"/>
  </entry>
  <entry keyword="not safe to use in signal handlers">
   <topic href="s1_timer.html#id27" title="Signal notification"/>
  </entry>
 </entry>
 <entry keyword="fopen()">
  <topic href="s1_resmgr.html#id21" title="Client summary"/>
  <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  <topic href="s1_resmgr.html#id17" title="Handling directories"/>
 </entry>
 <entry keyword="fork()">
  <topic href="s1_procs.html#id67" title="Process creation and threads"/>
  <topic href="s1_procs.html#id69" title="So what should you use?"/>
  <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
  <topic href="s1_procs.html#id65" title="Starting a process with the vfork() call"/>
  <topic href="s1_procs.html#id123" title="Summary"/>
  <entry keyword="and resource managers">
   <topic href="s1_procs.html#id69" title="So what should you use?"/>
  </entry>
  <entry keyword="and threads">
   <topic href="s1_procs.html#id69" title="So what should you use?"/>
  </entry>
  <entry keyword="avoid">
   <topic href="s1_procs.html#id69" title="So what should you use?"/>
  </entry>
 </entry>
 <entry keyword="fprintf()">
  <topic href="s1_resmgr.html#id8" title="Filesystem"/>
 </entry>
 <entry keyword="fs-cache">
  <topic href="s1_resmgr.html#id19" title="Union'd filesystems"/>
 </entry>
 <entry keyword="fs-qnx4">
  <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  <topic href="s1_msg.html#id58" title="Multipart messages"/>
  <topic href="s1_msg.html#id56" title="Reading and writing data"/>
 </entry>
 <entry keyword="_FTYPE_ANY">
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="_FTYPE_MQUEUE">
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="function">
  <entry keyword="atomic">
   <entry keyword="atomic_*()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="atomic_set()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
  </entry>
  <entry keyword="basename()">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
  <entry keyword="block_func()">
   <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
   <topic href="s1_procs.html#id114" title="The thread pool functions"/>
  </entry>
  <entry keyword="channel">
   <entry keyword="ChannelCreate()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
    <topic href="s1_msg.html#id33" title="Creating the channel"/>
    <topic href="s3_glossary.html" title="Glossary"/>
    <topic href="s1_timer.html#main" title="main()"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="ChannelCreate() example">
    <topic href="s1_timer.html#main" title="main()"/>
   </entry>
   <entry keyword="ChannelDestroy()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id33" title="Creating the channel"/>
   </entry>
   <entry keyword="ConnectAttach()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id33" title="Creating the channel"/>
    <topic href="s1_msg.html#id29" title="Establishing a connection"/>
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
    <topic href="s3_glossary.html" title="Glossary"/>
    <topic href="s1_msg.html#id82" title="Impact on ConnectAttach()"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
    <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
    <topic href="s1_msg.html#the_server" title="The server"/>
   </entry>
   <entry keyword="ConnectAttach() example">
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   </entry>
   <entry keyword="ConnectAttach() prototype">
    <topic href="s1_msg.html#id29" title="Establishing a connection"/>
   </entry>
   <entry keyword="ConnectDetach()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id29" title="Establishing a connection"/>
   </entry>
  </entry>
  <entry keyword="chmod()">
   <topic href="s1_resmgr.html#the_resource_manager_library" title="The resource manager library"/>
  </entry>
  <entry keyword="chown()">
   <topic href="s1_resmgr.html#the_resource_manager_library" title="The resource manager library"/>
  </entry>
  <entry keyword="clock_nanosleep()">
   <topic href="s1_timer.html#id64" title="Using different clock sources"/>
  </entry>
  <entry keyword="close()">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
  </entry>
  <entry keyword="context_alloc()">
   <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
   <topic href="s1_procs.html#id114" title="The thread pool functions"/>
  </entry>
  <entry keyword="context_free()">
   <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
   <topic href="s1_procs.html#id114" title="The thread pool functions"/>
  </entry>
  <entry keyword="Creceive()">
   <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
   <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
  </entry>
  <entry keyword="delay()">
   <topic href="s1_timer.html#id7" title="Base timing resolution"/>
   <topic href="s1_timer.html#id11" title="Timing jitter"/>
  </entry>
  <entry keyword="devctl()">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
   <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
   <topic href="s3_glossary.html" title="Glossary"/>
   <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
   <topic href="s3_qnx2nto.html#id26" title="Translating messages to standard file-descriptor-based POSIX calls"/>
  </entry>
  <entry keyword="dispatch_create()">
   <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
  </entry>
  <entry keyword="event related">
   <entry keyword="SIGEV_INTR_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_PULSE_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_CODE_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_THREAD_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_THREAD_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_UNBLOCK_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
  </entry>
  <entry keyword="exit()">
   <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
   <topic href="s1_procs.html#id65" title="Starting a process with the vfork() call"/>
  </entry>
  <entry keyword="fcntl()">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
  <entry keyword="fgets()">
   <topic href="s1_resmgr.html#id21" title="Client summary"/>
   <topic href="s1_resmgr.html#id8" title="Filesystem"/>
  </entry>
  <entry keyword="fopen()">
   <topic href="s1_resmgr.html#id21" title="Client summary"/>
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
   <topic href="s1_resmgr.html#id17" title="Handling directories"/>
  </entry>
  <entry keyword="fork()">
   <topic href="s1_procs.html#id67" title="Process creation and threads"/>
   <topic href="s1_procs.html#id69" title="So what should you use?"/>
   <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
   <topic href="s1_procs.html#id65" title="Starting a process with the vfork() call"/>
   <topic href="s1_procs.html#id123" title="Summary"/>
  </entry>
  <entry keyword="fprintf()">
   <topic href="s1_resmgr.html#id8" title="Filesystem"/>
  </entry>
  <entry keyword="getppid()">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="gotAMessage()">
   <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
   <topic href="s1_timer.html#main" title="main()"/>
  </entry>
  <entry keyword="gotAPulse()">
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   <topic href="s1_timer.html#main" title="main()"/>
  </entry>
  <entry keyword="handler_func()">
   <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
   <topic href="s1_procs.html#id114" title="The thread pool functions"/>
  </entry>
  <entry keyword="in*()">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
  </entry>
  <entry keyword="in8()">
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
  <entry keyword="interrupt">
   <entry keyword="Interrupt() family">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="InterruptAttach()">
    <topic href="s1_inter.html#id13" title="Attaching an interrupt handler"/>
    <topic href="s1_inter.html#id17" title="Attaching with InterruptAttach()"/>
    <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
    <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
    <topic href="s1_inter.html#Summary" title="Summary"/>
    <topic href="s1_inter.html#id23" title="The flags parameter"/>
    <topic href="s1_inter.html#id25" title="The interrupt service routine"/>
    <topic href="s1_inter.html#id33" title="The trade-offs"/>
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
   <entry keyword="InterruptAttach() diagram">
    <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
   </entry>
   <entry keyword="InterruptAttachEvent()">
    <topic href="s1_inter.html#id13" title="Attaching an interrupt handler"/>
    <topic href="s1_inter.html#id17" title="Attaching with InterruptAttach()"/>
    <topic href="s1_inter.html#id15" title="Attaching with InterruptAttachEvent()"/>
    <topic href="s3_qnx2nto.html#pp-isr" title="Interrupt service routines"/>
    <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
    <topic href="s1_inter.html#id35" title="ISR functions"/>
    <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
    <topic href="s1_inter.html#Summary" title="Summary"/>
    <topic href="s1_inter.html#id23" title="The flags parameter"/>
    <topic href="s1_inter.html#id25" title="The interrupt service routine"/>
    <topic href="s1_inter.html#id33" title="The trade-offs"/>
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
   <entry keyword="InterruptAttachEvent() diagram">
    <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
   </entry>
   <entry keyword="InterruptAttachEvent() example">
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
   <entry keyword="InterruptAttachEvent() versus InterruptAttach()">
    <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
   <entry keyword="InterruptDetach()">
    <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
   </entry>
   <entry keyword="InterruptDisable()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
    <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   </entry>
   <entry keyword="InterruptEnable()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
    <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   </entry>
   <entry keyword="InterruptLock()">
    <topic href="s3_glossary.html" title="Glossary"/>
    <topic href="s1_inter.html#id35" title="ISR functions"/>
    <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
    <topic href="s1_inter.html#Summary" title="Summary"/>
   </entry>
   <entry keyword="InterruptMask()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="InterruptUnlock()">
    <topic href="s3_glossary.html" title="Glossary"/>
    <topic href="s1_inter.html#id35" title="ISR functions"/>
    <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
    <topic href="s1_inter.html#Summary" title="Summary"/>
   </entry>
   <entry keyword="InterruptUnmask()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="InterruptWait()">
    <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
    <topic href="s1_inter.html#id33" title="The trade-offs"/>
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
   <entry keyword="InterruptWait() example">
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
  </entry>
  <entry keyword="io_fdinfo()">
   <topic href="s1_resmgr.html#io_fdinfo" title="io_fdinfo()"/>
  </entry>
  <entry keyword="io_read()">
   <topic href="s1_resmgr.html#read_simple" title="A simple io_read() example"/>
   <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
   <entry keyword="example">
    <topic href="s1_resmgr.html#read_simple" title="A simple io_read() example"/>
   </entry>
  </entry>
  <entry keyword="io_write()">
   <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
   <entry keyword="example">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
   </entry>
  </entry>
  <entry keyword="ISR-safe">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
   <entry keyword="atomic() family">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="in() family">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="InterruptDisable()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="InterruptEnable()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="InterruptLock()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="InterruptMask()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="InterruptUnlock()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="InterruptUnmask()">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="mem() family">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="out() family">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="str() family">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
  </entry>
  <entry keyword="kill()">
   <topic href="s3_qnx2nto.html#id14" title="Pulses and events"/>
  </entry>
  <entry keyword="lseek()">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
   <topic href="s1_resmgr.html#id21" title="Client summary"/>
   <topic href="s3_glossary.html" title="Glossary"/>
   <topic href="s1_resmgr.html#Summary" title="Summary"/>
  </entry>
  <entry keyword="malloc()">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="mem*()">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
  </entry>
  <entry keyword="memcpy()">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="message passing">
   <entry keyword="ChannelCreate()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
    <topic href="s1_msg.html#id33" title="Creating the channel"/>
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
    <topic href="s1_msg.html#id92" title="So what's the trick?"/>
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="ChannelDestroy()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id33" title="Creating the channel"/>
   </entry>
   <entry keyword="ConnectAttach()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id33" title="Creating the channel"/>
    <topic href="s1_msg.html#id29" title="Establishing a connection"/>
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
    <topic href="s1_msg.html#id82" title="Impact on ConnectAttach()"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
    <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
    <topic href="s1_msg.html#the_server" title="The server"/>
   </entry>
   <entry keyword="ConnectDetach()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id29" title="Establishing a connection"/>
   </entry>
   <entry keyword="MsgDeliverEvent()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s3_glossary.html" title="Glossary"/>
    <topic href="s1_msg.html#id84" title="Impact on MsgDeliverEvent()"/>
    <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
    <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
    <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
    <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
    <topic href="s1_msg.html#sendhierarchy" title="The send-hierarchy"/>
   </entry>
   <entry keyword="MsgError()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_resmgr.html#general" title="General notes"/>
    <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
   </entry>
   <entry keyword="MsgInfo()">
    <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="MsgRead()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
    <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
    <topic href="s1_msg.html#id62" title="Implementation"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
    <topic href="s1_msg.html#id56" title="Reading and writing data"/>
    <topic href="s1_resmgr.html#id146" title="Step 3"/>
   </entry>
   <entry keyword="MsgReadv()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
   </entry>
   <entry keyword="MsgReceive()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s3_glossary.html" title="Glossary"/>
    <topic href="s1_resmgr.html#id26" title="Handling messages"/>
    <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
    <topic href="s1_msg.html#id62" title="Implementation"/>
    <topic href="s1_timer.html#main" title="main()"/>
    <topic href="s1_msg.html#id35" title="Message handling"/>
    <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
    <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
    <topic href="s1_msg.html#id42" title="More about channels"/>
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
    <topic href="s1_msg.html#id49" title="Not replying to the client"/>
    <topic href="s1_timer.html#notes" title="Notes"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
    <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
    <topic href="s1_msg.html#id56" title="Reading and writing data"/>
    <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
    <topic href="s1_msg.html#id37" title="Server framework"/>
    <topic href="s1_msg.html#id92" title="So what's the trick?"/>
    <topic href="s1_msg.html#id75" title="Synchronization problem"/>
    <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
    <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="MsgReceive() example">
    <topic href="s1_timer.html#main" title="main()"/>
   </entry>
   <entry keyword="MsgReceivePulse()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s3_glossary.html" title="Glossary"/>
    <topic href="s1_msg.html#id62" title="Implementation"/>
    <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
    <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
   </entry>
   <entry keyword="MsgReceivev()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s3_glossary.html" title="Glossary"/>
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
    <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
    <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
   </entry>
   <entry keyword="MsgReply()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
    <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
    <topic href="s1_msg.html#id35" title="Message handling"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
    <topic href="s1_msg.html#id56" title="Reading and writing data"/>
    <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
    <topic href="s1_msg.html#id47" title="Replying to the client"/>
    <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
    <topic href="s1_msg.html#id37" title="Server framework"/>
    <topic href="s1_resmgr.html#id129" title="Step 5"/>
    <topic href="s1_resmgr.html#id135" title="Step 8"/>
    <topic href="s1_resmgr.html#id137" title="Step 9"/>
    <topic href="s1_msg.html#id75" title="Synchronization problem"/>
    <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
   </entry>
   <entry keyword="MsgReply() example">
    <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
    <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   </entry>
   <entry keyword="MsgReplyv()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
    <topic href="s1_resmgr.html#general" title="General notes"/>
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
   </entry>
   <entry keyword="MsgSend()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
    <topic href="s1_msg.html#id62" title="Implementation"/>
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
    <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
    <topic href="s1_msg.html#id35" title="Message handling"/>
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
    <topic href="s1_msg.html#Pulses" title="Pulses"/>
    <topic href="s1_msg.html#id56" title="Reading and writing data"/>
    <topic href="s1_msg.html#id47" title="Replying to the client"/>
    <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
    <topic href="s1_msg.html#sampcli" title="Sending messages"/>
    <topic href="s1_msg.html#id37" title="Server framework"/>
    <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
    <topic href="s1_msg.html#the_server" title="The server"/>
    <topic href="s1_msg.html#id60" title="What about the other versions?"/>
   </entry>
   <entry keyword="MsgSend() example">
    <topic href="s1_msg.html#sampcli" title="Sending messages"/>
   </entry>
   <entry keyword="MsgSend() family">
    <topic href="s1_msg.html#sampcli" title="Sending messages"/>
    <topic href="s1_msg.html#id60" title="What about the other versions?"/>
   </entry>
   <entry keyword="MsgSendnc()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id60" title="What about the other versions?"/>
   </entry>
   <entry keyword="MsgSendsv()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id60" title="What about the other versions?"/>
   </entry>
   <entry keyword="MsgSendsvnc()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id60" title="What about the other versions?"/>
   </entry>
   <entry keyword="MsgSendv()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
    <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
    <topic href="s1_resmgr.html#id129" title="Step 5"/>
    <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
    <topic href="s1_msg.html#id60" title="What about the other versions?"/>
   </entry>
   <entry keyword="MsgSendvnc()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id60" title="What about the other versions?"/>
   </entry>
   <entry keyword="MsgSendvs()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
    <topic href="s1_msg.html#id60" title="What about the other versions?"/>
   </entry>
   <entry keyword="MsgSendvsnc()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_msg.html#id60" title="What about the other versions?"/>
   </entry>
   <entry keyword="MsgVerifyEvent()">
    <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
   </entry>
   <entry keyword="MsgWrite()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
    <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
    <topic href="s1_msg.html#id62" title="Implementation"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
    <topic href="s1_msg.html#id56" title="Reading and writing data"/>
    <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
   </entry>
   <entry keyword="MsgWritev()">
    <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
    <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
   </entry>
  </entry>
  <entry keyword="message queue">
   <entry keyword="mq_open()">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="mq_receive()">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
  </entry>
  <entry keyword="message-sending">
   <entry keyword="See message passing"/>
  </entry>
  <entry keyword="mktime()">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="MsgVerifyEvent()">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="name_attach()">
   <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="name_close()">
   <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="name_detach()">
   <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="name_open()">
   <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="nanospin()">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="netmgr_remote_nd()">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="netmgr_strtond()">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="network">
   <entry keyword="netmgr_remote_nd()">
    <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
   </entry>
   <entry keyword="netmgr_strtond()">
    <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
   </entry>
  </entry>
  <entry keyword="open()">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
   <topic href="s1_resmgr.html#id21" title="Client summary"/>
   <topic href="s3_qnx2nto.html#id29" title="Client/Server using an I/O manager"/>
   <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
   <topic href="s1_resmgr.html#id28" title="Connect messages"/>
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   <topic href="s3_glossary.html" title="Glossary"/>
   <topic href="s1_resmgr.html#id17" title="Handling directories"/>
   <topic href="s1_resmgr.html#id30" title="I/O messages"/>
   <topic href="s1_msg.html#id82" title="Impact on ConnectAttach()"/>
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <topic href="s3_qnx2nto.html#pp-mp" title="Message passing considerations"/>
   <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
   <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
   <topic href="s1_resmgr.html#id19" title="Union'd filesystems"/>
   <entry keyword="implementation">
    <topic href="s1_resmgr.html#id13" title="Finding the server"/>
   </entry>
  </entry>
  <entry keyword="out*()">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
  </entry>
  <entry keyword="POSIX">
   <entry keyword="mq_open()">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="mq_receive()">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
  </entry>
  <entry keyword="POSIX threads">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="pread()">
   <topic href="s1_resmgr.html#id125" title="Step 2"/>
  </entry>
  <entry keyword="printf()">
   <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
  </entry>
  <entry keyword="process">
   <entry keyword="exec()">
    <topic href="s1_procs.html#id69" title="So what should you use?"/>
    <topic href="s1_procs.html#id65" title="Starting a process with the vfork() call"/>
   </entry>
   <entry keyword="exec() family">
    <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="execl()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="execle()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="execlp()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="execlpe()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="execv()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="execve()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="execvp()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="execvpe()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="getppid()">
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   </entry>
   <entry keyword="spawn()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
    <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
   </entry>
   <entry keyword="spawn() family">
    <topic href="s1_procs.html#id69" title="So what should you use?"/>
    <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="spawnl()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="spawnle()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="spawnlp()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="spawnlpe()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="spawnp()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="spawnv()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="spawnve()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="spawnvp()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="spawnvpe()">
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
  </entry>
  <entry keyword="process creation">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
   <topic href="s1_procs.html#id59" title="Starting a process with the system() call"/>
  </entry>
  <entry keyword="process transformation">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
  <entry keyword="pthread_mutex_timedlock()">
   <topic href="s1_timer.html#id60" title="CLOCK_MONOTONIC"/>
  </entry>
  <entry keyword="pulse">
   <entry keyword="MsgReceive()">
    <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
   </entry>
   <entry keyword="MsgReceivePulse()">
    <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
   </entry>
  </entry>
  <entry keyword="pulse_attach()">
   <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
  </entry>
  <entry keyword="pulses">
   <entry keyword="pulse_attach()">
    <topic href="s1_resmgr.html#id38" title="The base layer"/>
   </entry>
   <entry keyword="pulse_detach()">
    <topic href="s1_resmgr.html#id38" title="The base layer"/>
   </entry>
  </entry>
  <entry keyword="QNX 4">
   <entry keyword="Creceive()">
    <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
    <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
   </entry>
   <entry keyword="qnx_name_attach()">
    <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
   </entry>
   <entry keyword="qnx_name_locate()">
    <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
   </entry>
   <entry keyword="qnx_proxy_attach()">
    <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
   </entry>
   <entry keyword="Receive()">
    <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
    <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
   </entry>
   <entry keyword="Reply()">
    <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
   </entry>
   <entry keyword="Send()">
    <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
    <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
   </entry>
   <entry keyword="tfork()">
    <topic href="s3_qnx2nto.html#id10" title="Thread support"/>
   </entry>
   <entry keyword="Trigger()">
    <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
   </entry>
  </entry>
  <entry keyword="read()">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
   <topic href="s1_resmgr.html#id21" title="Client summary"/>
   <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
   <topic href="s1_resmgr.html#id28" title="Connect messages"/>
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   <topic href="s3_glossary.html" title="Glossary"/>
   <topic href="s1_resmgr.html#id30" title="I/O messages"/>
   <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
   <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
   <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
   <topic href="s3_qnx2nto.html#id26" title="Translating messages to standard file-descriptor-based POSIX calls"/>
  </entry>
  <entry keyword="rename()">
   <topic href="s1_resmgr.html#id28" title="Connect messages"/>
  </entry>
  <entry keyword="Reply()">
   <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
  </entry>
  <entry keyword="resmgr_attach()">
   <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
  </entry>
  <entry keyword="resource manager">
   <entry keyword="_DEVCTL_DATA()">
    <topic href="s1_resmgr.html#id168" title="Step 1"/>
   </entry>
   <entry keyword="dispatch_block()">
    <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
   </entry>
   <entry keyword="dispatch_context_alloc()">
    <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
   </entry>
   <entry keyword="dispatch_create()">
    <topic href="s1_resmgr.html#skeleton" title="The basic skeleton of a resource manager"/>
   </entry>
   <entry keyword="dispatch_handler()">
    <topic href="s1_resmgr.html#id36" title="Behind the scenes at the library"/>
    <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
   </entry>
   <entry keyword="io_chmod()">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
   </entry>
   <entry keyword="io_chown()">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="io_close()">
    <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
   </entry>
   <entry keyword="io_close_dup()">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
   </entry>
   <entry keyword="io_close_ocb()">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
   </entry>
   <entry keyword="io_devctl()">
    <topic href="s1_resmgr.html#devctl_simple" title="A simple io_devctl() example"/>
    <topic href="s1_resmgr.html#devctl_simple2" title="An io_devctl() example that deals with data"/>
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
    <topic href="s1_resmgr.html#id159" title="Step 1"/>
    <topic href="s1_resmgr.html#id168" title="Step 1"/>
    <topic href="s1_resmgr.html#id161" title="Step 2"/>
   </entry>
   <entry keyword="io_dup()">
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
   </entry>
   <entry keyword="io_fdinfo()">
    <topic href="s1_resmgr.html#io_fdinfo" title="io_fdinfo()"/>
   </entry>
   <entry keyword="io_link()">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
   </entry>
   <entry keyword="io_lock()">
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
   </entry>
   <entry keyword="io_lock_ocb()">
    <topic href="s1_resmgr.html#io_lock_ocb" title="io_lock_ocb()"/>
    <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
   </entry>
   <entry keyword="io_lseek()">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
    <topic href="s1_resmgr.html#id193" title="Offsets"/>
   </entry>
   <entry keyword="io_mknod()">
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
   </entry>
   <entry keyword="io_mmap()">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="io_mount()">
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
   </entry>
   <entry keyword="io_msg()">
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
   </entry>
   <entry keyword="io_notify()">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="io_open()">
    <topic href="s1_resmgr.html#alphalist" title="Alphabetical listing of connect and I/O functions"/>
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
    <topic href="s1_resmgr.html#id182" title="OCB monitor"/>
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
    <topic href="s1_resmgr.html#general_flow" title="The general flow of a resource manager"/>
    <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
   </entry>
   <entry keyword="io_open_default()">
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
   </entry>
   <entry keyword="io_openfd()">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="io_pathconf()">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="io_power()">
    <topic href="s1_resmgr.html#io_power" title="io_power()"/>
   </entry>
   <entry keyword="io_read()">
    <topic href="s1_resmgr.html#read_simple" title="A simple io_read() example"/>
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
    <topic href="s1_resmgr.html#blocking_in_resmgr" title="Blocking within the resource manager"/>
    <topic href="s1_resmgr.html#dataareasize" title="Data area size considerations"/>
    <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
    <topic href="s1_resmgr.html#id189" title="Generally speaking …"/>
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#id193" title="Offsets"/>
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
    <topic href="s1_resmgr.html#returning_dirents" title="Returning directory entries"/>
    <topic href="s1_resmgr.html#id165" title="Step 4"/>
    <topic href="s1_resmgr.html#id131" title="Step 6"/>
    <topic href="s1_resmgr.html#id154" title="Step 7"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
   <entry keyword="io_readlink()">
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
   </entry>
   <entry keyword="io_rename()">
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
   </entry>
   <entry keyword="_IO_SET_WRITE_NBYTES()">
    <topic href="s1_resmgr.html#id152" title="Step 6"/>
    <topic href="s1_resmgr.html#id156" title="Step 8"/>
   </entry>
   <entry keyword="io_shutdown()">
    <topic href="s1_resmgr.html#io_shutdown" title="io_shutdown()"/>
   </entry>
   <entry keyword="io_space()">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="io_stat()">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
    <topic href="s1_resmgr.html#id131" title="Step 6"/>
   </entry>
   <entry keyword="io_sync()">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="io_unblock()">
    <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
    <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
   <entry keyword="io_unlink()">
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="io_unlock_ocb()">
    <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
   </entry>
   <entry keyword="io_utime()">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="io_write()">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
    <topic href="s1_resmgr.html#id178" title="Important note"/>
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
    <topic href="s1_resmgr.html#id165" title="Step 4"/>
   </entry>
   <entry keyword="iofunc_attr_init()">
    <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
   </entry>
   <entry keyword="iofunc_chmod_default()">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
   </entry>
   <entry keyword="iofunc_chown()">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="iofunc_chown_default()">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="iofunc_close_dup()">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
   </entry>
   <entry keyword="iofunc_close_dup_default()">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
   </entry>
   <entry keyword="iofunc_close_ocb_default()">
    <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
   </entry>
   <entry keyword="iofunc_devctl()">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="iofunc_devctl_default()">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#id159" title="Step 1"/>
   </entry>
   <entry keyword="iofunc_func_init()">
    <topic href="s1_resmgr.html#alphalist" title="Alphabetical listing of connect and I/O functions"/>
    <topic href="s1_resmgr.html#examples" title="Examples"/>
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
    <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
    <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
    <topic href="s1_resmgr.html#id159" title="Step 1"/>
    <topic href="s1_resmgr.html#id112" title="Step 2"/>
    <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
   </entry>
   <entry keyword="iofunc_link()">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
   </entry>
   <entry keyword="iofunc_lock_default()">
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
    <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
   </entry>
   <entry keyword="iofunc_lock_ocb_default()">
    <topic href="s1_resmgr.html#io_lock_ocb" title="io_lock_ocb()"/>
    <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
   </entry>
   <entry keyword="iofunc_lseek()">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
   </entry>
   <entry keyword="iofunc_lseek_default()">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
   </entry>
   <entry keyword="iofunc_mknod()">
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
   </entry>
   <entry keyword="iofunc_mmap()">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="iofunc_mmap_default()">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
    <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
   </entry>
   <entry keyword="iofunc_notify()">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="iofunc_notify_remove()">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="iofunc_notify_trigger()">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="iofunc_ocb_attach()">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="iofunc_ocb_calloc()">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="iofunc_open()">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="iofunc_open_default()">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
   </entry>
   <entry keyword="iofunc_openfd()">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="iofunc_openfd_default()">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="iofunc_pathconf()">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="iofunc_pathconf_default()">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="iofunc_read_default()">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
   </entry>
   <entry keyword="iofunc_read_verify()">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#id123" title="Step 1"/>
    <topic href="s1_resmgr.html#id125" title="Step 2"/>
   </entry>
   <entry keyword="iofunc_readlink()">
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
   </entry>
   <entry keyword="iofunc_rename()">
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
   </entry>
   <entry keyword="iofunc_space_verify()">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="iofunc_stat()">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
   </entry>
   <entry keyword="iofunc_stat_default()">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
    <topic href="s1_resmgr.html#id131" title="Step 6"/>
   </entry>
   <entry keyword="iofunc_sync()">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="iofunc_sync_default()">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="iofunc_sync_verify()">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="iofunc_unblock()">
    <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
   <entry keyword="iofunc_unblock_default()">
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
   <entry keyword="iofunc_unlink()">
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="iofunc_unlock_ocb_default()">
    <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
    <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
   </entry>
   <entry keyword="iofunc_utime()">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="iofunc_utime_default()">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="iofunc_write_default()">
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="iofunc_write_verify()">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="resmgr_attach()">
    <topic href="s1_resmgr.html#alphalist" title="Alphabetical listing of connect and I/O functions"/>
    <topic href="s1_resmgr.html#resmgr_attr" title="resmgr_attr_t control structure"/>
    <topic href="s1_resmgr.html#structure" title="Resource manager structure"/>
    <topic href="s1_resmgr.html#id114" title="Step 3"/>
    <topic href="s1_resmgr.html#id38" title="The base layer"/>
    <topic href="s1_resmgr.html#id48" title="The flags parameter"/>
    <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
    <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
   </entry>
   <entry keyword="resmgr_bind_ocb()">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="resmgr_detach()">
    <topic href="s1_resmgr.html#id38" title="The base layer"/>
   </entry>
   <entry keyword="resmgr_msgread()">
    <topic href="s1_resmgr.html#id146" title="Step 3"/>
    <topic href="s1_resmgr.html#id38" title="The base layer"/>
   </entry>
   <entry keyword="resmgr_msgreadv()">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
    <topic href="s1_resmgr.html#id146" title="Step 3"/>
    <topic href="s1_resmgr.html#id38" title="The base layer"/>
    <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
   </entry>
   <entry keyword="resmgr_msgwrite()">
    <topic href="s1_resmgr.html#id38" title="The base layer"/>
   </entry>
   <entry keyword="resmgr_msgwritev()">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#id38" title="The base layer"/>
   </entry>
   <entry keyword="resmgr_open_bind()">
    <topic href="s1_resmgr.html#id38" title="The base layer"/>
    <topic href="s1_resmgr.html#general_flow" title="The general flow of a resource manager"/>
   </entry>
  </entry>
  <entry keyword="rsrcdbmgr_devno_attach()">
   <topic href="s1_resmgr.html#dev_inode_rdev" title="Of device numbers, inodes, and our friend rdev"/>
  </entry>
  <entry keyword="scheduling">
   <entry keyword="ClockPeriod()">
    <topic href="s1_procs.html#id37" title="Round Robin"/>
   </entry>
   <entry keyword="sched_get_priority_max()">
    <topic href="s1_procs.html#id31" title="Prioritization"/>
   </entry>
   <entry keyword="sched_get_priority_min()">
    <topic href="s1_procs.html#id31" title="Prioritization"/>
   </entry>
   <entry keyword="sched_rr_get_interval()">
    <topic href="s1_procs.html#id37" title="Round Robin"/>
   </entry>
   <entry keyword="sched_yield()">
    <topic href="s1_procs.html#id35" title="FIFO"/>
   </entry>
   <entry keyword="SchedYield()">
    <topic href="s1_procs.html#id35" title="FIFO"/>
   </entry>
  </entry>
  <entry keyword="setuid()">
   <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
  </entry>
  <entry keyword="setupPulseAndTimer()">
   <topic href="s1_timer.html#main" title="main()"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="signal">
   <entry keyword="SIGEV_INTR_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="sigev_notify_function()">
    <topic href="s1_timer.html#sigev_thread" title="Thread notification"/>
   </entry>
   <entry keyword="SIGEV_PULSE_INIT()">
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   </entry>
   <entry keyword="SIGEV_PULSE_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_CODE_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_THREAD_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_THREAD_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_UNBLOCK_INIT() (macro)">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="sigwait()">
    <topic href="s1_timer.html#id27" title="Signal notification"/>
   </entry>
  </entry>
  <entry keyword="sleep()">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
   <topic href="s1_timer.html#otherclock" title="Other clock sources"/>
   <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
   <entry keyword="bad implementation">
    <topic href="s1_timer.html#id4" title="Operating periodically"/>
   </entry>
  </entry>
  <entry keyword="stat()">
   <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
   <topic href="s1_resmgr.html#the_resource_manager_library" title="The resource manager library"/>
  </entry>
  <entry keyword="strcmp()">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
  </entry>
  <entry keyword="strdup()">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
  </entry>
  <entry keyword="strftime()">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="synchronization">
   <entry keyword="pthread_barrier_init()">
    <topic href="s1_procs.html#barriers" title="Using a barrier"/>
   </entry>
   <entry keyword="pthread_barrier_wait()">
    <topic href="s3_glossary.html" title="Glossary"/>
    <topic href="s1_procs.html#sync2term" title="Synchronizing to the termination of a thread"/>
    <topic href="s1_procs.html#barriers" title="Using a barrier"/>
   </entry>
   <entry keyword="sem_post()">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
   <entry keyword="sem_wait()">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="sysconf()">
   <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
  </entry>
  <entry keyword="system()">
   <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
   <topic href="s1_procs.html#id59" title="Starting a process with the system() call"/>
  </entry>
  <entry keyword="tfork() (QNX 4)">
   <topic href="s3_qnx2nto.html#id10" title="Thread support"/>
  </entry>
  <entry keyword="thread">
   <entry keyword="pthread_atfork()">
    <topic href="s1_procs.html#id69" title="So what should you use?"/>
   </entry>
   <entry keyword="pthread_attr_destroy()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
    <topic href="s1_procs.html#id74" title="Thread attribute administration"/>
   </entry>
   <entry keyword="pthread_attr_getdetachstate()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_getguardsize()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_getinheritsched()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_getschedparam()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_getschedpolicy()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_getscope()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_getstackaddr()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_getstacklazy()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_getstacksize()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_init()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
    <topic href="s1_procs.html#id74" title="Thread attribute administration"/>
   </entry>
   <entry keyword="pthread_attr_set() family">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_setdetachstate()">
    <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_setguardsize()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_setinheritsched()">
    <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
    <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_setschedparam()">
    <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
    <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_setschedpolicy()">
    <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
    <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_setscope()">
    <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_setstackaddr()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_setstacklazy()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_attr_setstacksize()">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="pthread_cancel()">
    <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
    <topic href="s1_msg.html#id60" title="What about the other versions?"/>
   </entry>
   <entry keyword="pthread_cond_broadcast()">
    <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
   </entry>
   <entry keyword="pthread_cond_signal()">
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
    <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
   </entry>
   <entry keyword="pthread_cond_wait()">
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
    <topic href="s1_procs.html#id109" title="Sleepons versus condvars"/>
   </entry>
   <entry keyword="pthread_create()">
    <topic href="s1_procs.html#id82" title="A few examples"/>
    <topic href="s1_procs.html#id88" title="Joining"/>
    <topic href="s1_procs.html#id67" title="Process creation and threads"/>
    <topic href="s1_procs.html#id71" title="Starting a thread"/>
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
    <topic href="s3_qnx2nto.html#id10" title="Thread support"/>
   </entry>
   <entry keyword="pthread_join()">
    <topic href="s1_procs.html#id88" title="Joining"/>
    <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
    <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
    <topic href="s1_procs.html#sync2term" title="Synchronizing to the termination of a thread"/>
    <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
    <topic href="s1_procs.html#barriers" title="Using a barrier"/>
   </entry>
   <entry keyword="pthread_join() example">
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   </entry>
   <entry keyword="pthread_mutex_lock()">
    <topic href="s1_procs.html#ntoext" title="Additional Neutrino services"/>
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
    <topic href="s3_qnx2nto.html#id10" title="Thread support"/>
   </entry>
   <entry keyword="pthread_mutex_unlock()">
    <topic href="s1_procs.html#ntoext" title="Additional Neutrino services"/>
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
   </entry>
   <entry keyword="pthread_rwlock_destroy()">
    <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
   </entry>
   <entry keyword="pthread_rwlock_init()">
    <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
   </entry>
   <entry keyword="pthread_rwlock_rdlock()">
    <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
   </entry>
   <entry keyword="pthread_rwlock_tryrdlock()">
    <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
   </entry>
   <entry keyword="pthread_rwlock_unlock()">
    <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
   </entry>
   <entry keyword="pthread_rwlock_wrlock()">
    <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
   </entry>
   <entry keyword="pthread_rwlockattr_destroy()">
    <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
   </entry>
   <entry keyword="pthread_rwlockattr_getpshared()">
    <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
   </entry>
   <entry keyword="pthread_rwlockattr_init()">
    <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
   </entry>
   <entry keyword="pthread_rwlockattr_setpshared()">
    <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
   </entry>
   <entry keyword="pthread_setschedparam()">
    <topic href="s1_procs.html#id15" title="Priorities"/>
    <topic href="s1_msg.html#id92" title="So what's the trick?"/>
   </entry>
   <entry keyword="pthread_setschedprio()">
    <topic href="s1_procs.html#id15" title="Priorities"/>
    <topic href="s1_msg.html#id92" title="So what's the trick?"/>
   </entry>
   <entry keyword="pthread_sleepon_broadcast()">
    <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
    <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
   </entry>
   <entry keyword="pthread_sleepon_lock()">
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
    <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
   </entry>
   <entry keyword="pthread_sleepon_signal()">
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
    <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
    <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
   </entry>
   <entry keyword="pthread_sleepon_unlock()">
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
    <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
   </entry>
   <entry keyword="pthread_sleepon_wait()">
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
    <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
   </entry>
   <entry keyword="thread_pool() family">
    <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
   </entry>
   <entry keyword="thread_pool_control()">
    <topic href="s1_procs.html#tpool" title="Pools of threads"/>
   </entry>
   <entry keyword="thread_pool_create()">
    <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
    <topic href="s1_procs.html#tpool" title="Pools of threads"/>
   </entry>
   <entry keyword="thread_pool_destroy()">
    <topic href="s1_procs.html#tpool" title="Pools of threads"/>
   </entry>
   <entry keyword="thread_pool_limits()">
    <topic href="s1_procs.html#tpool" title="Pools of threads"/>
   </entry>
   <entry keyword="thread_pool_start()">
    <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
    <topic href="s1_procs.html#tpool" title="Pools of threads"/>
   </entry>
   <entry keyword="ThreadCtl()">
    <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
   </entry>
  </entry>
  <entry keyword="time">
   <entry keyword="asctime()">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
   <entry keyword="clock_getres()">
    <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
   </entry>
   <entry keyword="clock_gettime()">
    <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
   </entry>
   <entry keyword="clock_settime()">
    <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
   </entry>
   <entry keyword="ClockAdjust()">
    <topic href="s1_timer.html#id52" title="Getting and setting"/>
    <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
   </entry>
   <entry keyword="ClockCycles()">
    <topic href="s1_timer.html#id56" title="An accurate timestamp"/>
    <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
   </entry>
   <entry keyword="ClockPeriod()">
    <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
   </entry>
   <entry keyword="ClockTime()">
    <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
   </entry>
   <entry keyword="ctime()">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
   <entry keyword="mktime()">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
   <entry keyword="strftime()">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
   <entry keyword="time()">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
   <entry keyword="timer_create()">
    <topic href="s1_timer.html#id30" title="Creating a timer"/>
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
    <topic href="s1_timer.html#id32" title="Signal, pulse, or thread?"/>
    <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
   <entry keyword="timer_create() example">
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   </entry>
   <entry keyword="timer_settime()">
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
   <entry keyword="timer_settime() example">
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   </entry>
  </entry>
  <entry keyword="timer">
   <entry keyword="ClockCycles()">
    <topic href="s1_timer.html#id56" title="An accurate timestamp"/>
   </entry>
   <entry keyword="ClockPeriod()">
    <topic href="s1_timer.html#id52" title="Getting and setting"/>
   </entry>
   <entry keyword="delay()">
    <topic href="s1_timer.html#id7" title="Base timing resolution"/>
    <topic href="s1_timer.html#id11" title="Timing jitter"/>
   </entry>
   <entry keyword="timer_create()">
    <topic href="s1_timer.html#id30" title="Creating a timer"/>
   </entry>
   <entry keyword="timer_settime()">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
   <entry keyword="TimerTimeout()">
    <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
    <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
    <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
    <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
   </entry>
   <entry keyword="TimerTimeout() example">
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   </entry>
  </entry>
  <entry keyword="timer_create()">
   <topic href="s1_timer.html#id60" title="CLOCK_MONOTONIC"/>
  </entry>
  <entry keyword="timing">
   <entry keyword="nanospin()">
    <topic href="s1_timer.html#id4" title="Operating periodically"/>
   </entry>
   <entry keyword="sleep()">
    <topic href="s1_timer.html#id4" title="Operating periodically"/>
   </entry>
  </entry>
  <entry keyword="unblock_func()">
   <topic href="s1_procs.html#id114" title="The thread pool functions"/>
  </entry>
  <entry keyword="vfork()">
   <topic href="s1_procs.html#id69" title="So what should you use?"/>
   <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
   <topic href="s1_procs.html#id65" title="Starting a process with the vfork() call"/>
   <topic href="s1_procs.html#id123" title="Summary"/>
  </entry>
  <entry keyword="waitpid()">
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  </entry>
  <entry keyword="write()">
   <topic href="s3_qnx2nto.html#id29" title="Client/Server using an I/O manager"/>
   <topic href="s3_glossary.html" title="Glossary"/>
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
   <topic href="s3_qnx2nto.html#id26" title="Translating messages to standard file-descriptor-based POSIX calls"/>
  </entry>
 </entry>
 <entry keyword="gather/scatter">
 </entry>
 <entry keyword="getppid()">
  <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
 </entry>
 <entry keyword="getting help">
  <topic href="s3_help.html#id23" title="Contact technical support"/>
  <topic href="s3_help.html#id3" title="Seeking professional help"/>
  <entry keyword="beta versions">
   <topic href="s3_help.html#id31" title="If you're using a beta…"/>
   <entry keyword="updates">
    <topic href="s3_help.html#id31" title="If you're using a beta…"/>
   </entry>
  </entry>
  <entry keyword="contacting technical support">
   <topic href="s3_help.html#id23" title="Contact technical support"/>
  </entry>
  <entry keyword="describing the problem">
   <topic href="s3_help.html#id25" title="Describe the problem"/>
   <topic href="s3_help.html#id29" title="Versions"/>
   <entry keyword="be precise">
    <topic href="s3_help.html#id27" title="Precise information"/>
   </entry>
  </entry>
  <entry keyword="narrow it down">
   <topic href="s3_help.html#id35" title="Narrow it down"/>
  </entry>
  <entry keyword="reproduce the problem">
   <topic href="s3_help.html#id33" title="Reproduce the problem"/>
  </entry>
  <entry keyword="RTFM">
   <topic href="s3_help.html#id7" title="RTFM"/>
  </entry>
  <entry keyword="training">
   <topic href="s3_help.html#id37" title="Training"/>
  </entry>
 </entry>
 <entry keyword="getting the time">
  <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
 </entry>
 <entry keyword="gotAMessage()">
  <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
  <topic href="s1_timer.html#main" title="main()"/>
 </entry>
 <entry keyword="gotAPulse()">
  <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
  <topic href="s1_timer.html#main" title="main()"/>
 </entry>
 <entry keyword="grep">
  <topic href="s3_help.html#id19" title="Utilities Reference"/>
 </entry>
 <entry keyword="gunzip">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="gzip">
  <topic href="s3_help.html#id35" title="Narrow it down"/>
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="handler routines">
 </entry>
 <entry keyword="handler_func()">
  <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  <topic href="s1_procs.html#id114" title="The thread pool functions"/>
 </entry>
 <entry keyword="hardware">
  <entry keyword="82C54 component">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
  <entry keyword="and polling using timers">
   <topic href="s1_timer.html#id45" title="Periodic server maintenance cycles"/>
  </entry>
  <entry keyword="asynchronous nature of timers">
   <topic href="s1_timer.html#id11" title="Timing jitter"/>
  </entry>
  <entry keyword="changing timer rate">
   <topic href="s1_timer.html#id9" title="Getting more precision"/>
  </entry>
  <entry keyword="clock tick and timers">
   <topic href="s1_timer.html#id70" title="Summary"/>
  </entry>
  <entry keyword="divider, used with timers">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
  <entry keyword="impact of integer divisor on timer">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
  <entry keyword="inactivity shutdown">
   <topic href="s1_timer.html#id45" title="Periodic server maintenance cycles"/>
  </entry>
  <entry keyword="used with timers">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
  <entry keyword="warm-up timer">
   <topic href="s1_timer.html#id45" title="Periodic server maintenance cycles"/>
  </entry>
 </entry>
 <entry keyword="high accuracy counter">
  <topic href="s1_timer.html#id56" title="An accurate timestamp"/>
 </entry>
 <entry keyword="high frequency interrupts">
  <topic href="s1_inter.html#id33" title="The trade-offs"/>
 </entry>
 <entry keyword="I/O Vector">
 </entry>
 <entry keyword="IBM PC">
  <topic href="preface.html" title="Preface to the First Edition by Rob Krten"/>
 </entry>
 <entry keyword="in*()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
 </entry>
 <entry keyword="in8()">
  <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
 </entry>
 <entry keyword="inactivity shutdown">
  <topic href="s1_timer.html#id45" title="Periodic server maintenance cycles"/>
 </entry>
 <entry keyword="initializing">
  <entry keyword="struct sigevent">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   <entry keyword="shortcut">
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   </entry>
  </entry>
 </entry>
 <entry keyword="interrupt">
  <entry keyword="10 millisecond">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="8259 chip">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="analogy">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  </entry>
  <entry keyword="associated thread">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
  </entry>
  <entry keyword="associating with thread or process">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="attaching handler">
   <topic href="s1_inter.html#id13" title="Attaching an interrupt handler"/>
   <topic href="s1_inter.html#id17" title="Attaching with InterruptAttach()"/>
  </entry>
  <entry keyword="BSP specific">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  </entry>
  <entry keyword="causes">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  </entry>
  <entry keyword="chained">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  </entry>
  <entry keyword="chaining">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
   <topic href="s1_inter.html#id33" title="The trade-offs"/>
  </entry>
  <entry keyword="clearing">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="clock">
   <entry keyword="diagram">
    <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
   </entry>
  </entry>
  <entry keyword="complex">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="context switches">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
  <entry keyword="defined">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  </entry>
  <entry keyword="detach on death of thread or process">
   <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
  </entry>
  <entry keyword="disabling">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   <entry keyword="cli">
    <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   </entry>
  </entry>
  <entry keyword="doing nothing in the ISR">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  </entry>
  <entry keyword="doing the work in a thread">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="edge-sensitive">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   <entry keyword="and cleanup">
    <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
   </entry>
   <entry keyword="diagram">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
   <entry keyword="problems">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
  </entry>
  <entry keyword="enabling">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   <entry keyword="sti">
    <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   </entry>
  </entry>
  <entry keyword="end of interrupt (EOI)">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  </entry>
  <entry keyword="environment">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
  </entry>
  <entry keyword="EOI">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  </entry>
  <entry keyword="ethernet device">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  </entry>
  <entry keyword="events">
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
  </entry>
  <entry keyword="exit()">
   <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
  </entry>
  <entry keyword="filtering out unnecessary">
   <topic href="s1_inter.html#id33" title="The trade-offs"/>
  </entry>
  <entry keyword="floppy disk controller">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  </entry>
  <entry keyword="functions">
   <entry keyword="InterruptAttach() diagram">
    <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
   </entry>
   <entry keyword="InterruptAttachEvent() diagram">
    <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
   </entry>
   <entry keyword="InterruptAttachEvent() example">
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
   <entry keyword="InterruptWait() example">
    <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   </entry>
  </entry>
  <entry keyword="handlers">
   <entry keyword="detaching">
    <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
   </entry>
   <entry keyword="detaching the last handler">
    <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
   </entry>
   <entry keyword="events">
    <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
   </entry>
   <entry keyword="example">
    <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
    <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
   </entry>
   <entry keyword="goals">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="safe functions">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="volatile">
    <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
   </entry>
  </entry>
  <entry keyword="handling">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  </entry>
  <entry keyword="hardware">
   <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
  </entry>
  <entry keyword="hardware acknowledgment">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="high frequency">
   <topic href="s1_inter.html#id33" title="The trade-offs"/>
  </entry>
  <entry keyword="ignoring">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="impact on scheduling">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="informing the kernel">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  </entry>
  <entry keyword="interrupt identifier">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="InterruptAttach()">
   <topic href="s1_inter.html#id13" title="Attaching an interrupt handler"/>
  </entry>
  <entry keyword="InterruptAttachEvent()">
   <topic href="s1_inter.html#id13" title="Attaching an interrupt handler"/>
  </entry>
  <entry keyword="InterruptAttachEvent() versus InterruptAttach()">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="InterruptDetach()">
   <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
  </entry>
  <entry keyword="ISRs">
   <topic href="s1_inter.html#id4" title="Interrupt service routine"/>
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   <entry keyword="detaching">
    <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
   </entry>
   <entry keyword="detaching the last handler">
    <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
   </entry>
   <entry keyword="events">
    <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
   </entry>
   <entry keyword="example">
    <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
    <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
   </entry>
   <entry keyword="floating-point operations aren&#x0027;t safe to use in">
    <topic href="s1_inter.html#id4" title="Interrupt service routine"/>
   </entry>
   <entry keyword="goals">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="pseudo-code example">
    <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
   </entry>
   <entry keyword="safe functions">
    <topic href="s1_inter.html#id35" title="ISR functions"/>
   </entry>
   <entry keyword="volatile">
    <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
   </entry>
  </entry>
  <entry keyword="kernel">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
  <entry keyword="kernel ISR for timer">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="latency">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  </entry>
  <entry keyword="level-sensitive">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   <entry keyword="and cleanup">
    <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
   </entry>
   <entry keyword="diagram">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
  </entry>
  <entry keyword="low frequency">
   <topic href="s1_inter.html#id33" title="The trade-offs"/>
  </entry>
  <entry keyword="managing">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  </entry>
  <entry keyword="masking">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="masking after detaching">
   <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
  </entry>
  <entry keyword="masking on detach of last handler">
   <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
  </entry>
  <entry keyword="minimizing latency">
   <topic href="s1_inter.html#id33" title="The trade-offs"/>
  </entry>
  <entry keyword="minimizing time spent in">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="not clearing the source">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="_NTO_INTR_FLAGS_END">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="_NTO_INTR_FLAGS_PROCESS">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="_NTO_INTR_FLAGS_TRK_MSK">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="order of processing">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  </entry>
  <entry keyword="permissions required">
   <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
  </entry>
  <entry keyword="PIC">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   <entry keyword="edge-sensitive mode">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
   <entry keyword="edge-sensitive mode diagram">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
   <entry keyword="level-sensitive mode">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
   <entry keyword="level-sensitive mode diagram">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
  </entry>
  <entry keyword="priority">
   <topic href="s1_inter.html#id4" title="Interrupt service routine"/>
  </entry>
  <entry keyword="processing">
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
  </entry>
  <entry keyword="programmable interrupt controller">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
   <entry keyword="edge-sensitive mode">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
   <entry keyword="edge-sensitive mode diagram">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
   <entry keyword="level-sensitive mode">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
   <entry keyword="level-sensitive mode diagram">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
  </entry>
  <entry keyword="pulses">
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="readying a thread">
   <topic href="s1_inter.html#id17" title="Attaching with InterruptAttach()"/>
   <topic href="s1_inter.html#id15" title="Attaching with InterruptAttachEvent()"/>
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
  <entry keyword="realtime">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  </entry>
  <entry keyword="realtime clock">
   <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
  </entry>
  <entry keyword="relationship to thread">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="responsibilities">
   <topic href="s1_inter.html#id4" title="Interrupt service routine"/>
  </entry>
  <entry keyword="returning struct sigevent">
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
  <entry keyword="role of ISR">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="scheduling">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
   <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
   <topic href="s1_procs.html#sched_real_world" title="Scheduling and the real world"/>
  </entry>
  <entry keyword="SCSI device">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  </entry>
  <entry keyword="serial handler">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="servers">
   <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
  </entry>
  <entry keyword="sharing">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
   <entry keyword="diagram">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
   <entry keyword="problem">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
   <entry keyword="problems">
    <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
   </entry>
  </entry>
  <entry keyword="SIGEV_INTR">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_inter.html#id33" title="The trade-offs"/>
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="SIGEV_SIGNAL">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="SIGEV_THREAD">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="signals">
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
  </entry>
  <entry keyword="SMP">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
   <topic href="s1_procs.html#smpbeware" title="Things to watch out for when using SMP"/>
  </entry>
  <entry keyword="source">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="specifying order">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="spending a long time in ISR">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="startup code">
   <topic href="s1_inter.html#id13" title="Attaching an interrupt handler"/>
  </entry>
  <entry keyword="struct sigevent">
   <topic href="s1_inter.html#id17" title="Attaching with InterruptAttach()"/>
   <topic href="s1_inter.html#id15" title="Attaching with InterruptAttachEvent()"/>
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="tail-end polling">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="thread interaction">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
  </entry>
  <entry keyword="thread-level interactions">
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
  <entry keyword="threads">
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
  </entry>
  <entry keyword="timing">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="tracking mask/unmasks">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="unmasking">
   <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  </entry>
  <entry keyword="unmasking when attaching">
   <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
  </entry>
  <entry keyword="unnecessary wakeups">
   <entry keyword="diagram">
    <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
   </entry>
  </entry>
  <entry keyword="used for timing">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="used with timers">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
  <entry keyword="using InterruptWait()">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="volatile">
   <topic href="s1_inter.html#Summary" title="Summary"/>
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
  <entry keyword="waiting in thread">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="waking up only when required">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
  <entry keyword="waking up unnecessarily">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
  <entry keyword="writing">
   <topic href="s1_inter.html#Writing_handlers" title="Writing interrupt handlers"/>
  </entry>
 </entry>
 <entry keyword="interrupt service routine">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="See also Interrupts"/>
 </entry>
 <entry keyword="Interrupt() family">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
 </entry>
 <entry keyword="InterruptAttach()">
  <topic href="s1_inter.html#id13" title="Attaching an interrupt handler"/>
  <topic href="s1_inter.html#id17" title="Attaching with InterruptAttach()"/>
  <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
  <topic href="s1_inter.html#Summary" title="Summary"/>
  <topic href="s1_inter.html#id23" title="The flags parameter"/>
  <topic href="s1_inter.html#id25" title="The interrupt service routine"/>
  <topic href="s1_inter.html#id33" title="The trade-offs"/>
  <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  <entry keyword="diagram">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
  <entry keyword="flags parameter">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
 </entry>
 <entry keyword="InterruptAttachEvent()">
  <topic href="s1_inter.html#id13" title="Attaching an interrupt handler"/>
  <topic href="s1_inter.html#id17" title="Attaching with InterruptAttach()"/>
  <topic href="s1_inter.html#id15" title="Attaching with InterruptAttachEvent()"/>
  <topic href="s3_qnx2nto.html#pp-isr" title="Interrupt service routines"/>
  <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  <topic href="s1_inter.html#id35" title="ISR functions"/>
  <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
  <topic href="s1_inter.html#Summary" title="Summary"/>
  <topic href="s1_inter.html#id23" title="The flags parameter"/>
  <topic href="s1_inter.html#id25" title="The interrupt service routine"/>
  <topic href="s1_inter.html#id33" title="The trade-offs"/>
  <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  <entry keyword="diagram">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="flags parameter">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="pseudo-code">
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  </entry>
  <entry keyword="returning interrupt identifier">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
 </entry>
 <entry keyword="InterruptAttachEvent() versus InterruptAttach()">
  <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
 </entry>
 <entry keyword="InterruptDetach()">
  <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
  <entry keyword="example">
   <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
  </entry>
 </entry>
 <entry keyword="InterruptDisable()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
  <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
 </entry>
 <entry keyword="InterruptEnable()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
  <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
 </entry>
 <entry keyword="InterruptLock()">
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_inter.html#id35" title="ISR functions"/>
  <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  <topic href="s1_inter.html#Summary" title="Summary"/>
 </entry>
 <entry keyword="InterruptMask()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
 </entry>
 <entry keyword="InterruptUnlock()">
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_inter.html#id35" title="ISR functions"/>
  <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  <topic href="s1_inter.html#Summary" title="Summary"/>
 </entry>
 <entry keyword="InterruptUnmask()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
 </entry>
 <entry keyword="InterruptWait()">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  <topic href="s1_inter.html#id33" title="The trade-offs"/>
  <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  <entry keyword="and SIGEV_INTR">
   <topic href="s1_inter.html#id33" title="The trade-offs"/>
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
 </entry>
 <entry keyword="_IO_CHMOD">
  <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
 </entry>
 <entry keyword="io_chmod()">
  <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
 </entry>
 <entry keyword="io_chmod_t">
  <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
  <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
 </entry>
 <entry keyword="_IO_CHOWN">
  <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
 </entry>
 <entry keyword="io_chown()">
  <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
 </entry>
 <entry keyword="io_close()">
  <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
 </entry>
 <entry keyword="_IO_CLOSE_DUP">
  <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
  <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
 </entry>
 <entry keyword="io_close_dup()">
  <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
  <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
 </entry>
 <entry keyword="io_close_ocb()">
  <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
  <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
 </entry>
 <entry keyword="io_close_t">
  <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
  <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
 </entry>
 <entry keyword="_IO_CONNECT">
  <topic href="s3_qnx2nto.html#id29" title="Client/Server using an I/O manager"/>
  <topic href="s1_resmgr.html#io_link" title="io_link()"/>
  <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
  <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
  <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
  <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
  <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
  <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
 </entry>
 <entry keyword="_IO_CONNECT_COMBINE">
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
 </entry>
 <entry keyword="_IO_CONNECT_COMBINE_CLOSE">
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
  <topic href="s1_resmgr.html#should_be_connect" title="Messages that  be connect messages but aren't"/>
 </entry>
 <entry keyword="_IO_CONNECT_LINK">
  <topic href="s1_resmgr.html#io_link" title="io_link()"/>
 </entry>
 <entry keyword="_IO_CONNECT_MKNOD">
  <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
 </entry>
 <entry keyword="_IO_CONNECT_MOUNT">
  <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
 </entry>
 <entry keyword="_IO_CONNECT_OPEN">
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
 </entry>
 <entry keyword="_IO_CONNECT_READLINK">
  <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
 </entry>
 <entry keyword="_IO_CONNECT_RENAME">
  <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
 </entry>
 <entry keyword="_IO_CONNECT_UNLINK">
  <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
 </entry>
 <entry keyword="_IO_DEVCTL">
  <topic href="s1_resmgr.html#devctl_simple" title="A simple io_devctl() example"/>
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
  <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
 </entry>
 <entry keyword="io_devctl()">
  <topic href="s1_resmgr.html#devctl_simple" title="A simple io_devctl() example"/>
  <topic href="s1_resmgr.html#devctl_simple2" title="An io_devctl() example that deals with data"/>
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
  <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
  <topic href="s1_resmgr.html#id159" title="Step 1"/>
  <topic href="s1_resmgr.html#id168" title="Step 1"/>
  <topic href="s1_resmgr.html#id161" title="Step 2"/>
 </entry>
 <entry keyword="io_devctl_t">
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
 </entry>
 <entry keyword="_IO_DUP">
  <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
 </entry>
 <entry keyword="io_dup()">
  <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
 </entry>
 <entry keyword="io_dup_t">
  <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
 </entry>
 <entry keyword="_IO_FDINFO">
  <topic href="s1_resmgr.html#io_fdinfo" title="io_fdinfo()"/>
 </entry>
 <entry keyword="io_fdinfo()">
  <topic href="s1_resmgr.html#io_fdinfo" title="io_fdinfo()"/>
 </entry>
 <entry keyword="_IO_FLAG_RD">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="_IO_FLAG_WR">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="io_link()">
  <topic href="s1_resmgr.html#io_link" title="io_link()"/>
 </entry>
 <entry keyword="io_link_extra_t">
  <topic href="s1_resmgr.html#io_link" title="io_link()"/>
 </entry>
 <entry keyword="io_link_t">
  <topic href="s1_resmgr.html#io_link" title="io_link()"/>
 </entry>
 <entry keyword="io_lock()">
  <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
 </entry>
 <entry keyword="io_lock_ocb()">
  <topic href="s1_resmgr.html#io_lock_ocb" title="io_lock_ocb()"/>
  <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
 </entry>
 <entry keyword="io_lock_t">
  <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
 </entry>
 <entry keyword="_IO_LSEEK">
  <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
  <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
 </entry>
 <entry keyword="io_lseek()">
  <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
  <topic href="s1_resmgr.html#id193" title="Offsets"/>
 </entry>
 <entry keyword="io_lseek_t">
  <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
 </entry>
 <entry keyword="io_mknod()">
  <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
 </entry>
 <entry keyword="io_mknod_t">
  <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
 </entry>
 <entry keyword="_IO_MMAP">
  <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
 </entry>
 <entry keyword="io_mmap()">
  <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
 </entry>
 <entry keyword="io_mmap_t">
  <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
  <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
 </entry>
 <entry keyword="io_mount()">
  <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
 </entry>
 <entry keyword="io_mount_t">
  <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
 </entry>
 <entry keyword="_IO_MSG">
  <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
  <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
  <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
  <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
 </entry>
 <entry keyword="io_msg()">
  <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
 </entry>
 <entry keyword="io_msg_t">
  <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
 </entry>
 <entry keyword="_IO_NOTIFY">
  <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
 </entry>
 <entry keyword="io_notify()">
  <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
 </entry>
 <entry keyword="io_open()">
  <topic href="s1_resmgr.html#alphalist" title="Alphabetical listing of connect and I/O functions"/>
  <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
  <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
  <topic href="s1_resmgr.html#id182" title="OCB monitor"/>
  <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
  <topic href="s1_resmgr.html#general_flow" title="The general flow of a resource manager"/>
  <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
 </entry>
 <entry keyword="io_open_default()">
  <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
 </entry>
 <entry keyword="io_open_t">
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
  <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
 </entry>
 <entry keyword="_IO_OPENFD">
  <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
 </entry>
 <entry keyword="io_openfd()">
  <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
 </entry>
 <entry keyword="io_openfd_t">
  <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
 </entry>
 <entry keyword="_IO_PATHCONF">
  <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
 </entry>
 <entry keyword="io_pathconf()">
  <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
 </entry>
 <entry keyword="io_pathconf_t">
  <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
 </entry>
 <entry keyword="io_power()">
  <topic href="s1_resmgr.html#io_power" title="io_power()"/>
 </entry>
 <entry keyword="_IO_READ">
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
  <topic href="s1_resmgr.html#id112" title="Step 2"/>
  <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
 </entry>
 <entry keyword="io_read()">
  <topic href="s1_resmgr.html#read_simple" title="A simple io_read() example"/>
  <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
  <topic href="s1_resmgr.html#blocking_in_resmgr" title="Blocking within the resource manager"/>
  <topic href="s1_resmgr.html#dataareasize" title="Data area size considerations"/>
  <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
  <topic href="s1_resmgr.html#id189" title="Generally speaking …"/>
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
  <topic href="s1_resmgr.html#id193" title="Offsets"/>
  <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
  <topic href="s1_resmgr.html#returning_dirents" title="Returning directory entries"/>
  <topic href="s1_resmgr.html#id165" title="Step 4"/>
  <topic href="s1_resmgr.html#id131" title="Step 6"/>
  <topic href="s1_resmgr.html#id154" title="Step 7"/>
  <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
  <entry keyword="example">
   <topic href="s1_resmgr.html#read_simple" title="A simple io_read() example"/>
  </entry>
 </entry>
 <entry keyword="io_read_t">
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
 </entry>
 <entry keyword="io_readlink()">
  <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
 </entry>
 <entry keyword="io_rename()">
  <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
 </entry>
 <entry keyword="io_rename_extra_t">
  <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
 </entry>
 <entry keyword="io_rename_t">
  <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
 </entry>
 <entry keyword="_IO_SET_CONNECT_RET">
  <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
 </entry>
 <entry keyword="_IO_SET_FDINFO_LEN">
  <topic href="s1_resmgr.html#io_fdinfo" title="io_fdinfo()"/>
 </entry>
 <entry keyword="_IO_SET_PATHCONF_VALUE">
  <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
 </entry>
 <entry keyword="_IO_SET_READ_NBYTES">
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
 </entry>
 <entry keyword="_IO_SET_WRITE_NBYTES">
  <topic href="s1_resmgr.html#io_write" title="io_write()"/>
 </entry>
 <entry keyword="_IO_SET_WRITE_NBYTES()">
  <topic href="s1_resmgr.html#id152" title="Step 6"/>
  <topic href="s1_resmgr.html#id156" title="Step 8"/>
 </entry>
 <entry keyword="io_shutdown()">
  <topic href="s1_resmgr.html#io_shutdown" title="io_shutdown()"/>
 </entry>
 <entry keyword="_IO_SPACE">
  <topic href="s1_resmgr.html#io_space" title="io_space()"/>
 </entry>
 <entry keyword="io_space()">
  <topic href="s1_resmgr.html#io_space" title="io_space()"/>
 </entry>
 <entry keyword="io_space_t">
  <topic href="s1_resmgr.html#io_space" title="io_space()"/>
 </entry>
 <entry keyword="_IO_STAT">
  <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
 </entry>
 <entry keyword="io_stat()">
  <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
  <topic href="s1_resmgr.html#id131" title="Step 6"/>
 </entry>
 <entry keyword="io_stat_t">
  <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
 </entry>
 <entry keyword="_IO_SYNC">
  <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
 </entry>
 <entry keyword="io_sync()">
  <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
 </entry>
 <entry keyword="io_sync_t">
  <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
 </entry>
 <entry keyword="io_unblock()">
  <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
  <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
  <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
 </entry>
 <entry keyword="io_unlink()">
  <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
 </entry>
 <entry keyword="io_unlink_t">
  <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
 </entry>
 <entry keyword="io_unlock_ocb()">
  <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
 </entry>
 <entry keyword="_IO_UTIME">
  <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
 </entry>
 <entry keyword="io_utime()">
  <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
 </entry>
 <entry keyword="io_utime_t">
  <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
 </entry>
 <entry keyword="_IO_WRITE">
  <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
  <topic href="s1_resmgr.html#io_write" title="io_write()"/>
 </entry>
 <entry keyword="io_write()">
  <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
  <topic href="s1_resmgr.html#id178" title="Important note"/>
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
  <topic href="s1_resmgr.html#io_write" title="io_write()"/>
  <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
  <topic href="s1_resmgr.html#id165" title="Step 4"/>
  <entry keyword="example">
   <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
  </entry>
 </entry>
 <entry keyword="io_write_t">
  <topic href="s1_resmgr.html#io_write" title="io_write()"/>
 </entry>
 <entry keyword="_IO_XTYPE_NONE">
  <topic href="s1_resmgr.html#id125" title="Step 2"/>
 </entry>
 <entry keyword="_IO_XTYPE_OFFSET">
  <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
  <topic href="s1_resmgr.html#id125" title="Step 2"/>
  <topic href="s1_resmgr.html#id133" title="Step 7"/>
  <topic href="s1_resmgr.html#id154" title="Step 7"/>
 </entry>
 <entry keyword="IOFUNC_ATTR_ATIME">
  <topic href="s1_resmgr.html#id131" title="Step 6"/>
  <topic href="s1_resmgr.html#id154" title="Step 7"/>
 </entry>
 <entry keyword="IOFUNC_ATTR_DIRTY_TIME">
  <topic href="s1_resmgr.html#id131" title="Step 6"/>
 </entry>
 <entry keyword="iofunc_attr_init()">
  <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
 </entry>
 <entry keyword="IOFUNC_ATTR_MTIME">
  <topic href="s1_resmgr.html#id154" title="Step 7"/>
 </entry>
 <entry keyword="iofunc_attr_t">
  <topic href="s1_resmgr.html#posixdata" title="POSIX-layer data structures"/>
  <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
 </entry>
 <entry keyword="iofunc_chmod_default()">
  <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
 </entry>
 <entry keyword="iofunc_chown()">
  <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
 </entry>
 <entry keyword="iofunc_chown_default()">
  <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
 </entry>
 <entry keyword="iofunc_close_dup()">
  <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
 </entry>
 <entry keyword="iofunc_close_dup_default()">
  <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
 </entry>
 <entry keyword="iofunc_close_ocb_default()">
  <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
 </entry>
 <entry keyword="iofunc_devctl()">
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
 </entry>
 <entry keyword="iofunc_devctl_default()">
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
  <topic href="s1_resmgr.html#id159" title="Step 1"/>
 </entry>
 <entry keyword="iofunc_func_init()">
  <topic href="s1_resmgr.html#alphalist" title="Alphabetical listing of connect and I/O functions"/>
  <topic href="s1_resmgr.html#examples" title="Examples"/>
  <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
  <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
  <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
  <topic href="s1_resmgr.html#id159" title="Step 1"/>
  <topic href="s1_resmgr.html#id112" title="Step 2"/>
  <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
 </entry>
 <entry keyword="iofunc_link()">
  <topic href="s1_resmgr.html#io_link" title="io_link()"/>
 </entry>
 <entry keyword="iofunc_lock_default()">
  <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
  <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
 </entry>
 <entry keyword="iofunc_lock_ocb_default()">
  <topic href="s1_resmgr.html#io_lock_ocb" title="io_lock_ocb()"/>
  <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
 </entry>
 <entry keyword="iofunc_lseek()">
  <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
 </entry>
 <entry keyword="iofunc_lseek_default()">
  <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
 </entry>
 <entry keyword="iofunc_mknod()">
  <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
 </entry>
 <entry keyword="iofunc_mmap()">
  <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
 </entry>
 <entry keyword="iofunc_mmap_default()">
  <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
  <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
 </entry>
 <entry keyword="IOFUNC_MOUNT_32BIT">
  <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
 </entry>
 <entry keyword="IOFUNC_MOUNT_FLAGS_PRIVATE">
  <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
 </entry>
 <entry keyword="iofunc_mount_t">
  <topic href="s1_resmgr.html#posixdata" title="POSIX-layer data structures"/>
  <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
  <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
 </entry>
 <entry keyword="_IOFUNC_NFUNCS">
  <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
 </entry>
 <entry keyword="iofunc_notify()">
  <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
 </entry>
 <entry keyword="iofunc_notify_remove()">
  <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
 </entry>
 <entry keyword="iofunc_notify_trigger()">
  <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
 </entry>
 <entry keyword="iofunc_ocb_attach()">
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
 </entry>
 <entry keyword="iofunc_ocb_calloc()">
  <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
 </entry>
 <entry keyword="IOFUNC_OCB_FLAGS_PRIVATE">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="IOFUNC_OCB_MMAP">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="IOFUNC_OCB_PRIVILEGED">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="IOFUNC_OCB_T">
  <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
 </entry>
 <entry keyword="iofunc_ocb_t">
  <topic href="s1_resmgr.html#posixdata" title="POSIX-layer data structures"/>
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
  <topic href="s1_resmgr.html#strange_offset" title="The strange case of the offset member"/>
 </entry>
 <entry keyword="iofunc_open()">
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
 </entry>
 <entry keyword="iofunc_open_default()">
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
  <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
 </entry>
 <entry keyword="iofunc_openfd()">
  <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
 </entry>
 <entry keyword="iofunc_openfd_default()">
  <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
 </entry>
 <entry keyword="iofunc_pathconf()">
  <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
 </entry>
 <entry keyword="iofunc_pathconf_default()">
  <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
 </entry>
 <entry keyword="IOFUNC_PC_CHOWN_RESTRICTED">
  <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
  <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
 </entry>
 <entry keyword="IOFUNC_PC_LINK_DIR">
  <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
 </entry>
 <entry keyword="IOFUNC_PC_NO_TRUNC">
  <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
 </entry>
 <entry keyword="IOFUNC_PC_SYNC_IO">
  <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
 </entry>
 <entry keyword="iofunc_read_default()">
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
 </entry>
 <entry keyword="iofunc_read_verify()">
  <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
  <topic href="s1_resmgr.html#id123" title="Step 1"/>
  <topic href="s1_resmgr.html#id125" title="Step 2"/>
 </entry>
 <entry keyword="iofunc_readlink()">
  <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
 </entry>
 <entry keyword="iofunc_rename()">
  <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
 </entry>
 <entry keyword="iofunc_space_verify()">
  <topic href="s1_resmgr.html#io_space" title="io_space()"/>
 </entry>
 <entry keyword="iofunc_stat()">
  <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
 </entry>
 <entry keyword="iofunc_stat_default()">
  <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
  <topic href="s1_resmgr.html#id131" title="Step 6"/>
 </entry>
 <entry keyword="iofunc_sync()">
  <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
 </entry>
 <entry keyword="iofunc_sync_default()">
  <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
 </entry>
 <entry keyword="iofunc_sync_verify()">
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
  <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
  <topic href="s1_resmgr.html#io_write" title="io_write()"/>
 </entry>
 <entry keyword="iofunc_unblock()">
  <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
  <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
 </entry>
 <entry keyword="iofunc_unblock_default()">
  <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
 </entry>
 <entry keyword="iofunc_unlink()">
  <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
 </entry>
 <entry keyword="iofunc_unlock_ocb_default()">
  <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
  <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
 </entry>
 <entry keyword="iofunc_utime()">
  <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
 </entry>
 <entry keyword="iofunc_utime_default()">
  <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
 </entry>
 <entry keyword="iofunc_write_default()">
  <topic href="s1_resmgr.html#io_write" title="io_write()"/>
 </entry>
 <entry keyword="iofunc_write_verify()">
  <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
  <topic href="s1_resmgr.html#io_write" title="io_write()"/>
 </entry>
 <entry keyword="_IOMGR_PRIVATE_BASE">
  <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
 </entry>
 <entry keyword="_IOMGR_PRIVATE_MAX">
  <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
 </entry>
 <entry keyword="IOV">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="See Message passing"/>
  <entry keyword="See also Message passing"/>
 </entry>
 <entry keyword="iov_t">
  <topic href="s1_msg.html#id58" title="Multipart messages"/>
  <entry keyword="defined">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
 </entry>
 <entry keyword="ISR">
 </entry>
 <entry keyword="kernel">
  <entry keyword="as arbiter">
   <topic href="s1_procs.html#id29" title="The kernel as arbiter"/>
  </entry>
  <entry keyword="base timing resolution">
   <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
  </entry>
  <entry keyword="context switch">
   <topic href="s1_procs.html#id29" title="The kernel as arbiter"/>
  </entry>
  <entry keyword="context-switch">
   <topic href="s1_procs.html#id51" title="Why processes?"/>
  </entry>
  <entry keyword="preempting thread">
   <topic href="s1_procs.html#id31" title="Prioritization"/>
  </entry>
  <entry keyword="readying a thread">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
   <topic href="s1_timer.html#id70" title="Summary"/>
  </entry>
  <entry keyword="resuming thread">
   <topic href="s1_procs.html#id31" title="Prioritization"/>
  </entry>
  <entry keyword="special pulse">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="suspending a thread">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="synthesizing unblock pulse">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
  <entry keyword="timeouts">
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
   <entry keyword="SIGEV_UNBLOCK">
    <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   </entry>
  </entry>
  <entry keyword="timer implementation">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
   <topic href="s1_timer.html#id13" title="Types of timers"/>
  </entry>
  <entry keyword="view of data in message pass">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
 </entry>
 <entry keyword="kernel callouts">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="kernel state">
  <entry keyword="blocking">
   <topic href="s1_procs.html#id46" title="The blocked states"/>
  </entry>
  <entry keyword="complete list">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_CONDVAR">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_DEAD">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_INTR">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_JOIN">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_MUTEX">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   <topic href="s1_procs.html#id46" title="The blocked states"/>
  </entry>
  <entry keyword="STATE_NANOSLEEP">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_NET_REPLY">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_NET_SEND">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_READY">
   <topic href="s1_inter.html#id15" title="Attaching with InterruptAttachEvent()"/>
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   <topic href="s1_timer.html#id15" title="Notification schemes"/>
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
   <topic href="s1_procs.html#id44" title="READY"/>
   <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
   <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
   <topic href="s1_procs.html#id46" title="The blocked states"/>
   <topic href="s1_timer.html#id11" title="Timing jitter"/>
  </entry>
  <entry keyword="STATE_RECEIVE">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_RECV ">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <topic href="s1_timer.html#id25" title="Pulse notification"/>
   <topic href="s1_msg.html#id92" title="So what's the trick?"/>
   <entry keyword="diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="STATE_REPLY">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <topic href="s1_timer.html#notes" title="Notes"/>
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   <entry keyword="diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="STATE_RUNNING">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   <topic href="s1_procs.html#id44" title="READY"/>
   <topic href="s1_procs.html#id42" title="RUNNING"/>
  </entry>
  <entry keyword="STATE_SEM">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   <topic href="s1_procs.html#id46" title="The blocked states"/>
  </entry>
  <entry keyword="STATE_SEND">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
   <entry keyword="diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="when abnormal">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="when normal">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="STATE_SIGSUSPEND">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_SIGWAITINFO">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_STACK">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_STOPPED">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_WAITCTX">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_WAITPAGE">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="STATE_WAITTHREAD">
   <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  </entry>
  <entry keyword="triggering timeout">
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  </entry>
 </entry>
 <entry keyword="kernel timeout">
  <topic href="s1_timer.html#id70" title="Summary"/>
  <entry keyword="arming">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="message passing">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="_NTO_CHF_UNBLOCK">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="servers">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="specifying multiple">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="with pthread_join()">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
 </entry>
 <entry keyword="kill()">
  <topic href="s3_qnx2nto.html#id14" title="Pulses and events"/>
 </entry>
 <entry keyword="Krten, Rob">
  <topic href="preface.html#Krten" title="About Rob Krten"/>
 </entry>
 <entry keyword="latency, interrupt">
  <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
 </entry>
 <entry keyword="level-sensitive interrupts">
  <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  <entry keyword="diagram">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  </entry>
 </entry>
 <entry keyword="limits">
  <entry keyword="multipart messages">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="range of pulse code values">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
 </entry>
 <entry keyword="local node descriptor">
  <topic href="s1_msg.html#id29" title="Establishing a connection"/>
 </entry>
 <entry keyword="low frequency interrupts">
  <topic href="s1_inter.html#id33" title="The trade-offs"/>
 </entry>
 <entry keyword="ls">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  <topic href="s3_help.html#id19" title="Utilities Reference"/>
  <topic href="s3_help.html#id29" title="Versions"/>
 </entry>
 <entry keyword="lseek()">
  <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  <topic href="s1_resmgr.html#id21" title="Client summary"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_resmgr.html#Summary" title="Summary"/>
 </entry>
 <entry keyword="macros">
  <entry keyword="for filling struct sigevent">
   <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   <entry keyword="SIGEV_INTR_INIT()">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_PULSE_INIT()">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_CODE_INIT()">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_INIT()">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_SIGNAL_THREAD_INIT()">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_THREAD_INIT()">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
   <entry keyword="SIGEV_UNBLOCK_INIT()">
    <topic href="s1_timer.html#id23" title="General tricks for notification"/>
   </entry>
  </entry>
  <entry keyword="message passing">
   <entry keyword="SETIOV()">
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
   </entry>
  </entry>
  <entry keyword="resource manager">
   <entry keyword="_RESMGR_ERRNO() (deprecated)">
    <topic href="s1_resmgr.html#general" title="General notes"/>
   </entry>
   <entry keyword="_RESMGR_NPARTS()">
    <topic href="s1_resmgr.html#general" title="General notes"/>
    <topic href="s1_resmgr.html#id165" title="Step 4"/>
   </entry>
   <entry keyword="_RESMGR_PTR()">
    <topic href="s1_resmgr.html#general" title="General notes"/>
    <topic href="s1_resmgr.html#id165" title="Step 4"/>
   </entry>
  </entry>
  <entry keyword="SETIOV()">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="SIGEV_PULSE_INIT()">
   <entry keyword="example">
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   </entry>
  </entry>
  <entry keyword="SIGEV_THREAD_INIT()">
   <entry keyword="example">
    <topic href="s1_timer.html#id49" title="Timers creating threads"/>
   </entry>
  </entry>
  <entry keyword="SIGEV_UNBLOCK_INIT()">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   <entry keyword="example">
    <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   </entry>
  </entry>
 </entry>
 <entry keyword="make">
  <topic href="s3_help.html#id19" title="Utilities Reference"/>
 </entry>
 <entry keyword="malloc()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
  <topic href="s1_msg.html#id58" title="Multipart messages"/>
 </entry>
 <entry keyword="masking interrupts">
  <topic href="s1_inter.html#id6" title="Clearing the interrupt source"/>
  <topic href="s1_inter.html#id21" title="Detaching an interrupt handler"/>
 </entry>
 <entry keyword="meet-me synchronization">
 </entry>
 <entry keyword="mem*()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
 </entry>
 <entry keyword="memcpy()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
  <topic href="s1_msg.html#id58" title="Multipart messages"/>
 </entry>
 <entry keyword="memory">
  <entry keyword="physical, defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="virtual, defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="memory management unit">
 </entry>
 <entry keyword="memory protection">
  <topic href="s1_procs.html#id51" title="Why processes?"/>
 </entry>
 <entry keyword="message">
  <entry keyword="combined">
   <topic href="s1_resmgr.html#combine_messages" title="Combine messages"/>
   <topic href="s1_resmgr.html#should_be_connect" title="Messages that  be connect messages but aren't"/>
   <entry keyword="why they work">
    <topic href="s1_resmgr.html#combine_messages" title="Combine messages"/>
   </entry>
  </entry>
  <entry keyword="connect">
   <topic href="s1_resmgr.html#id28" title="Connect messages"/>
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  </entry>
  <entry keyword="constants">
   <entry keyword="_NTO_CHF_UNBLOCK">
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
   <entry keyword="_NTO_MI_UNBLOCK_REQ">
    <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
    <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
  </entry>
  <entry keyword="determining if pulse or message">
   <topic href="s1_timer.html#notes" title="Notes"/>
  </entry>
  <entry keyword="functions">
   <entry keyword="ChannelCreate()">
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
   <entry keyword="MsgDeliverEvent()">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="MsgRead()">
    <topic href="s1_resmgr.html#id146" title="Step 3"/>
   </entry>
   <entry keyword="MsgReply()">
    <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
    <topic href="s1_resmgr.html#id129" title="Step 5"/>
    <topic href="s1_resmgr.html#id135" title="Step 8"/>
    <topic href="s1_resmgr.html#id137" title="Step 9"/>
   </entry>
   <entry keyword="MsgReplyv()">
    <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
   </entry>
   <entry keyword="MsgSend()">
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
   </entry>
   <entry keyword="MsgSendv()">
    <topic href="s1_resmgr.html#id129" title="Step 5"/>
   </entry>
   <entry keyword="MsgWrite()">
    <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
   </entry>
   <entry keyword="MsgWritev()">
    <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
   </entry>
  </entry>
  <entry keyword="how to tell from pulses">
   <topic href="s1_timer.html#notes" title="Notes"/>
  </entry>
  <entry keyword="I/O">
   <topic href="s1_resmgr.html#id30" title="I/O messages"/>
  </entry>
  <entry keyword="not replying to client">
   <topic href="s1_timer.html#notes" title="Notes"/>
  </entry>
  <entry keyword="other">
   <topic href="s1_resmgr.html#id32" title="Three groups, really"/>
  </entry>
  <entry keyword="receive ID, defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="receiving, defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="replying to multiple clients">
   <topic href="s1_timer.html#notes" title="Notes"/>
  </entry>
  <entry keyword="replying, defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="resource manager">
   <topic href="s1_resmgr.html#id26" title="Handling messages"/>
   <entry keyword="combine">
    <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
   </entry>
   <entry keyword="connect">
    <topic href="s1_resmgr.html#should_be_connect" title="Messages that  be connect messages but aren't"/>
   </entry>
   <entry keyword="_IO_DEVCTL">
    <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
   </entry>
   <entry keyword="_IO_MSG">
    <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
   </entry>
   <entry keyword="processing">
    <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
   </entry>
  </entry>
  <entry keyword="send hierarchy, defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="sending">
   <entry keyword="functions">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
 </entry>
 <entry keyword="message passing">
  <topic href="s1_msg.html#id4" title="A small microkernel and message passing"/>
  <entry keyword="sys/neutrino.h">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="advantages">
   <topic href="s1_msg.html#What_it_means" title="What it means for you"/>
  </entry>
  <entry keyword="as decoupling">
   <topic href="s1_msg.html#id94" title="Summary"/>
  </entry>
  <entry keyword="as object oriented design">
   <topic href="s1_msg.html#What_it_means" title="What it means for you"/>
  </entry>
  <entry keyword="as synchronization scheme">
   <topic href="s1_msg.html#id94" title="Summary"/>
  </entry>
  <entry keyword="avoiding unnecessary copying">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="blocking client">
   <topic href="s1_msg.html#id35" title="Message handling"/>
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="buffer sizes">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="cancellation points">
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  </entry>
  <entry keyword="channel ID">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="ChannelCreate()">
   <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   <topic href="s1_msg.html#id92" title="So what's the trick?"/>
  </entry>
  <entry keyword="client">
   <topic href="s1_msg.html#id27" title="The client"/>
  </entry>
  <entry keyword="client/server">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="confusion with timeouts">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
  <entry keyword="ConnectAttach()">
   <topic href="s1_msg.html#id82" title="Impact on ConnectAttach()"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="ConnectDetach()">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
  </entry>
  <entry keyword="connection ID">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="data flow">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="deadlock">
   <topic href="s1_msg.html#sendhierarchy" title="The send-hierarchy"/>
  </entry>
  <entry keyword="dealing with large buffers">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="decoupling of design">
   <topic href="s1_msg.html#id4" title="A small microkernel and message passing"/>
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
   <topic href="s1_msg.html#What_it_means" title="What it means for you"/>
  </entry>
  <entry keyword="deferring data transfer">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="diagram">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="distributing work over a network">
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
  </entry>
  <entry keyword="done by C library">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="double standard in conventional OS">
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
  </entry>
  <entry keyword="establishing client to server connection">
   <topic href="s1_msg.html#id27" title="The client"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
  </entry>
  <entry keyword="excluding messages">
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="filesystem example">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="finding a server">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   <entry keyword="ND/PID/CHID">
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   </entry>
   <entry keyword="using a global variable">
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   </entry>
   <entry keyword="using a resource manager">
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   </entry>
   <entry keyword="using global variables">
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   </entry>
   <entry keyword="using well-known files">
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   </entry>
  </entry>
  <entry keyword="finding the server&#x0027;s ND/PID/CHID">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="fs-qnx4 message example">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="handling big messages in server">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="how to handle large transfers">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="interrupts">
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="iov_t">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="kernel timeouts">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="limiting transfer size">
   <topic href="s1_msg.html#id47" title="Replying to the client"/>
   <topic href="s1_msg.html#id37" title="Server framework"/>
  </entry>
  <entry keyword="modularity">
   <topic href="s1_msg.html#id4" title="A small microkernel and message passing"/>
  </entry>
  <entry keyword="MsgDeliverEvent()">
   <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="MsgError() versus MsgReply()">
   <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  </entry>
  <entry keyword="MsgInfo()">
   <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
  </entry>
  <entry keyword="MsgRead()">
   <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
   <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
   <topic href="s1_msg.html#id62" title="Implementation"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="MsgReceive()">
   <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
   <topic href="s1_msg.html#id62" title="Implementation"/>
   <topic href="s1_msg.html#id35" title="Message handling"/>
   <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
   <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
   <topic href="s1_msg.html#id92" title="So what's the trick?"/>
   <topic href="s1_msg.html#id75" title="Synchronization problem"/>
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
   <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
  </entry>
  <entry keyword="MsgReceive() versus MsgReceivev()">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="MsgReceivePulse()">
   <topic href="s1_msg.html#id62" title="Implementation"/>
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="MsgReceivev()">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="MsgReply()">
   <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
   <topic href="s1_msg.html#id35" title="Message handling"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
   <topic href="s1_msg.html#id75" title="Synchronization problem"/>
  </entry>
  <entry keyword="MsgReplyv()">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="MsgSend()">
   <topic href="s1_msg.html#id62" title="Implementation"/>
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   <topic href="s1_msg.html#Pulses" title="Pulses"/>
   <topic href="s1_msg.html#sampcli" title="Sending messages"/>
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
   <entry keyword="example">
    <topic href="s1_msg.html#sampcli" title="Sending messages"/>
   </entry>
  </entry>
  <entry keyword="MsgSend() family">
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  </entry>
  <entry keyword="MsgSendnc()">
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  </entry>
  <entry keyword="MsgSendsv()">
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  </entry>
  <entry keyword="MsgSendsvnc()">
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  </entry>
  <entry keyword="MsgSendv()">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  </entry>
  <entry keyword="MsgSendvnc()">
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  </entry>
  <entry keyword="MsgSendvs()">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  </entry>
  <entry keyword="MsgSendvsnc()">
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  </entry>
  <entry keyword="MsgWrite()">
   <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
   <topic href="s1_msg.html#id62" title="Implementation"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="MsgWritev()">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="multi-threaded server">
   <topic href="s1_msg.html#id22" title="Multi-threaded server"/>
  </entry>
  <entry keyword="multipart messages">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <entry keyword="example">
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
   </entry>
   <entry keyword="IOV">
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
   </entry>
   <entry keyword="kernel&#x0027;s view">
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
   </entry>
   <entry keyword="limitations">
    <topic href="s1_msg.html#id58" title="Multipart messages"/>
   </entry>
  </entry>
  <entry keyword="multipart versus linear">
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  </entry>
  <entry keyword="multiple threads">
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
  </entry>
  <entry keyword="ND/PID/CHIDs">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="network">
   <entry keyword="detailed analysis">
    <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
   </entry>
   <entry keyword="differences from local">
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   </entry>
  </entry>
  <entry keyword="network implementation">
   <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
  </entry>
  <entry keyword="network transparent">
   <topic href="s1_msg.html#id94" title="Summary"/>
  </entry>
  <entry keyword="network-distributed">
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
  </entry>
  <entry keyword="networked">
   <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
  </entry>
  <entry keyword="networked case">
   <entry keyword="determining how much data should have been transferred">
    <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
   </entry>
   <entry keyword="determining how much data was transferred">
    <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
   </entry>
  </entry>
  <entry keyword="networked overhead">
   <topic href="s1_msg.html#id80" title="Longer delays"/>
  </entry>
  <entry keyword="node descriptor">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
  </entry>
  <entry keyword="not replying to the client">
   <topic href="s1_msg.html#id49" title="Not replying to the client"/>
  </entry>
  <entry keyword="notifying client">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="obtaining a connection ID">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
  </entry>
  <entry keyword="offsetting into the client&#x0027;s data">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="peeking into a message">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="phases">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="priority">
   <topic href="s1_msg.html#id54" title="What about priorities?"/>
  </entry>
  <entry keyword="process ID">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
  </entry>
  <entry keyword="pulse">
   <entry keyword="MsgReceive()">
    <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
   </entry>
   <entry keyword="MsgReceivePulse()">
    <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
   </entry>
   <entry keyword="receiving">
    <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
   </entry>
  </entry>
  <entry keyword="race condition with unblock">
   <topic href="s1_msg.html#id75" title="Synchronization problem"/>
  </entry>
  <entry keyword="reading from the client&#x0027;s address space">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="readying a thread">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="receive ID">
   <topic href="s1_msg.html#id47" title="Replying to the client"/>
   <entry keyword="and reply">
    <topic href="s1_msg.html#id35" title="Message handling"/>
   </entry>
  </entry>
  <entry keyword="receive-blocked">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <entry keyword="diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="receiving only pulses">
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="receiving pulses only">
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="REPLY-blocked">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="reply-blocked">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <entry keyword="diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="reply-driven model">
   <topic href="s1_msg.html#id49" title="Not replying to the client"/>
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
   <entry keyword="example">
    <topic href="s1_msg.html#id18" title="Reply-driven (server/subserver)"/>
   </entry>
   <entry keyword="important subtlety">
    <topic href="s1_msg.html#id20" title="An important subtlety"/>
   </entry>
  </entry>
  <entry keyword="replying to the client">
   <topic href="s1_msg.html#id47" title="Replying to the client"/>
  </entry>
  <entry keyword="replying with no data">
   <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
   <entry keyword="example">
    <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
   </entry>
  </entry>
  <entry keyword="resource manager">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="run time installability of components">
   <topic href="s1_msg.html#id4" title="A small microkernel and message passing"/>
  </entry>
  <entry keyword="scatter/gather">
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="SEND state">
   <entry keyword="diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="SEND-blocked">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="send-blocked">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <entry keyword="diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="send-driven model">
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
   <entry keyword="example">
    <topic href="s1_msg.html#id16" title="Send-driven (client/server)"/>
   </entry>
   <entry keyword="important subtlety">
    <topic href="s1_msg.html#id20" title="An important subtlety"/>
   </entry>
  </entry>
  <entry keyword="server">
   <topic href="s1_msg.html#id35" title="Message handling"/>
   <entry keyword="example">
    <topic href="s1_msg.html#id37" title="Server framework"/>
   </entry>
  </entry>
  <entry keyword="server connection ID">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="server replying to client">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="server/subserver">
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
   <entry keyword="delegation of work">
    <topic href="s1_msg.html#id12" title="Server/subserver"/>
   </entry>
  </entry>
  <entry keyword="SETIOV() (macro)">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="SMP">
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
  </entry>
  <entry keyword="STATE_RECV state">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <entry keyword="diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="STATE_REPLY state">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <entry keyword="diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="STATE_SEND state">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="summary">
   <topic href="s1_msg.html#id94" title="Summary"/>
  </entry>
  <entry keyword="synthetic unblock pulse">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
  <entry keyword="thread and channels">
   <topic href="s1_msg.html#id42" title="More about channels"/>
  </entry>
  <entry keyword="thread pool">
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="timeouts">
   <entry keyword="informing server">
    <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
   </entry>
  </entry>
  <entry keyword="timeouts and _NTO_CHF_UNBLOCK">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="timer">
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="tracking owner of message">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="transmit buffer">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="transparency over network">
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
  </entry>
  <entry keyword="unblock">
   <topic href="s1_msg.html#id75" title="Synchronization problem"/>
  </entry>
  <entry keyword="unblocking">
   <entry keyword="client">
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   </entry>
   <entry keyword="_NTO_MI_UNBLOCK_REQ">
    <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
   </entry>
   <entry keyword="server">
    <topic href="s1_msg.html#id35" title="Message handling"/>
   </entry>
  </entry>
  <entry keyword="unit testing">
   <topic href="s1_msg.html#What_it_means" title="What it means for you"/>
  </entry>
  <entry keyword="useful minimal set of functions">
   <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  </entry>
  <entry keyword="using IOV (vectored) functions">
   <topic href="s1_msg.html#id62" title="Implementation"/>
  </entry>
  <entry keyword="using the _NTO_MI_UNBLOCK_REQ flag">
   <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
  </entry>
  <entry keyword="validity of receive ID">
   <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
  </entry>
  <entry keyword="vs. traditional OS">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
  </entry>
  <entry keyword="with pool of threads">
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
  </entry>
  <entry keyword="write() example">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="writing a header later">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="writing to the client&#x0027;s address space">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
 </entry>
 <entry keyword="microkernel">
  <topic href="s1_msg.html#id4" title="A small microkernel and message passing"/>
 </entry>
 <entry keyword="mktime()">
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
 </entry>
 <entry keyword="MMU">
  <topic href="s1_procs.html#id51" title="Why processes?"/>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="modularity due to message passing">
  <topic href="s1_msg.html#id4" title="A small microkernel and message passing"/>
 </entry>
 <entry keyword="mountpoint">
  <entry keyword="creating">
   <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
  </entry>
  <entry keyword="registering">
   <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
  </entry>
 </entry>
 <entry keyword="mq_open()">
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="mq_receive()">
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="mqueue">
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="MsgDeliverEvent()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_msg.html#id84" title="Impact on MsgDeliverEvent()"/>
  <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
  <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
  <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
  <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
  <topic href="s1_msg.html#sendhierarchy" title="The send-hierarchy"/>
  <entry keyword="breaking send hierarchy">
   <topic href="s1_msg.html#sendhierarchy" title="The send-hierarchy"/>
  </entry>
  <entry keyword="networked case">
   <topic href="s1_msg.html#id84" title="Impact on MsgDeliverEvent()"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
  </entry>
  <entry keyword="special use of receive ID">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
 </entry>
 <entry keyword="MsgError()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  <entry keyword="errno">
   <topic href="s1_resmgr.html#general" title="General notes"/>
   <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  </entry>
 </entry>
 <entry keyword="MsgInfo()">
  <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
 </entry>
 <entry keyword="MsgRead()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
  <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
  <topic href="s1_msg.html#id62" title="Implementation"/>
  <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  <topic href="s1_resmgr.html#id146" title="Step 3"/>
  <entry keyword="networked case">
   <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
  </entry>
  <entry keyword="offset parameter">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
 </entry>
 <entry keyword="MsgReadv()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <entry keyword="example">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
 </entry>
 <entry keyword="MsgReceive()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_resmgr.html#id26" title="Handling messages"/>
  <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
  <topic href="s1_msg.html#id62" title="Implementation"/>
  <topic href="s1_timer.html#main" title="main()"/>
  <topic href="s1_msg.html#id35" title="Message handling"/>
  <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
  <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
  <topic href="s1_msg.html#id42" title="More about channels"/>
  <topic href="s1_msg.html#id58" title="Multipart messages"/>
  <topic href="s1_msg.html#id49" title="Not replying to the client"/>
  <topic href="s1_timer.html#notes" title="Notes"/>
  <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
  <topic href="s1_msg.html#id37" title="Server framework"/>
  <topic href="s1_msg.html#id92" title="So what's the trick?"/>
  <topic href="s1_msg.html#id75" title="Synchronization problem"/>
  <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  <entry keyword="example">
   <topic href="s1_timer.html#main" title="main()"/>
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
   <topic href="s1_msg.html#id37" title="Server framework"/>
  </entry>
  <entry keyword="networked case">
   <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
  </entry>
  <entry keyword="priority inheritance">
   <topic href="s1_msg.html#id92" title="So what's the trick?"/>
  </entry>
  <entry keyword="relationship of parameters to MsgReply()">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
 </entry>
 <entry keyword="MsgReceivePulse()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_msg.html#id62" title="Implementation"/>
  <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
  <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
 </entry>
 <entry keyword="MsgReceivev()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_msg.html#id58" title="Multipart messages"/>
  <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
 </entry>
 <entry keyword="MsgReply()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
  <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
  <topic href="s1_msg.html#id35" title="Message handling"/>
  <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
  <topic href="s1_msg.html#id47" title="Replying to the client"/>
  <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  <topic href="s1_msg.html#id37" title="Server framework"/>
  <topic href="s1_resmgr.html#id129" title="Step 5"/>
  <topic href="s1_resmgr.html#id135" title="Step 8"/>
  <topic href="s1_resmgr.html#id137" title="Step 9"/>
  <topic href="s1_msg.html#id75" title="Synchronization problem"/>
  <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
  <entry keyword="errno">
   <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   <topic href="s1_msg.html#id37" title="Server framework"/>
  </entry>
  <entry keyword="networked case">
   <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
  </entry>
  <entry keyword="relationship of parameters to MsgReceive()">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
 </entry>
 <entry keyword="MsgReplyv()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
  <topic href="s1_resmgr.html#general" title="General notes"/>
  <topic href="s1_msg.html#id58" title="Multipart messages"/>
 </entry>
 <entry keyword="MsgSend()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  <topic href="s1_msg.html#id62" title="Implementation"/>
  <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
  <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  <topic href="s1_msg.html#id35" title="Message handling"/>
  <topic href="s1_msg.html#id58" title="Multipart messages"/>
  <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  <topic href="s1_msg.html#Pulses" title="Pulses"/>
  <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  <topic href="s1_msg.html#id47" title="Replying to the client"/>
  <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  <topic href="s1_msg.html#sampcli" title="Sending messages"/>
  <topic href="s1_msg.html#id37" title="Server framework"/>
  <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
  <topic href="s1_msg.html#the_server" title="The server"/>
  <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  <entry keyword="EINTR">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
   <topic href="s1_msg.html#sampcli" title="Sending messages"/>
  </entry>
 </entry>
 <entry keyword="MsgSend() family">
  <topic href="s1_msg.html#sampcli" title="Sending messages"/>
  <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  <entry keyword="guide to variants">
   <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  </entry>
 </entry>
 <entry keyword="MsgSendnc()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#id60" title="What about the other versions?"/>
 </entry>
 <entry keyword="MsgSendsv()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#id60" title="What about the other versions?"/>
 </entry>
 <entry keyword="MsgSendsvnc()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#id60" title="What about the other versions?"/>
 </entry>
 <entry keyword="MsgSendv()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
  <topic href="s1_resmgr.html#id129" title="Step 5"/>
  <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
  <topic href="s1_msg.html#id60" title="What about the other versions?"/>
  <entry keyword="example">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
 </entry>
 <entry keyword="MsgSendvnc()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#id60" title="What about the other versions?"/>
 </entry>
 <entry keyword="MsgSendvs()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  <topic href="s1_msg.html#id60" title="What about the other versions?"/>
 </entry>
 <entry keyword="MsgSendvsnc()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_msg.html#id60" title="What about the other versions?"/>
 </entry>
 <entry keyword="MsgVerifyEvent()">
  <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
 </entry>
 <entry keyword="MsgWrite()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
  <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
  <topic href="s1_msg.html#id62" title="Implementation"/>
  <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  <topic href="s1_msg.html#id51" title="Replying with no data, or an errno"/>
  <entry keyword="networked case">
   <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
   <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
  </entry>
  <entry keyword="offset parameter">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
 </entry>
 <entry keyword="MsgWritev()">
  <topic href="s1_msg.html#id25" title="Architecture &#x0026; structure"/>
  <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
  <topic href="s1_msg.html#id58" title="Multipart messages"/>
  <entry keyword="offset parameter">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
 </entry>
 <entry keyword="MT_TIMEDOUT">
  <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
 </entry>
 <entry keyword="multipart messages">
 </entry>
 <entry keyword="MUTEX">
  <topic href="s1_procs.html#id46" title="The blocked states"/>
 </entry>
 <entry keyword="mutex">
  <entry keyword="analogy">
   <topic href="s1_procs.html#mutex" title="Mutual exclusion"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="mutual exclusion">
 </entry>
 <entry keyword="name space">
 </entry>
 <entry keyword="name_attach()">
  <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
  <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
 </entry>
 <entry keyword="name_close()">
  <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
  <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
 </entry>
 <entry keyword="name_detach()">
  <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
  <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
 </entry>
 <entry keyword="name_open()">
  <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
  <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
 </entry>
 <entry keyword="nanospin()">
  <topic href="s1_timer.html#id4" title="Operating periodically"/>
 </entry>
 <entry keyword="ND">
 </entry>
 <entry keyword="ND_LOCAL_NODE">
  <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
 </entry>
 <entry keyword="netmgr_remote_nd()">
  <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  <entry keyword="example">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
 </entry>
 <entry keyword="netmgr_strtond()">
  <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  <entry keyword="example">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
 </entry>
 <entry keyword="network">
  <entry keyword="data transfer">
   <topic href="s1_msg.html#id37" title="Server framework"/>
  </entry>
  <entry keyword="determining how much data should have been transferred">
   <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
  </entry>
  <entry keyword="determining how much data was transferred">
   <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
  </entry>
  <entry keyword="distributed architecture">
   <topic href="s1_procs.html#id101" title="Comparisons"/>
  </entry>
  <entry keyword="message passing">
   <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
   <entry keyword="ConnectAttach() differences">
    <topic href="s1_msg.html#id82" title="Impact on ConnectAttach()"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   </entry>
   <entry keyword="detailed analysis">
    <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
   </entry>
   <entry keyword="differences from local">
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   </entry>
   <entry keyword="MsgDeliverEvent() differences">
    <topic href="s1_msg.html#id84" title="Impact on MsgDeliverEvent()"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   </entry>
   <entry keyword="MsgRead() differences">
    <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   </entry>
   <entry keyword="MsgReceive() differences">
    <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   </entry>
   <entry keyword="MsgReply() differences">
    <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   </entry>
   <entry keyword="MsgWrite() differences">
    <topic href="s1_msg.html#id86" title="Impact on MsgReply(), MsgRead(), and MsgWrite()"/>
    <topic href="s1_msg.html#netdiff" title="Networked message passing differences"/>
   </entry>
   <entry keyword="name resolution">
    <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
   </entry>
   <entry keyword="overhead">
    <topic href="s1_msg.html#id80" title="Longer delays"/>
   </entry>
   <entry keyword="remote name resolution">
    <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
   </entry>
  </entry>
  <entry keyword="message passing transparency">
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
  </entry>
  <entry keyword="netmgr_remote_nd()">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="netmgr_strtond()">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="node descriptor">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
   <entry keyword="of local node">
    <topic href="s1_msg.html#id29" title="Establishing a connection"/>
   </entry>
  </entry>
  <entry keyword="node descriptor of client">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="of SMP systems">
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
  </entry>
  <entry keyword="server">
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
  </entry>
  <entry keyword="using message passing to distribute work">
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
  </entry>
  <entry keyword="versus shared memory">
   <topic href="s1_procs.html#id101" title="Comparisons"/>
  </entry>
 </entry>
 <entry keyword="Neutrino">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="philosophy">
   <topic href="s1_msg.html#id9" title="The philosophy of Neutrino"/>
  </entry>
 </entry>
 <entry keyword="nice">
  <topic href="s1_procs.html#id55" title="Starting a process from the command line"/>
 </entry>
 <entry keyword="node descriptor">
  <topic href="s1_msg.html#id29" title="Establishing a connection"/>
  <entry keyword="sys/netmgr.h">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="characteristics">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="contained in struct _msg_info">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="conversion from symbolic name">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="how to find">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="how to pass within network">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="message passing">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="obtaining remote">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="of local node">
   <topic href="s1_msg.html#id29" title="Establishing a connection"/>
  </entry>
  <entry keyword="process manager">
   <topic href="s1_resmgr.html#id15" title="Finding the process manager"/>
  </entry>
  <entry keyword="receiving node&#x0027;s for transmitting node&#x0027;s">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="representation of remote">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="transmitting node&#x0027;s for receiving node&#x0027;s">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
 </entry>
 <entry keyword="node ID">
  <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  <entry keyword="defined">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="not network unique">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="of self">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
 </entry>
 <entry keyword="_NTO_CHF_COID_DISCONNECT">
  <topic href="s1_msg.html#chanflags" title="Channel flags"/>
 </entry>
 <entry keyword="_NTO_CHF_DISCONNECT">
  <topic href="s1_msg.html#chanflags" title="Channel flags"/>
 </entry>
 <entry keyword="_NTO_CHF_FIXED_PRIORITY">
  <topic href="s1_msg.html#chanflags" title="Channel flags"/>
  <topic href="s1_msg.html#id92" title="So what's the trick?"/>
 </entry>
 <entry keyword="_NTO_CHF_REPLY_LEN">
  <topic href="s1_msg.html#chanflags" title="Channel flags"/>
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
 </entry>
 <entry keyword="_NTO_CHF_SENDER_LEN">
  <topic href="s1_msg.html#chanflags" title="Channel flags"/>
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
 </entry>
 <entry keyword="_NTO_CHF_THREAD_DEATH">
  <topic href="s1_msg.html#chanflags" title="Channel flags"/>
 </entry>
 <entry keyword="_NTO_CHF_UNBLOCK">
  <topic href="s1_msg.html#chanflags" title="Channel flags"/>
  <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
  <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  <topic href="s1_timer.html#id27" title="Signal notification"/>
  <topic href="s1_msg.html#id75" title="Synchronization problem"/>
  <entry keyword="and kernel timeouts">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="modifying client&#x0027;s behavior">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
 </entry>
 <entry keyword="_NTO_INTR_FLAGS_END">
  <topic href="s1_inter.html#id23" title="The flags parameter"/>
 </entry>
 <entry keyword="_NTO_INTR_FLAGS_PROCESS">
  <topic href="s1_inter.html#id23" title="The flags parameter"/>
 </entry>
 <entry keyword="_NTO_INTR_FLAGS_TRK_MSK">
  <topic href="s1_inter.html#id23" title="The flags parameter"/>
 </entry>
 <entry keyword="_NTO_MI_ENDIAN_BIG">
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
 </entry>
 <entry keyword="_NTO_MI_ENDIAN_DIFF">
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
 </entry>
 <entry keyword="_NTO_MI_NET_CRED_DIRTY">
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
 </entry>
 <entry keyword="_NTO_MI_UNBLOCK_REQ">
  <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
  <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
  <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
  <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
 </entry>
 <entry keyword="O_RDONLY">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="O_RDWR">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="O_WRONLY">
  <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="object oriented design via message passing">
  <topic href="s1_msg.html#What_it_means" title="What it means for you"/>
 </entry>
 <entry keyword="OCB">
  <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
  <entry keyword="allocating">
   <topic href="s1_resmgr.html#id184" title="More efficient allocation"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="extended">
   <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
  </entry>
  <entry keyword="monitoring">
   <topic href="s1_resmgr.html#id182" title="OCB monitor"/>
  </entry>
 </entry>
 <entry keyword="one-shot timers">
  <topic href="s1_timer.html#id13" title="Types of timers"/>
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  <entry keyword="example">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
 </entry>
 <entry keyword="open context block">
 </entry>
 <entry keyword="open()">
  <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  <topic href="s1_resmgr.html#id21" title="Client summary"/>
  <topic href="s3_qnx2nto.html#id29" title="Client/Server using an I/O manager"/>
  <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
  <topic href="s1_resmgr.html#id28" title="Connect messages"/>
  <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_resmgr.html#id17" title="Handling directories"/>
  <topic href="s1_resmgr.html#id30" title="I/O messages"/>
  <topic href="s1_msg.html#id82" title="Impact on ConnectAttach()"/>
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  <topic href="s3_qnx2nto.html#pp-mp" title="Message passing considerations"/>
  <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
  <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
  <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
  <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  <topic href="s1_resmgr.html#id19" title="Union'd filesystems"/>
  <entry keyword="implementation">
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  </entry>
 </entry>
 <entry keyword="operating system">
  <entry keyword="double standard in conventional">
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
  </entry>
  <entry keyword="message passing vs. traditional">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   <topic href="s1_msg.html#Network_distributed" title="Network-distributed message passing"/>
  </entry>
  <entry keyword="microkernel">
   <topic href="s1_msg.html#id4" title="A small microkernel and message passing"/>
  </entry>
  <entry keyword="process">
   <entry keyword="background">
    <topic href="s1_procs.html#id55" title="Starting a process from the command line"/>
   </entry>
   <entry keyword="creating">
    <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
    <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
    <topic href="s1_procs.html#id59" title="Starting a process with the system() call"/>
   </entry>
  </entry>
 </entry>
 <entry keyword="out*()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
 </entry>
 <entry keyword="P_NOWAIT">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
 </entry>
 <entry keyword="P_NOWAITO">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="P_OVERLAY">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="P_WAIT">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="PATH">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="pathname">
  <entry keyword="pollution">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="registering">
   <topic href="s1_resmgr.html#Resmgr_view" title="The resource manager's view"/>
  </entry>
  <entry keyword="resolving">
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  </entry>
 </entry>
 <entry keyword="pathname delimiter in QNX documentation">
  <topic href="about.html#WINDOWSNOTE" title="Note to Windows users"/>
 </entry>
 <entry keyword="pathname space">
  <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  <entry keyword="and procnto">
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  </entry>
  <entry keyword="defined">
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  </entry>
 </entry>
 <entry keyword="PDP-8">
  <entry keyword="and Neutrino">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="periodic timer">
  <topic href="s1_timer.html#id13" title="Types of timers"/>
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  <entry keyword="example">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="power saving">
   <topic href="s1_timer.html#id70" title="Summary"/>
  </entry>
  <entry keyword="server maintenance">
   <topic href="s1_timer.html#id45" title="Periodic server maintenance cycles"/>
  </entry>
  <entry keyword="servers">
   <topic href="s1_timer.html#id36" title="A server with periodic pulses"/>
  </entry>
  <entry keyword="See also repeating timer"/>
 </entry>
 <entry keyword="philosophy of Neutrino">
  <topic href="s1_msg.html#id9" title="The philosophy of Neutrino"/>
 </entry>
 <entry keyword="physical address">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="pidin">
  <topic href="s1_procs.html#id82" title="A few examples"/>
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
 </entry>
 <entry keyword="platforms">
  <entry keyword="PDP-8">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="polling">
  <entry keyword="for completion of thread">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="timer">
   <topic href="s1_timer.html#id45" title="Periodic server maintenance cycles"/>
  </entry>
 </entry>
 <entry keyword="pool, threads">
 </entry>
 <entry keyword="POOL_FLAG_EXIT_SELF">
  <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
 </entry>
 <entry keyword="POOL_FLAG_USE_SELF">
  <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
 </entry>
 <entry keyword="POSIX">
  <entry keyword="signals">
   <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
  </entry>
 </entry>
 <entry keyword="POSIX thread">
 </entry>
 <entry keyword="_POSIX_DEVDIR_FROM">
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
 </entry>
 <entry keyword="_POSIX_DEVDIR_TO">
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
 </entry>
 <entry keyword="power saving">
  <topic href="s1_timer.html#id70" title="Summary"/>
 </entry>
 <entry keyword="pread()">
  <topic href="s1_resmgr.html#id125" title="Step 2"/>
 </entry>
 <entry keyword="printf()">
  <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
 </entry>
 <entry keyword="priority">
  <entry keyword="boosting">
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  </entry>
  <entry keyword="inversion">
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  </entry>
  <entry keyword="message passing">
   <topic href="s1_msg.html#id54" title="What about priorities?"/>
  </entry>
  <entry keyword="thread analogy">
   <topic href="s1_procs.html#id15" title="Priorities"/>
  </entry>
 </entry>
 <entry keyword="priority inheritance">
  <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  <entry keyword="undoing">
   <topic href="s1_msg.html#id92" title="So what's the trick?"/>
  </entry>
 </entry>
 <entry keyword="priority inversion">
  <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  <entry keyword="defined">
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  </entry>
  <entry keyword="fixed by priority inheritance">
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  </entry>
  <entry keyword="solution">
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  </entry>
  <entry keyword="starving CPU">
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  </entry>
 </entry>
 <entry keyword="process">
  <entry keyword="abstraction">
   <topic href="s1_procs.html#id95" title="Multiple processes"/>
  </entry>
  <entry keyword="aid to maintainability">
   <topic href="s1_procs.html#id51" title="Why processes?"/>
  </entry>
  <entry keyword="aid to reliability">
   <topic href="s1_procs.html#id51" title="Why processes?"/>
  </entry>
  <entry keyword="and threads">
   <topic href="s1_procs.html#id99" title="Multiple threads"/>
  </entry>
  <entry keyword="associating with interrupt handler">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="background">
   <topic href="s1_procs.html#id55" title="Starting a process from the command line"/>
  </entry>
  <entry keyword="child">
   <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
  </entry>
  <entry keyword="consisting of threads">
   <topic href="s1_procs.html#Threads_and_processes" title="Threads and processes"/>
  </entry>
  <entry keyword="context-switch">
   <topic href="s1_procs.html#id51" title="Why processes?"/>
  </entry>
  <entry keyword="coupling">
   <topic href="s1_procs.html#id95" title="Multiple processes"/>
   <topic href="s1_procs.html#id97" title="Multiple processes with shared memory"/>
   <topic href="s1_procs.html#id99" title="Multiple threads"/>
  </entry>
  <entry keyword="creating">
   <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
   <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
   <topic href="s1_procs.html#id59" title="Starting a process with the system() call"/>
  </entry>
  <entry keyword="creating from program">
   <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
   <entry keyword="exec() family">
    <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="fork()">
    <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
    <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
   </entry>
   <entry keyword="spawn() family">
    <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
    <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
   </entry>
   <entry keyword="system()">
    <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
    <topic href="s1_procs.html#id59" title="Starting a process with the system() call"/>
   </entry>
   <entry keyword="vfork()">
    <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
    <topic href="s1_procs.html#id65" title="Starting a process with the vfork() call"/>
   </entry>
  </entry>
  <entry keyword="decoupling">
   <topic href="s1_procs.html#id101" title="Comparisons"/>
  </entry>
  <entry keyword="decoupling of design">
   <topic href="s1_procs.html#id51" title="Why processes?"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="distributability">
   <topic href="s1_procs.html#id101" title="Comparisons"/>
  </entry>
  <entry keyword="fork()">
   <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
  </entry>
  <entry keyword="in system">
   <topic href="s1_procs.html#Threads_and_processes" title="Threads and processes"/>
  </entry>
  <entry keyword="multi-threaded">
   <topic href="s1_procs.html#id10" title="Multi threaded"/>
  </entry>
  <entry keyword="mutex">
   <topic href="s1_procs.html#ntoext" title="Additional Neutrino services"/>
  </entry>
  <entry keyword="network distributed">
   <topic href="s1_procs.html#id101" title="Comparisons"/>
  </entry>
  <entry keyword="parent">
   <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
  </entry>
  <entry keyword="scalability">
   <topic href="s1_procs.html#id101" title="Comparisons"/>
  </entry>
  <entry keyword="shared memory">
   <topic href="s1_procs.html#id97" title="Multiple processes with shared memory"/>
  </entry>
  <entry keyword="single-threaded">
   <topic href="s1_procs.html#id8" title="Single threaded"/>
  </entry>
  <entry keyword="starting">
   <topic href="s1_procs.html#id53" title="Starting a process"/>
  </entry>
  <entry keyword="starting from shell">
   <topic href="s1_procs.html#id55" title="Starting a process from the command line"/>
  </entry>
  <entry keyword="thread">
   <topic href="s1_procs.html#id97" title="Multiple processes with shared memory"/>
   <topic href="s1_procs.html#Fundamentals" title="Process and thread fundamentals"/>
  </entry>
 </entry>
 <entry keyword="process ID">
  <topic href="s1_msg.html#id29" title="Establishing a connection"/>
  <entry keyword="getppid()">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="how to find">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="message passing">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="process manager">
   <topic href="s1_resmgr.html#id15" title="Finding the process manager"/>
  </entry>
 </entry>
 <entry keyword="process IDs">
 </entry>
 <entry keyword="process manager">
  <entry keyword="channel ID">
   <topic href="s1_resmgr.html#id15" title="Finding the process manager"/>
  </entry>
  <entry keyword="finding">
   <topic href="s1_resmgr.html#id15" title="Finding the process manager"/>
  </entry>
  <entry keyword="node descriptor">
   <topic href="s1_resmgr.html#id15" title="Finding the process manager"/>
  </entry>
  <entry keyword="process ID">
   <topic href="s1_resmgr.html#id15" title="Finding the process manager"/>
  </entry>
 </entry>
 <entry keyword="processing interrupts">
  <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
 </entry>
 <entry keyword="procnto">
  <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
 </entry>
 <entry keyword="producer">
  <entry keyword="and consumer">
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
   <entry keyword="state analysis">
    <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
   </entry>
  </entry>
  <entry keyword="and consumer using condvars">
   <entry keyword="example">
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
   </entry>
  </entry>
 </entry>
 <entry keyword="pthread_atfork()">
  <topic href="s1_procs.html#id69" title="So what should you use?"/>
 </entry>
 <entry keyword="pthread_attr_destroy()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
  <topic href="s1_procs.html#id74" title="Thread attribute administration"/>
 </entry>
 <entry keyword="pthread_attr_getdetachstate()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_getguardsize()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_getinheritsched()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_getschedparam()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_getschedpolicy()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_getscope()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_getstackaddr()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_getstacklazy()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_getstacksize()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_init()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
  <topic href="s1_procs.html#id74" title="Thread attribute administration"/>
 </entry>
 <entry keyword="pthread_attr_set() family">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_setdetachstate()">
  <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_setguardsize()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_setinheritsched()">
  <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
  <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_setschedparam()">
  <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
  <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_setschedpolicy()">
  <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
  <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_setscope()">
  <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_setstackaddr()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_setstacklazy()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_setstacksize()">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
 </entry>
 <entry keyword="pthread_attr_t">
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
  <entry keyword="defined">
   <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
  </entry>
 </entry>
 <entry keyword="pthread_barrier_init()">
  <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  <entry keyword="example">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
 </entry>
 <entry keyword="pthread_barrier_wait()">
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_procs.html#sync2term" title="Synchronizing to the termination of a thread"/>
  <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  <entry keyword="example">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
 </entry>
 <entry keyword="pthread_cancel()">
  <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
  <topic href="s1_msg.html#id60" title="What about the other versions?"/>
 </entry>
 <entry keyword="pthread_cond_broadcast()">
  <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
 </entry>
 <entry keyword="pthread_cond_signal()">
  <topic href="s1_procs.html#condvar" title="Condition variables"/>
  <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
  <entry keyword="example">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
  </entry>
 </entry>
 <entry keyword="pthread_cond_t">
  <topic href="s1_procs.html#condvar" title="Condition variables"/>
 </entry>
 <entry keyword="pthread_cond_wait()">
  <topic href="s1_procs.html#condvar" title="Condition variables"/>
  <topic href="s1_procs.html#id109" title="Sleepons versus condvars"/>
  <entry keyword="example">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
  </entry>
 </entry>
 <entry keyword="pthread_create()">
  <topic href="s1_procs.html#id82" title="A few examples"/>
  <topic href="s1_procs.html#id88" title="Joining"/>
  <topic href="s1_procs.html#id67" title="Process creation and threads"/>
  <topic href="s1_procs.html#id71" title="Starting a thread"/>
  <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
  <topic href="s3_qnx2nto.html#id10" title="Thread support"/>
  <entry keyword="example">
   <topic href="s1_procs.html#id82" title="A few examples"/>
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
   <topic href="s1_procs.html#parallel" title="Threads in mathematical operations"/>
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
 </entry>
 <entry keyword="PTHREAD_EXPLICIT_SCHED">
  <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
 </entry>
 <entry keyword="pthread_join()">
  <topic href="s1_procs.html#id88" title="Joining"/>
  <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
  <topic href="s1_procs.html#sync2term" title="Synchronizing to the termination of a thread"/>
  <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
  <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  <entry keyword="example">
   <topic href="s1_procs.html#id88" title="Joining"/>
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="explanation">
   <topic href="s1_procs.html#id88" title="Joining"/>
  </entry>
  <entry keyword="non-blocking">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="timeout">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="with timeout">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
 </entry>
 <entry keyword="pthread_mutex_lock()">
  <topic href="s1_procs.html#ntoext" title="Additional Neutrino services"/>
  <topic href="s1_procs.html#condvar" title="Condition variables"/>
  <topic href="s3_qnx2nto.html#id10" title="Thread support"/>
  <entry keyword="example">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
  </entry>
 </entry>
 <entry keyword="pthread_mutex_timedlock()">
  <topic href="s1_timer.html#id60" title="CLOCK_MONOTONIC"/>
 </entry>
 <entry keyword="pthread_mutex_unlock()">
  <topic href="s1_procs.html#ntoext" title="Additional Neutrino services"/>
  <topic href="s1_procs.html#condvar" title="Condition variables"/>
  <entry keyword="example">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
  </entry>
 </entry>
 <entry keyword="pthread_rwlock_destroy()">
  <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
 </entry>
 <entry keyword="pthread_rwlock_init()">
  <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
 </entry>
 <entry keyword="pthread_rwlock_rdlock()">
  <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
 </entry>
 <entry keyword="pthread_rwlock_t">
  <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
 </entry>
 <entry keyword="pthread_rwlock_tryrdlock()">
  <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
 </entry>
 <entry keyword="pthread_rwlock_unlock()">
  <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
 </entry>
 <entry keyword="pthread_rwlock_wrlock()">
  <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
 </entry>
 <entry keyword="pthread_rwlockattr_destroy()">
  <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
 </entry>
 <entry keyword="pthread_rwlockattr_getpshared()">
  <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
 </entry>
 <entry keyword="pthread_rwlockattr_init()">
  <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
 </entry>
 <entry keyword="pthread_rwlockattr_setpshared()">
  <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
 </entry>
 <entry keyword="pthread_setschedparam()">
  <topic href="s1_procs.html#id15" title="Priorities"/>
  <topic href="s1_msg.html#id92" title="So what's the trick?"/>
 </entry>
 <entry keyword="pthread_setschedprio()">
  <topic href="s1_procs.html#id15" title="Priorities"/>
  <topic href="s1_msg.html#id92" title="So what's the trick?"/>
 </entry>
 <entry keyword="pthread_sleepon_broadcast()">
  <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
  <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
 </entry>
 <entry keyword="pthread_sleepon_lock()">
  <topic href="s1_procs.html#condvar" title="Condition variables"/>
  <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  <entry keyword="example">
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  </entry>
 </entry>
 <entry keyword="pthread_sleepon_signal()">
  <topic href="s1_procs.html#condvar" title="Condition variables"/>
  <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
  <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  <entry keyword="example">
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  </entry>
 </entry>
 <entry keyword="pthread_sleepon_unlock()">
  <topic href="s1_procs.html#condvar" title="Condition variables"/>
  <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  <entry keyword="example">
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  </entry>
 </entry>
 <entry keyword="pthread_sleepon_wait()">
  <topic href="s1_procs.html#condvar" title="Condition variables"/>
  <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  <entry keyword="example">
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
  </entry>
 </entry>
 <entry keyword="PTHREAD_STACK_LAZY">
  <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
 </entry>
 <entry keyword="PTHREAD_STACK_NOTLAZY">
  <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
 </entry>
 <entry keyword="pthread_t">
  <topic href="s1_procs.html#id88" title="Joining"/>
  <topic href="s1_procs.html#id71" title="Starting a thread"/>
 </entry>
 <entry keyword="pthreads, defined">
  <topic href="s3_glossary.html" title="Glossary"/>
 </entry>
 <entry keyword="pulse">
  <entry keyword="content">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
   <topic href="s1_msg.html#Pulses" title="Pulses"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   <topic href="s1_timer.html#main" title="main()"/>
   <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="excluding messages">
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="functions">
   <entry keyword="pulse_attach()">
    <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
   </entry>
  </entry>
  <entry keyword="how to tell from messages">
   <topic href="s1_timer.html#notes" title="Notes"/>
  </entry>
  <entry keyword="MsgReceive()">
   <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
  </entry>
  <entry keyword="MsgReceivePulse()">
   <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
  </entry>
  <entry keyword="payload content">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
  <entry keyword="POSIX">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="_PULSE_CODE_UNBLOCK">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
  <entry keyword="range of code member">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
  <entry keyword="receiving">
   <topic href="s1_msg.html#id65" title="Receiving a pulse message"/>
  </entry>
  <entry keyword="receiving pulses only">
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="special">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="struct sigevent">
   <topic href="s1_timer.html#id70" title="Summary"/>
  </entry>
  <entry keyword="synthetic unblock">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
  <entry keyword="timeout example">
   <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   <topic href="s1_timer.html#main" title="main()"/>
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="timers">
   <topic href="s1_timer.html#id15" title="Notification schemes"/>
  </entry>
  <entry keyword="using the code member">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
  <entry keyword="using the value member">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
  <entry keyword="versus signals">
   <topic href="s1_timer.html#id27" title="Signal notification"/>
  </entry>
 </entry>
 <entry keyword="pulse_attach()">
  <topic href="s1_resmgr.html#id38" title="The base layer"/>
  <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
 </entry>
 <entry keyword="_PULSE_CODE_UNBLOCK">
  <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
 </entry>
 <entry keyword="pulse_detach()">
  <topic href="s1_resmgr.html#id38" title="The base layer"/>
 </entry>
 <entry keyword="Qnet">
  <topic href="preface.html#Krten" title="About Rob Krten"/>
  <topic href="s1_msg.html#id82" title="Impact on ConnectAttach()"/>
  <topic href="s1_msg.html#id84" title="Impact on MsgDeliverEvent()"/>
  <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
  <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
  <topic href="s1_msg.html#id42" title="More about channels"/>
  <topic href="s1_resmgr.html#dsize" title="The data structure sizing parameters"/>
 </entry>
 <entry keyword="QNX">
  <entry keyword="advantages of architecture">
   <topic href="preface.html" title="Preface to the First Edition by Rob Krten"/>
  </entry>
  <entry keyword="anecdote">
   <topic href="preface.html" title="Preface to the First Edition by Rob Krten"/>
  </entry>
  <entry keyword="applications">
   <topic href="preface.html" title="Preface to the First Edition by Rob Krten"/>
  </entry>
  <entry keyword="history of">
   <topic href="preface.html#id3" title="A little history"/>
  </entry>
  <entry keyword="on 8088 CPUs">
   <topic href="preface.html#id3" title="A little history"/>
  </entry>
  <entry keyword="QNX 2">
   <topic href="preface.html#id3" title="A little history"/>
  </entry>
  <entry keyword="QNX 4">
   <topic href="preface.html#id3" title="A little history"/>
  </entry>
 </entry>
 <entry keyword="QNX Software Systems">
  <topic href="s3_glossary.html" title="Glossary"/>
  <entry keyword="website">
   <topic href="s3_help.html#id23" title="Contact technical support"/>
  </entry>
 </entry>
 <entry keyword="qnx_name_attach() (QNX 4)">
  <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
 </entry>
 <entry keyword="qnx_name_locate() (QNX 4)">
  <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
 </entry>
 <entry keyword="qnx_proxy_attach() (QNX 4)">
  <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
 </entry>
 <entry keyword="QSS, defined">
  <topic href="s3_glossary.html" title="Glossary"/>
 </entry>
 <entry keyword="Quantum Software Systems Ltd.">
  <topic href="preface.html#id3" title="A little history"/>
 </entry>
 <entry keyword="queue">
  <entry keyword="RUNNING">
   <topic href="s1_timer.html#id13" title="Types of timers"/>
  </entry>
  <entry keyword="timer">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="timer queue">
   <topic href="s1_timer.html#id70" title="Summary"/>
  </entry>
 </entry>
 <entry keyword="QUNIX">
  <topic href="preface.html#id3" title="A little history"/>
  <topic href="preface.html" title="Preface to the First Edition by Rob Krten"/>
 </entry>
 <entry keyword="read()">
  <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  <topic href="s1_resmgr.html#id21" title="Client summary"/>
  <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
  <topic href="s1_resmgr.html#id28" title="Connect messages"/>
  <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_resmgr.html#id30" title="I/O messages"/>
  <topic href="s1_msg.html#network_msg" title="Message passing over a network"/>
  <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
  <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
  <topic href="s3_qnx2nto.html#devctl" title="Translating messages to devctl() or _IO_MSG"/>
  <topic href="s3_qnx2nto.html#id26" title="Translating messages to standard file-descriptor-based POSIX calls"/>
 </entry>
 <entry keyword="readers/writer locks">
 </entry>
 <entry keyword="READY">
  <topic href="s1_procs.html#id44" title="READY"/>
  <topic href="s1_procs.html#id46" title="The blocked states"/>
 </entry>
 <entry keyword="realtime">
  <entry keyword="interrupts">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  </entry>
  <entry keyword="priority inversion">
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  </entry>
 </entry>
 <entry keyword="realtime clock">
  <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
  <entry keyword="getting and setting">
   <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
  </entry>
  <entry keyword="interrupts">
   <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
  </entry>
 </entry>
 <entry keyword="receive ID">
  <topic href="s1_msg.html#id35" title="Message handling"/>
  <topic href="s1_msg.html#id47" title="Replying to the client"/>
  <entry keyword="content">
   <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="duplication">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
  <entry keyword="example of use">
   <topic href="s1_msg.html#id37" title="Server framework"/>
  </entry>
  <entry keyword="MsgReply()">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="special use">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="when valid">
   <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
  </entry>
 </entry>
 <entry keyword="Receive() (QNX 4)">
  <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
  <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
 </entry>
 <entry keyword="receive-blocked">
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  <entry keyword="diagram">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
 </entry>
 <entry keyword="receiving a message">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="registering">
  <entry keyword="pathname">
   <topic href="s1_resmgr.html#Resmgr_view" title="The resource manager's view"/>
  </entry>
 </entry>
 <entry keyword="relative timer">
  <topic href="s1_timer.html#id70" title="Summary"/>
  <topic href="s1_timer.html#id13" title="Types of timers"/>
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   <topic href="s1_timer.html#main" title="main()"/>
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
 </entry>
 <entry keyword="rename()">
  <topic href="s1_resmgr.html#id28" title="Connect messages"/>
 </entry>
 <entry keyword="rendezvous">
  <entry keyword="and thread synchronization">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
 </entry>
 <entry keyword="repeating timer, defined">
  <topic href="s3_glossary.html" title="Glossary"/>
 </entry>
 <entry keyword="Reply() (QNX 4)">
  <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
 </entry>
 <entry keyword="reply-blocked">
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  <entry keyword="diagram">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
 </entry>
 <entry keyword="reply-driven model">
  <topic href="s1_msg.html#id49" title="Not replying to the client"/>
  <topic href="s1_msg.html#id12" title="Server/subserver"/>
  <entry keyword="example">
   <topic href="s1_msg.html#id18" title="Reply-driven (server/subserver)"/>
  </entry>
  <entry keyword="important subtlety">
   <topic href="s1_msg.html#id20" title="An important subtlety"/>
  </entry>
 </entry>
 <entry keyword="replying to a message, defined">
  <topic href="s3_glossary.html" title="Glossary"/>
 </entry>
 <entry keyword="resmgr">
 </entry>
 <entry keyword="resmgr_attach()">
  <topic href="s1_resmgr.html#alphalist" title="Alphabetical listing of connect and I/O functions"/>
  <topic href="s1_resmgr.html#resmgr_attr" title="resmgr_attr_t control structure"/>
  <topic href="s1_resmgr.html#structure" title="Resource manager structure"/>
  <topic href="s1_resmgr.html#id114" title="Step 3"/>
  <topic href="s1_resmgr.html#id38" title="The base layer"/>
  <topic href="s1_resmgr.html#id48" title="The flags parameter"/>
  <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
  <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
 </entry>
 <entry keyword="resmgr_attr_t">
  <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
  <topic href="s1_resmgr.html#resmgr_attr" title="resmgr_attr_t control structure"/>
  <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
 </entry>
 <entry keyword="resmgr_bind_ocb()">
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
 </entry>
 <entry keyword="resmgr_connect_funcs_t">
  <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
  <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
 </entry>
 <entry keyword="_RESMGR_CONNECT_NFUNCS">
  <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
 </entry>
 <entry keyword="resmgr_context_t">
  <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
  <topic href="s1_resmgr.html#general" title="General notes"/>
  <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
  <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
  <topic href="s1_resmgr.html#dsize" title="The data structure sizing parameters"/>
  <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
 </entry>
 <entry keyword="_RESMGR_DEFAULT">
  <topic href="s1_resmgr.html#general" title="General notes"/>
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
  <topic href="s1_resmgr.html#id159" title="Step 1"/>
 </entry>
 <entry keyword="resmgr_detach()">
  <topic href="s1_resmgr.html#id38" title="The base layer"/>
 </entry>
 <entry keyword="_RESMGR_ERRNO (errno)">
  <topic href="s1_resmgr.html#general" title="General notes"/>
 </entry>
 <entry keyword="_RESMGR_FLAG_AFTER">
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="_RESMGR_FLAG_BEFORE">
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="_RESMGR_FLAG_DIR">
  <topic href="s1_resmgr.html#rc_main" title="main() and declarations"/>
  <topic href="s1_resmgr.html#returning_dirents" title="Returning directory entries"/>
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="_RESMGR_FLAG_FTYPEALL">
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="_RESMGR_FLAG_FTYPEONLY">
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="_RESMGR_FLAG_OPAQUE">
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="_RESMGR_FLAG_SELF">
  <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
 </entry>
 <entry keyword="RESMGR_HANDLE_T">
  <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
 </entry>
 <entry keyword="resmgr_io_funcs_t">
  <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
  <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
  <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
 </entry>
 <entry keyword="_RESMGR_IO_NFUNCS">
  <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
 </entry>
 <entry keyword="resmgr_msgread()">
  <topic href="s1_resmgr.html#id146" title="Step 3"/>
  <topic href="s1_resmgr.html#id38" title="The base layer"/>
 </entry>
 <entry keyword="resmgr_msgreadv()">
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
  <topic href="s1_resmgr.html#io_write" title="io_write()"/>
  <topic href="s1_resmgr.html#id146" title="Step 3"/>
  <topic href="s1_resmgr.html#id38" title="The base layer"/>
  <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
 </entry>
 <entry keyword="resmgr_msgwrite()">
  <topic href="s1_resmgr.html#id38" title="The base layer"/>
 </entry>
 <entry keyword="resmgr_msgwritev()">
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
  <topic href="s1_resmgr.html#id38" title="The base layer"/>
 </entry>
 <entry keyword="_RESMGR_NOREPLY">
  <topic href="s1_resmgr.html#blocking_in_resmgr" title="Blocking within the resource manager"/>
  <topic href="s1_resmgr.html#general" title="General notes"/>
  <topic href="s1_resmgr.html#id137" title="Step 9"/>
 </entry>
 <entry keyword="_RESMGR_NPARTS()">
  <topic href="s1_resmgr.html#general" title="General notes"/>
  <topic href="s1_resmgr.html#id165" title="Step 4"/>
 </entry>
 <entry keyword="RESMGR_OCB_T">
  <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
 </entry>
 <entry keyword="resmgr_open_bind()">
  <topic href="s1_resmgr.html#id38" title="The base layer"/>
  <topic href="s1_resmgr.html#general_flow" title="The general flow of a resource manager"/>
 </entry>
 <entry keyword="_RESMGR_PTR()">
  <topic href="s1_resmgr.html#general" title="General notes"/>
  <topic href="s1_resmgr.html#id165" title="Step 4"/>
 </entry>
 <entry keyword="_RESMGR_STATUS">
  <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
  <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
  <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
  <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
  <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
  <topic href="s1_resmgr.html#io_link" title="io_link()"/>
  <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
  <topic href="s1_resmgr.html#io_lock_ocb" title="io_lock_ocb()"/>
  <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
  <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
  <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
  <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
  <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
  <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
  <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
  <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
  <topic href="s1_resmgr.html#io_space" title="io_space()"/>
  <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
  <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
  <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
  <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
  <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
  <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
  <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
  <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
 </entry>
 <entry keyword="resolution of timebase">
  <entry keyword="adjusting">
   <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
  </entry>
 </entry>
 <entry keyword="resource manager">
  <topic href="s1_resmgr.html#What_is" title="What is a resource manager?"/>
  <entry keyword="/dev/null">
   <topic href="s1_resmgr.html#the_resource_manager_library" title="The resource manager library"/>
  </entry>
  <entry keyword="advanced topics">
   <topic href="s1_resmgr.html#Advanced" title="Advanced topics"/>
  </entry>
  <entry keyword="allocating OCBs">
   <topic href="s1_resmgr.html#id184" title="More efficient allocation"/>
  </entry>
  <entry keyword="and fork()">
   <topic href="s1_procs.html#id69" title="So what should you use?"/>
  </entry>
  <entry keyword="as a means of advertising ND/PID/CHID">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
  </entry>
  <entry keyword="binding mount structure">
   <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
  </entry>
  <entry keyword="blocking">
   <topic href="s1_resmgr.html#blocking_in_resmgr" title="Blocking within the resource manager"/>
   <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
  </entry>
  <entry keyword="characteristics">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  </entry>
  <entry keyword="client">
   <topic href="s1_resmgr.html#Client_view" title="The client's view"/>
   <entry keyword="summary">
    <topic href="s1_resmgr.html#id21" title="Client summary"/>
   </entry>
  </entry>
  <entry keyword="clients">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  </entry>
  <entry keyword="combined messages">
   <topic href="s1_resmgr.html#combine_messages" title="Combine messages"/>
   <topic href="s1_resmgr.html#should_be_connect" title="Messages that  be connect messages but aren't"/>
  </entry>
  <entry keyword="connecting">
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  </entry>
  <entry keyword="connection ID">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  </entry>
  <entry keyword="constants">
   <entry keyword="DCMD_AUDIO_GET_SAMPLE_RATE">
    <topic href="s1_resmgr.html#devctl_simple2" title="An io_devctl() example that deals with data"/>
   </entry>
   <entry keyword="DCMD_AUDIO_SET_SAMPLE_RATE">
    <topic href="s1_resmgr.html#devctl_simple2" title="An io_devctl() example that deals with data"/>
   </entry>
   <entry keyword="F_ALLOCSP">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="F_FREESP">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="_FTYPE_ANY">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_FTYPE_MQUEUE">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_IO_CHMOD">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
   </entry>
   <entry keyword="_IO_CHOWN">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="_IO_CLOSE_DUP">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
   <entry keyword="_IO_CONNECT">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
   <entry keyword="_IO_CONNECT_COMBINE">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="_IO_CONNECT_COMBINE_CLOSE">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#should_be_connect" title="Messages that  be connect messages but aren't"/>
   </entry>
   <entry keyword="_IO_CONNECT_LINK">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
   </entry>
   <entry keyword="_IO_CONNECT_MKNOD">
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
   </entry>
   <entry keyword="_IO_CONNECT_MOUNT">
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
   </entry>
   <entry keyword="_IO_CONNECT_OPEN">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="_IO_CONNECT_READLINK">
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
   </entry>
   <entry keyword="_IO_CONNECT_RENAME">
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
   </entry>
   <entry keyword="_IO_CONNECT_UNLINK">
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="_IO_DEVCTL">
    <topic href="s1_resmgr.html#devctl_simple" title="A simple io_devctl() example"/>
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="_IO_DUP">
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
   </entry>
   <entry keyword="_IO_FDINFO">
    <topic href="s1_resmgr.html#io_fdinfo" title="io_fdinfo()"/>
   </entry>
   <entry keyword="_IO_FLAG_RD">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="_IO_FLAG_WR">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="_IO_LSEEK">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
   <entry keyword="_IO_MMAP">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="_IO_MSG">
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
   </entry>
   <entry keyword="_IO_NOTIFY">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="_IO_OPENFD">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="_IO_READ">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#id112" title="Step 2"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
   <entry keyword="_IO_SET_CONNECT_RET">
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="_IO_SET_FDINFO_LEN">
    <topic href="s1_resmgr.html#io_fdinfo" title="io_fdinfo()"/>
   </entry>
   <entry keyword="_IO_SET_PATHCONF_VALUE">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="_IO_SET_READ_NBYTES">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
   </entry>
   <entry keyword="_IO_SET_WRITE_NBYTES">
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="_IO_SPACE">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="_IO_STAT">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
   </entry>
   <entry keyword="_IO_SYNC">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="_IO_UTIME">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="_IO_WRITE">
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="_IO_XTYPE_NONE">
    <topic href="s1_resmgr.html#id125" title="Step 2"/>
   </entry>
   <entry keyword="_IO_XTYPE_OFFSET">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#id125" title="Step 2"/>
    <topic href="s1_resmgr.html#id133" title="Step 7"/>
    <topic href="s1_resmgr.html#id154" title="Step 7"/>
   </entry>
   <entry keyword="IOFUNC_ATTR_ATIME">
    <topic href="s1_resmgr.html#id131" title="Step 6"/>
    <topic href="s1_resmgr.html#id154" title="Step 7"/>
   </entry>
   <entry keyword="IOFUNC_ATTR_DIRTY_TIME">
    <topic href="s1_resmgr.html#id131" title="Step 6"/>
   </entry>
   <entry keyword="IOFUNC_ATTR_MTIME">
    <topic href="s1_resmgr.html#id154" title="Step 7"/>
   </entry>
   <entry keyword="IOFUNC_MOUNT_32BIT">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="IOFUNC_MOUNT_FLAGS_PRIVATE">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="_IOFUNC_NFUNCS">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="IOFUNC_OCB_FLAGS_PRIVATE">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="IOFUNC_OCB_MMAP">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="IOFUNC_OCB_PRIVILEGED">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="IOFUNC_OCB_T">
    <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
   </entry>
   <entry keyword="IOFUNC_PC_CHOWN_RESTRICTED">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="IOFUNC_PC_LINK_DIR">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="IOFUNC_PC_NO_TRUNC">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="IOFUNC_PC_SYNC_IO">
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="_POSIX_DEVDIR_FROM">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="_POSIX_DEVDIR_TO">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="_RESMGR_DEFAULT">
    <topic href="s1_resmgr.html#general" title="General notes"/>
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#id159" title="Step 1"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_AFTER">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_BEFORE">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_DIR">
    <topic href="s1_resmgr.html#rc_main" title="main() and declarations"/>
    <topic href="s1_resmgr.html#returning_dirents" title="Returning directory entries"/>
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_FTYPEALL">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_FTYPEONLY">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_OPAQUE">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_FLAG_SELF">
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   </entry>
   <entry keyword="_RESMGR_NOREPLY">
    <topic href="s1_resmgr.html#blocking_in_resmgr" title="Blocking within the resource manager"/>
    <topic href="s1_resmgr.html#general" title="General notes"/>
    <topic href="s1_resmgr.html#id137" title="Step 9"/>
   </entry>
   <entry keyword="_RESMGR_STATUS">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
    <topic href="s1_resmgr.html#io_lock_ocb" title="io_lock_ocb()"/>
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
    <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
    <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="SH_COMPAT">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="SH_DENYNO">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="SH_DENYRD">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="SH_DENYRW">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
   <entry keyword="SH_DENYWR">
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
   </entry>
  </entry>
  <entry keyword="context blocks">
   <topic href="s1_resmgr.html#id38" title="The base layer"/>
  </entry>
  <entry keyword="cookbook">
   <topic href="s1_resmgr.html#examples" title="Examples"/>
  </entry>
  <entry keyword="custom">
   <topic href="s1_resmgr.html#Writing" title="Writing a resource manager"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
   <topic href="s1_resmgr.html#What_is" title="What is a resource manager?"/>
  </entry>
  <entry keyword="design">
   <topic href="s1_resmgr.html#id17" title="Handling directories"/>
  </entry>
  <entry keyword="device numbers and inodes">
   <topic href="s1_resmgr.html#dev_inode_rdev" title="Of device numbers, inodes, and our friend rdev"/>
  </entry>
  <entry keyword="domain of authority">
   <topic href="s1_resmgr.html#id24" title="Registering a pathname"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_resmgr.html#examples" title="Examples"/>
   <topic href="s1_resmgr.html#skeleton" title="The basic skeleton of a resource manager"/>
   <entry keyword="io_devctl()">
    <topic href="s1_resmgr.html#devctl_simple" title="A simple io_devctl() example"/>
    <topic href="s1_resmgr.html#devctl_simple2" title="An io_devctl() example that deals with data"/>
   </entry>
   <entry keyword="io_open() handler">
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
   </entry>
   <entry keyword="io_read()">
    <topic href="s1_resmgr.html#read_simple" title="A simple io_read() example"/>
    <topic href="s1_resmgr.html#id121" title="The code"/>
   </entry>
   <entry keyword="io_write()">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
   </entry>
   <entry keyword="returning data to a client">
    <topic href="s1_resmgr.html#read_simple" title="A simple io_read() example"/>
    <topic href="s1_resmgr.html#id121" title="The code"/>
   </entry>
  </entry>
  <entry keyword="extended OCB">
   <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
  </entry>
  <entry keyword="extending attributes">
   <topic href="s1_resmgr.html#extattr" title="Extending the attributes structure"/>
  </entry>
  <entry keyword="file descriptor">
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  </entry>
  <entry keyword="file descriptors">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  </entry>
  <entry keyword="file streams">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
  </entry>
  <entry keyword="filesystem example">
   <topic href="s1_resmgr.html#id8" title="Filesystem"/>
  </entry>
  <entry keyword="finding">
   <topic href="s1_resmgr.html#id13" title="Finding the server"/>
  </entry>
  <entry keyword="functions">
   <entry keyword="connect">
    <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
   </entry>
   <entry keyword="custom handlers">
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
   </entry>
   <entry keyword="default">
    <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
   </entry>
   <entry keyword="default handlers">
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
    <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
   </entry>
   <entry keyword="_DEVCTL_DATA()">
    <topic href="s1_resmgr.html#id168" title="Step 1"/>
   </entry>
   <entry keyword="dispatch_create()">
    <topic href="s1_resmgr.html#skeleton" title="The basic skeleton of a resource manager"/>
   </entry>
   <entry keyword="I/O">
    <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
   </entry>
   <entry keyword="io_chmod()">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
   </entry>
   <entry keyword="io_chown()">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="io_close()">
    <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
   </entry>
   <entry keyword="io_close_dup()">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
   </entry>
   <entry keyword="io_close_ocb()">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
   </entry>
   <entry keyword="io_devctl()">
    <topic href="s1_resmgr.html#devctl_simple" title="A simple io_devctl() example"/>
    <topic href="s1_resmgr.html#devctl_simple2" title="An io_devctl() example that deals with data"/>
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
    <topic href="s1_resmgr.html#id159" title="Step 1"/>
    <topic href="s1_resmgr.html#id168" title="Step 1"/>
    <topic href="s1_resmgr.html#id161" title="Step 2"/>
   </entry>
   <entry keyword="io_dup()">
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
   </entry>
   <entry keyword="io_fdinfo()">
    <topic href="s1_resmgr.html#io_fdinfo" title="io_fdinfo()"/>
   </entry>
   <entry keyword="io_link()">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
   </entry>
   <entry keyword="io_lock()">
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
   </entry>
   <entry keyword="io_lock_ocb()">
    <topic href="s1_resmgr.html#io_lock_ocb" title="io_lock_ocb()"/>
    <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
   </entry>
   <entry keyword="io_lseek()">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
    <topic href="s1_resmgr.html#id193" title="Offsets"/>
   </entry>
   <entry keyword="io_mknod()">
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
   </entry>
   <entry keyword="io_mmap()">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="io_mount()">
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
   </entry>
   <entry keyword="io_msg()">
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
   </entry>
   <entry keyword="io_notify()">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="io_open()">
    <topic href="s1_resmgr.html#alphalist" title="Alphabetical listing of connect and I/O functions"/>
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
    <topic href="s1_resmgr.html#id182" title="OCB monitor"/>
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
    <topic href="s1_resmgr.html#general_flow" title="The general flow of a resource manager"/>
    <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
   </entry>
   <entry keyword="io_openfd()">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="io_pathconf()">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="io_power()">
    <topic href="s1_resmgr.html#io_power" title="io_power()"/>
   </entry>
   <entry keyword="_IO_READ">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
   </entry>
   <entry keyword="io_read()">
    <topic href="s1_resmgr.html#read_simple" title="A simple io_read() example"/>
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
    <topic href="s1_resmgr.html#blocking_in_resmgr" title="Blocking within the resource manager"/>
    <topic href="s1_resmgr.html#dataareasize" title="Data area size considerations"/>
    <topic href="s1_resmgr.html#id139" title="Effective use of other messaging functions"/>
    <topic href="s1_resmgr.html#id189" title="Generally speaking …"/>
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#id193" title="Offsets"/>
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
    <topic href="s1_resmgr.html#returning_dirents" title="Returning directory entries"/>
    <topic href="s1_resmgr.html#id165" title="Step 4"/>
    <topic href="s1_resmgr.html#id131" title="Step 6"/>
    <topic href="s1_resmgr.html#id154" title="Step 7"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
   <entry keyword="io_readlink()">
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
   </entry>
   <entry keyword="io_rename()">
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
   </entry>
   <entry keyword="_IO_SET_WRITE_NBYTES()">
    <topic href="s1_resmgr.html#id152" title="Step 6"/>
    <topic href="s1_resmgr.html#id156" title="Step 8"/>
   </entry>
   <entry keyword="io_shutdown()">
    <topic href="s1_resmgr.html#io_shutdown" title="io_shutdown()"/>
   </entry>
   <entry keyword="io_space()">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="io_stat()">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
    <topic href="s1_resmgr.html#id131" title="Step 6"/>
   </entry>
   <entry keyword="io_sync()">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="io_unblock()">
    <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
    <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
   <entry keyword="io_unlink()">
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="io_unlock_ocb()">
    <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
   </entry>
   <entry keyword="io_utime()">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="io_write()">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
    <topic href="s1_resmgr.html#id178" title="Important note"/>
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
    <topic href="s1_resmgr.html#id165" title="Step 4"/>
   </entry>
   <entry keyword="iofunc_chmod_default()">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
   </entry>
   <entry keyword="iofunc_chown()">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="iofunc_chown_default()">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="iofunc_close_dup()">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
   </entry>
   <entry keyword="iofunc_close_dup_default()">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
   </entry>
   <entry keyword="iofunc_close_ocb_default()">
    <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
   </entry>
   <entry keyword="iofunc_devctl()">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="iofunc_devctl_default()">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#id159" title="Step 1"/>
   </entry>
   <entry keyword="iofunc_func_init()">
    <topic href="s1_resmgr.html#alphalist" title="Alphabetical listing of connect and I/O functions"/>
    <topic href="s1_resmgr.html#examples" title="Examples"/>
    <topic href="s1_resmgr.html#your_functions" title="Putting in your own functions"/>
    <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
    <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
    <topic href="s1_resmgr.html#id159" title="Step 1"/>
    <topic href="s1_resmgr.html#id112" title="Step 2"/>
   </entry>
   <entry keyword="iofunc_link()">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
   </entry>
   <entry keyword="iofunc_lock_default()">
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
    <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
   </entry>
   <entry keyword="iofunc_lock_ocb_default()">
    <topic href="s1_resmgr.html#io_lock_ocb" title="io_lock_ocb()"/>
    <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
   </entry>
   <entry keyword="iofunc_lseek()">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
   </entry>
   <entry keyword="iofunc_lseek_default()">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
   </entry>
   <entry keyword="iofunc_mknod()">
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
   </entry>
   <entry keyword="iofunc_mmap()">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="iofunc_mmap_default()">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
    <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
   </entry>
   <entry keyword="iofunc_notify()">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="iofunc_notify_remove()">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="iofunc_notify_trigger()">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="iofunc_ocb_attach()">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="iofunc_ocb_calloc()">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="iofunc_open()">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="iofunc_open_default()">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="iofunc_openfd()">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="iofunc_openfd_default()">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="iofunc_pathconf()">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="iofunc_pathconf_default()">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="iofunc_read_default()">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
   </entry>
   <entry keyword="iofunc_read_verify()">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#id123" title="Step 1"/>
    <topic href="s1_resmgr.html#id125" title="Step 2"/>
   </entry>
   <entry keyword="iofunc_readlink()">
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
   </entry>
   <entry keyword="iofunc_rename()">
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
   </entry>
   <entry keyword="iofunc_space_verify()">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="iofunc_stat()">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
   </entry>
   <entry keyword="iofunc_stat_default()">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
    <topic href="s1_resmgr.html#id131" title="Step 6"/>
   </entry>
   <entry keyword="iofunc_sync()">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="iofunc_sync_default()">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="iofunc_sync_verify()">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="iofunc_unblock()">
    <topic href="s1_resmgr.html#io_unblock_Connect" title="io_unblock() [CONNECT]"/>
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
   <entry keyword="iofunc_unblock_default()">
    <topic href="s1_resmgr.html#io_unblock_IO" title="io_unblock() [I/O]"/>
   </entry>
   <entry keyword="iofunc_unlink()">
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="iofunc_unlock_ocb_default()">
    <topic href="s1_resmgr.html#io_unlock_ocb" title="io_unlock_ocb()"/>
    <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
   </entry>
   <entry keyword="iofunc_utime_default()">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="iofunc_utimes()">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="iofunc_write_default()">
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="iofunc_write_verify()">
    <topic href="s1_resmgr.html#write_simple" title="A simple io_write() example"/>
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="resgmr_open_bind()">
    <topic href="s1_resmgr.html#general_flow" title="The general flow of a resource manager"/>
   </entry>
   <entry keyword="resmgr_attach()">
    <topic href="s1_resmgr.html#structure" title="Resource manager structure"/>
    <topic href="s1_resmgr.html#id114" title="Step 3"/>
    <topic href="s1_resmgr.html#id48" title="The flags parameter"/>
    <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
    <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
   </entry>
   <entry keyword="resmgr_bind_ocb()">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
   </entry>
   <entry keyword="resmgr_msgread()">
    <topic href="s1_resmgr.html#id146" title="Step 3"/>
   </entry>
   <entry keyword="resmgr_msgreadv()">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
    <topic href="s1_resmgr.html#id146" title="Step 3"/>
    <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
   </entry>
   <entry keyword="resmgr_msgwritev()">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
  </entry>
  <entry keyword="future expansion capabilities">
   <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
  </entry>
  <entry keyword="gate keeper">
   <topic href="s1_resmgr.html#general_flow" title="The general flow of a resource manager"/>
  </entry>
  <entry keyword="handler routines">
   <topic href="s1_resmgr.html#general" title="General notes"/>
   <topic href="s1_resmgr.html#routines" title="Handler routines"/>
   <entry keyword="context">
    <topic href="s1_resmgr.html#general" title="General notes"/>
   </entry>
   <entry keyword="messages">
    <topic href="s1_resmgr.html#cnotes" title="Connect functions notes"/>
   </entry>
  </entry>
  <entry keyword="handlers">
   <entry keyword="connect functions">
    <topic href="s1_resmgr.html#alphalist" title="Alphabetical listing of connect and I/O functions"/>
   </entry>
   <entry keyword="I/O functions">
    <topic href="s1_resmgr.html#alphalist" title="Alphabetical listing of connect and I/O functions"/>
   </entry>
   <entry keyword="unblocking">
    <topic href="s1_resmgr.html#alphalist" title="Alphabetical listing of connect and I/O functions"/>
   </entry>
  </entry>
  <entry keyword="handling directories">
   <topic href="s1_resmgr.html#id17" title="Handling directories"/>
  </entry>
  <entry keyword="header as first part of message">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="initializing a connection">
   <topic href="s1_resmgr.html#general_flow" title="The general flow of a resource manager"/>
  </entry>
  <entry keyword="internal context">
   <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
  </entry>
  <entry keyword="library">
   <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
   <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
   <topic href="s1_resmgr.html#the_resource_manager_library" title="The resource manager library"/>
   <entry keyword="base layer">
    <topic href="s1_resmgr.html#id36" title="Behind the scenes at the library"/>
    <topic href="s1_resmgr.html#id38" title="The base layer"/>
   </entry>
   <entry keyword="POSIX layer">
    <topic href="s1_resmgr.html#id36" title="Behind the scenes at the library"/>
   </entry>
  </entry>
  <entry keyword="macros">
   <entry keyword="_RESMGR_ERRNO() (deprecated)">
    <topic href="s1_resmgr.html#general" title="General notes"/>
   </entry>
   <entry keyword="_RESMGR_NPARTS()">
    <topic href="s1_resmgr.html#general" title="General notes"/>
    <topic href="s1_resmgr.html#id165" title="Step 4"/>
   </entry>
   <entry keyword="_RESMGR_PTR()">
    <topic href="s1_resmgr.html#general" title="General notes"/>
    <topic href="s1_resmgr.html#id165" title="Step 4"/>
   </entry>
  </entry>
  <entry keyword="message passing">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="messages">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
   <topic href="s1_resmgr.html#dsize" title="The data structure sizing parameters"/>
   <entry keyword="combine">
    <topic href="s1_resmgr.html#io_lock_ocb" title="io_lock_ocb()"/>
   </entry>
   <entry keyword="combined">
    <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
   </entry>
   <entry keyword="connect">
    <topic href="s1_resmgr.html#id28" title="Connect messages"/>
    <topic href="s1_resmgr.html#id13" title="Finding the server"/>
    <topic href="s1_resmgr.html#should_be_connect" title="Messages that  be connect messages but aren't"/>
   </entry>
   <entry keyword="creating custom">
    <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
   </entry>
   <entry keyword="handling">
    <topic href="s1_resmgr.html#id36" title="Behind the scenes at the library"/>
   </entry>
   <entry keyword="I/O">
    <topic href="s1_resmgr.html#id30" title="I/O messages"/>
   </entry>
   <entry keyword="_IO_DEVCTL">
    <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
   </entry>
   <entry keyword="_IO_MSG">
    <topic href="s1_resmgr.html#id45" title="The other_func message handler"/>
   </entry>
   <entry keyword="other">
    <topic href="s1_resmgr.html#id32" title="Three groups, really"/>
   </entry>
   <entry keyword="processing">
    <topic href="s1_resmgr.html#id67" title="Locking, unlocking, and combine message handling"/>
   </entry>
  </entry>
  <entry keyword="mountpoints">
   <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
  </entry>
  <entry keyword="multiple entries">
   <topic href="s1_resmgr.html#id24" title="Registering a pathname"/>
  </entry>
  <entry keyword="OCB monitoring">
   <topic href="s1_resmgr.html#id182" title="OCB monitor"/>
  </entry>
  <entry keyword="ordering">
   <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
  </entry>
  <entry keyword="ordering in pathname space">
   <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
  </entry>
  <entry keyword="outcalls">
   <topic href="s1_resmgr.html#general_flow" title="The general flow of a resource manager"/>
  </entry>
  <entry keyword="overriding allocation functions">
   <topic href="s1_resmgr.html#extocb" title="Extending the OCB"/>
  </entry>
  <entry keyword="pathname">
   <topic href="s1_resmgr.html#Resmgr_view" title="The resource manager's view"/>
  </entry>
  <entry keyword="POSIX layer">
   <topic href="s1_resmgr.html#posixdata" title="POSIX-layer data structures"/>
   <topic href="s1_resmgr.html#id40" title="The POSIX layer"/>
  </entry>
  <entry keyword="program flow">
   <topic href="s1_resmgr.html#general_flow" title="The general flow of a resource manager"/>
  </entry>
  <entry keyword="receiving messages">
   <topic href="s1_resmgr.html#id26" title="Handling messages"/>
  </entry>
  <entry keyword="registering">
   <topic href="s1_resmgr.html#resmgr_attach" title="The resmgr_attach() function and its parameters"/>
   <topic href="s1_resmgr.html#Resmgr_view" title="The resource manager's view"/>
  </entry>
  <entry keyword="resolving">
   <topic href="s1_resmgr.html#id24" title="Registering a pathname"/>
   <topic href="s1_resmgr.html#id19" title="Union'd filesystems"/>
  </entry>
  <entry keyword="returning directory entries">
   <topic href="s1_resmgr.html#returning_dirents" title="Returning directory entries"/>
  </entry>
  <entry keyword="reusing data space at end of message">
   <topic href="s1_resmgr.html#id178" title="Important note"/>
  </entry>
  <entry keyword="serial port example">
   <topic href="s1_resmgr.html#id6" title="Serial port"/>
  </entry>
  <entry keyword="setting the iov size">
   <topic href="s1_resmgr.html#general" title="General notes"/>
  </entry>
  <entry keyword="skeleton">
   <topic href="s1_resmgr.html#skeleton" title="The basic skeleton of a resource manager"/>
  </entry>
  <entry keyword="structure">
   <topic href="s1_resmgr.html#structure" title="Resource manager structure"/>
  </entry>
  <entry keyword="structures">
   <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
   <entry keyword="io_chmod_t">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
   </entry>
   <entry keyword="io_chown_t">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="io_close_t">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
   </entry>
   <entry keyword="io_devctl_t">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="io_dup_t">
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
   </entry>
   <entry keyword="io_link_extra_t">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
   </entry>
   <entry keyword="io_link_t">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
   </entry>
   <entry keyword="io_lock_t">
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
   </entry>
   <entry keyword="io_lseek_t">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
   </entry>
   <entry keyword="io_mknod_t">
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
   </entry>
   <entry keyword="io_mmap_t">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="io_mount_t">
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
   </entry>
   <entry keyword="io_msg_t">
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
   </entry>
   <entry keyword="io_notify_t">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="io_open_t">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
   </entry>
   <entry keyword="io_openfd_t">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="io_pathconf_t">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="io_read_t">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
   </entry>
   <entry keyword="io_rename_extra_t">
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
   </entry>
   <entry keyword="io_rename_t">
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
   </entry>
   <entry keyword="io_spaced_t">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="io_stat_t">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
   </entry>
   <entry keyword="io_sync_t">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="io_unlink_t">
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="io_utime_t">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="io_write_t">
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="iofunc_attr_t">
    <topic href="s1_resmgr.html#posixdata" title="POSIX-layer data structures"/>
    <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
   </entry>
   <entry keyword="iofunc_mount_t">
    <topic href="s1_resmgr.html#posixdata" title="POSIX-layer data structures"/>
    <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="iofunc_ocb_t">
    <topic href="s1_resmgr.html#posixdata" title="POSIX-layer data structures"/>
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
    <topic href="s1_resmgr.html#strange_offset" title="The strange case of the offset member"/>
   </entry>
   <entry keyword="POSIX layer">
    <topic href="s1_resmgr.html#posixdata" title="POSIX-layer data structures"/>
   </entry>
   <entry keyword="resmgr_attr_t">
    <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
    <topic href="s1_resmgr.html#resmgr_attr" title="resmgr_attr_t control structure"/>
    <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
   </entry>
   <entry keyword="resmgr_connect_funcs_t">
    <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
    <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
   </entry>
   <entry keyword="resmgr_context_t">
    <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
    <topic href="s1_resmgr.html#general" title="General notes"/>
    <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
    <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
    <topic href="s1_resmgr.html#dsize" title="The data structure sizing parameters"/>
    <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
   </entry>
   <entry keyword="RESMGR_HANDLE_T">
    <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
   </entry>
   <entry keyword="resmgr_io_funcs_t">
    <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
    <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
    <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
   </entry>
   <entry keyword="RESMGR_OCB_T">
    <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
   </entry>
   <entry keyword="struct _io_chmod">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
   </entry>
   <entry keyword="struct _io_chown">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="struct _io_close">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
   </entry>
   <entry keyword="struct _io_connect">
    <topic href="s1_resmgr.html#cnotes" title="Connect functions notes"/>
    <topic href="s1_resmgr.html#id72" title="End-user parameter part"/>
    <topic href="s1_resmgr.html#id70" title="Internal use part"/>
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="struct _io_connect_link_reply">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="struct _io_devctl">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="struct _io_devctl_reply">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="struct _io_dup">
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
   </entry>
   <entry keyword="struct _io_lock">
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
   </entry>
   <entry keyword="struct _io_lock_reply">
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
   </entry>
   <entry keyword="struct _io_lseek">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
   </entry>
   <entry keyword="struct _io_mmap">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="struct _io_mmap_reply">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="struct _io_msg">
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
   </entry>
   <entry keyword="struct _io_notify">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="struct _io_notify_reply">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="struct _io_openfd">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="struct _io_pathconf">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="struct _io_read">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
   </entry>
   <entry keyword="struct _io_space">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="struct _io_stat">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
   </entry>
   <entry keyword="struct _io_sync">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="struct _io_utime">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="struct _io_write">
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="struct dirent">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
  </entry>
  <entry keyword="writing">
   <topic href="s1_resmgr.html#Writing" title="Writing a resource manager"/>
  </entry>
 </entry>
 <entry keyword="round robin">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="round-robin scheduling">
  <topic href="s1_procs.html#id33" title="Scheduling policies"/>
 </entry>
 <entry keyword="RR">
 </entry>
 <entry keyword="rsrcdbmgr_devno_attach()">
  <topic href="s1_resmgr.html#dev_inode_rdev" title="Of device numbers, inodes, and our friend rdev"/>
 </entry>
 <entry keyword="RTC">
  <entry keyword="getting and setting values">
   <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
  </entry>
  <entry keyword="synchronizing to current time of day">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
 </entry>
 <entry keyword="RUNNING">
  <topic href="s1_procs.html#id44" title="READY"/>
  <topic href="s1_procs.html#id42" title="RUNNING"/>
  <entry keyword="and SMP">
   <topic href="s1_procs.html#id42" title="RUNNING"/>
  </entry>
 </entry>
 <entry keyword="_SC_PAGESIZE">
  <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
 </entry>
 <entry keyword="scalability">
  <topic href="s1_procs.html#id101" title="Comparisons"/>
  <entry keyword="due to modularity">
   <topic href="s1_msg.html#id4" title="A small microkernel and message passing"/>
  </entry>
  <entry keyword="over network of SMP">
   <topic href="s1_msg.html#id22" title="Multi-threaded server"/>
  </entry>
 </entry>
 <entry keyword="scatter/gather">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="operation">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
 </entry>
 <entry keyword="SCHED_FIFO">
  <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
 </entry>
 <entry keyword="sched_get_priority_max()">
  <topic href="s1_procs.html#id31" title="Prioritization"/>
 </entry>
 <entry keyword="sched_get_priority_min()">
  <topic href="s1_procs.html#id31" title="Prioritization"/>
 </entry>
 <entry keyword="SCHED_OTHER">
  <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
 </entry>
 <entry keyword="SCHED_RR">
  <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
 </entry>
 <entry keyword="sched_rr_get_interval()">
  <topic href="s1_procs.html#id37" title="Round Robin"/>
 </entry>
 <entry keyword="sched_yield()">
  <topic href="s1_procs.html#id35" title="FIFO"/>
 </entry>
 <entry keyword="scheduling">
  <topic href="s1_procs.html#sched_real_world" title="Scheduling and the real world"/>
  <entry keyword="algorithms">
   <topic href="s1_procs.html#id33" title="Scheduling policies"/>
   <entry keyword="FIFO">
    <topic href="s1_procs.html#id33" title="Scheduling policies"/>
   </entry>
   <entry keyword="RR">
    <topic href="s1_procs.html#id33" title="Scheduling policies"/>
   </entry>
  </entry>
  <entry keyword="events in the future using timers">
   <topic href="s1_timer.html#id13" title="Types of timers"/>
  </entry>
  <entry keyword="faults">
   <topic href="s1_procs.html#id121" title="Rescheduling — exceptions"/>
   <topic href="s1_procs.html#sched_real_world" title="Scheduling and the real world"/>
  </entry>
  <entry keyword="FIFO">
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="hardware interrupts">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
   <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
   <topic href="s1_procs.html#sched_real_world" title="Scheduling and the real world"/>
  </entry>
  <entry keyword="impact of interrupts">
   <topic href="s1_inter.html#id4" title="Interrupt service routine"/>
  </entry>
  <entry keyword="interrupts">
   <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
   <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
  </entry>
  <entry keyword="kernel calls">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
   <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
   <topic href="s1_procs.html#sched_real_world" title="Scheduling and the real world"/>
  </entry>
  <entry keyword="one shot events in the future">
   <topic href="s1_timer.html#id13" title="Types of timers"/>
  </entry>
  <entry keyword="other hardware">
   <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
  </entry>
  <entry keyword="periodic events using timers">
   <topic href="s1_timer.html#id13" title="Types of timers"/>
  </entry>
  <entry keyword="priority zero">
   <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
  </entry>
  <entry keyword="round robin">
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="SCHED_FIFO">
   <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
  </entry>
  <entry keyword="SCHED_OTHER">
   <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
  </entry>
  <entry keyword="SCHED_RR">
   <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
  </entry>
  <entry keyword="the realtime clock">
   <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
  </entry>
  <entry keyword="thread creation">
   <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
  </entry>
  <entry keyword="timers">
   <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
  </entry>
 </entry>
 <entry keyword="scheduling scope">
  <topic href="s1_procs.html#id76" title="The “flags” thread attribute"/>
 </entry>
 <entry keyword="SchedYield()">
  <topic href="s1_procs.html#id35" title="FIFO"/>
 </entry>
 <entry keyword="SEM">
  <topic href="s1_procs.html#id46" title="The blocked states"/>
 </entry>
 <entry keyword="sem_post()">
  <topic href="s3_glossary.html" title="Glossary"/>
 </entry>
 <entry keyword="sem_wait()">
  <topic href="s3_glossary.html" title="Glossary"/>
 </entry>
 <entry keyword="semaphore">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="in analogy">
   <topic href="s1_procs.html#semaphore" title="Semaphores"/>
  </entry>
 </entry>
 <entry keyword="send hierarchy">
  <entry keyword="avoiding deadlock">
   <topic href="s1_msg.html#sendhierarchy" title="The send-hierarchy"/>
  </entry>
  <entry keyword="breaking">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
   <topic href="s1_msg.html#sendhierarchy" title="The send-hierarchy"/>
   <entry keyword="implementation">
    <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
   </entry>
   <entry keyword="with MsgDeliverEvent()">
    <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
   </entry>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="designing">
   <topic href="s1_msg.html#sendhierarchy" title="The send-hierarchy"/>
  </entry>
  <entry keyword="struct sigevent">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="thread">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
 </entry>
 <entry keyword="Send() (QNX 4)">
  <topic href="s3_qnx2nto.html#id24" title="Client/server using the global namespace"/>
  <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
 </entry>
 <entry keyword="send-blocked">
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  <entry keyword="diagram">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
 </entry>
 <entry keyword="send-blocked state">
  <entry keyword="when abnormal">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="when normal">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
 </entry>
 <entry keyword="send-driven model">
  <topic href="s1_msg.html#id12" title="Server/subserver"/>
  <entry keyword="example">
   <topic href="s1_msg.html#id16" title="Send-driven (client/server)"/>
  </entry>
  <entry keyword="important subtlety">
   <topic href="s1_msg.html#id20" title="An important subtlety"/>
  </entry>
 </entry>
 <entry keyword="sending a message">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="server">
  <entry keyword="acting on unblock pulse">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
  <entry keyword="assumptions about client data area">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="authentication of client">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="basic operation">
   <topic href="s1_msg.html#sampcli" title="Sending messages"/>
  </entry>
  <entry keyword="being informed of client unblock">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="binding of client">
   <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
  </entry>
  <entry keyword="boosting priority">
   <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  </entry>
  <entry keyword="busy">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="channels">
   <topic href="s1_msg.html#id42" title="More about channels"/>
  </entry>
  <entry keyword="class of service">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="client buffer size">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="client connecting to">
   <entry keyword="diagram">
    <topic href="s1_msg.html#id33" title="Creating the channel"/>
   </entry>
  </entry>
  <entry keyword="client priority">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="clients with mismatched buffer sizes">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="creating a channel">
   <topic href="s1_msg.html#id33" title="Creating the channel"/>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="delivering event to client">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="endian flags">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="filesystem example">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="finding">
   <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   <entry keyword="by name">
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   </entry>
   <entry keyword="global variable">
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   </entry>
   <entry keyword="global variables">
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   </entry>
   <entry keyword="resource manager">
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   </entry>
   <entry keyword="well-known files">
    <topic href="s1_msg.html#find77" title="Finding the server's ND/PID/CHID"/>
   </entry>
  </entry>
  <entry keyword="finding out who sent message">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="framework">
   <topic href="s1_msg.html#id37" title="Server framework"/>
  </entry>
  <entry keyword="general flow">
   <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
  </entry>
  <entry keyword="handling big messages">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="how to handle large transfers">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
  <entry keyword="ignoring unblock pulse">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
  <entry keyword="limiting transfer size">
   <topic href="s1_msg.html#id37" title="Server framework"/>
  </entry>
  <entry keyword="logging of client">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="mixing multithreaded and server/subserver">
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
  </entry>
  <entry keyword="multi-threaded">
   <topic href="s1_msg.html#id22" title="Multi-threaded server"/>
  </entry>
  <entry keyword="multiple requests">
   <topic href="s1_msg.html#id49" title="Not replying to the client"/>
  </entry>
  <entry keyword="network distributed">
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
  </entry>
  <entry keyword="node descriptor of client">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="not replying to client">
   <topic href="s1_msg.html#id49" title="Not replying to the client"/>
   <topic href="s1_timer.html#notes" title="Notes"/>
  </entry>
  <entry keyword="notifying client">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="periodic timers">
   <topic href="s1_timer.html#id36" title="A server with periodic pulses"/>
  </entry>
  <entry keyword="phases of message passing">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="receive ID">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="reply blocked client">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="replying to multiple clients">
   <topic href="s1_timer.html#notes" title="Notes"/>
  </entry>
  <entry keyword="server connection ID">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="server/subserver">
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
   <entry keyword="delegation of work">
    <topic href="s1_msg.html#id12" title="Server/subserver"/>
   </entry>
  </entry>
  <entry keyword="SMP">
   <topic href="s1_msg.html#id22" title="Multi-threaded server"/>
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
  </entry>
  <entry keyword="state transition">
   <entry keyword="diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="state transitions">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="storing the struct sigevent">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="thread pool">
   <topic href="s1_procs.html#tpool" title="Pools of threads"/>
  </entry>
  <entry keyword="thread pools">
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
  </entry>
  <entry keyword="timeouts">
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
  </entry>
  <entry keyword="unblock pulse handling">
   <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  </entry>
  <entry keyword="unblocked by client">
   <topic href="s1_msg.html#id35" title="Message handling"/>
  </entry>
  <entry keyword="unblocking">
   <entry keyword="client">
    <topic href="s1_msg.html#id35" title="Message handling"/>
   </entry>
  </entry>
  <entry keyword="using MsgInfo()">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="using MsgReceive()">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="using pulses for timeouts">
   <topic href="s1_timer.html#id25" title="Pulse notification"/>
  </entry>
  <entry keyword="using signals for timeouts">
   <topic href="s1_timer.html#id27" title="Signal notification"/>
  </entry>
  <entry keyword="verifying validity of event">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="writing a header later">
   <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  </entry>
 </entry>
 <entry keyword="server/subserver">
  <topic href="s1_msg.html#id49" title="Not replying to the client"/>
  <entry keyword="analogy">
   <topic href="s1_msg.html#id12" title="Server/subserver"/>
  </entry>
  <entry keyword="diagram">
   <topic href="s1_msg.html#id20" title="An important subtlety"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_msg.html#id18" title="Reply-driven (server/subserver)"/>
  </entry>
  <entry keyword="implementation description">
   <topic href="s1_msg.html#id18" title="Reply-driven (server/subserver)"/>
  </entry>
  <entry keyword="message passing">
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
  </entry>
 </entry>
 <entry keyword="SETIOV() macro">
  <entry keyword="defined">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
 </entry>
 <entry keyword="setting the time">
  <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
 </entry>
 <entry keyword="setuid()">
  <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
 </entry>
 <entry keyword="setupPulseAndTimer()">
  <topic href="s1_timer.html#main" title="main()"/>
  <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
 </entry>
 <entry keyword="SH_COMPAT">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="SH_DENYNO">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="SH_DENYRD">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="SH_DENYRW">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="SH_DENYWR">
  <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
 </entry>
 <entry keyword="shared memory">
  <topic href="s1_procs.html#id97" title="Multiple processes with shared memory"/>
  <entry keyword="versus network">
   <topic href="s1_procs.html#id101" title="Comparisons"/>
  </entry>
 </entry>
 <entry keyword="sharing interrupts">
  <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  <entry keyword="diagram">
   <topic href="s1_inter.html#id10" title="Level-sensitivity versus edge-sensitivity"/>
  </entry>
 </entry>
 <entry keyword="SIGALRM">
  <topic href="s1_timer.html#id20" title="Signal notification"/>
  <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
 </entry>
 <entry keyword="SIGEV_INTR">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
  <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  <topic href="s1_inter.html#id33" title="The trade-offs"/>
  <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  <entry keyword="and interrupts">
   <topic href="s1_inter.html#id33" title="The trade-offs"/>
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="and InterruptWait()">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="and struct sigevent">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
 </entry>
 <entry keyword="SIGEV_INTR_INIT() (macro)">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
 </entry>
 <entry keyword="sigev_notify_function()">
  <topic href="s1_timer.html#sigev_thread" title="Thread notification"/>
 </entry>
 <entry keyword="SIGEV_PULSE">
  <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  <topic href="s1_timer.html#id18" title="Pulse notification"/>
  <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  <entry keyword="and struct sigevent">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
 </entry>
 <entry keyword="SIGEV_PULSE_INIT()">
  <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
 </entry>
 <entry keyword="SIGEV_PULSE_INIT() (macro)">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
  <entry keyword="example">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
 </entry>
 <entry keyword="SIGEV_PULSE_PRIO_INHERIT">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
  <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
 </entry>
 <entry keyword="SIGEV_SIGNAL">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
  <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  <topic href="s1_timer.html#id20" title="Signal notification"/>
  <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  <entry keyword="and interrupts">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="and struct sigevent">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#id20" title="Signal notification"/>
  </entry>
 </entry>
 <entry keyword="SIGEV_SIGNAL family">
  <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
 </entry>
 <entry keyword="SIGEV_SIGNAL_CODE">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
  <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  <topic href="s1_timer.html#id20" title="Signal notification"/>
  <entry keyword="and struct sigevent">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#id20" title="Signal notification"/>
  </entry>
 </entry>
 <entry keyword="SIGEV_SIGNAL_CODE_INIT() (macro)">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
 </entry>
 <entry keyword="SIGEV_SIGNAL_INIT() (macro)">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
 </entry>
 <entry keyword="SIGEV_SIGNAL_PULSE">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
 </entry>
 <entry keyword="SIGEV_SIGNAL_THREAD">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
  <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  <topic href="s1_timer.html#id20" title="Signal notification"/>
  <entry keyword="and struct sigevent">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#id20" title="Signal notification"/>
  </entry>
 </entry>
 <entry keyword="SIGEV_SIGNAL_THREAD_INIT() (macro)">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
 </entry>
 <entry keyword="SIGEV_THREAD">
  <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  <topic href="s1_timer.html#sigev_thread" title="Thread notification"/>
  <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  <entry keyword="and interrupts">
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="and struct sigevent">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
 </entry>
 <entry keyword="SIGEV_THREAD_INIT() (macro)">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
  <entry keyword="example">
   <topic href="s1_timer.html#id49" title="Timers creating threads"/>
  </entry>
 </entry>
 <entry keyword="SIGEV_UNBLOCK">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
  <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  <entry keyword="and struct sigevent">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
 </entry>
 <entry keyword="SIGEV_UNBLOCK_INIT() (macro)">
  <topic href="s1_timer.html#id23" title="General tricks for notification"/>
  <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  <entry keyword="example">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
 </entry>
 <entry keyword="signal">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="floating-point operations aren&#x0027;t safe to use in handlers">
   <topic href="s1_timer.html#id27" title="Signal notification"/>
  </entry>
  <entry keyword="SIGALRM">
   <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
  </entry>
  <entry keyword="SIGUSR1">
   <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
  </entry>
  <entry keyword="struct sigevent">
   <topic href="s1_timer.html#id70" title="Summary"/>
  </entry>
  <entry keyword="timers">
   <topic href="s1_timer.html#id15" title="Notification schemes"/>
   <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
  </entry>
  <entry keyword="versus pulses">
   <topic href="s1_timer.html#id27" title="Signal notification"/>
  </entry>
 </entry>
 <entry keyword="SIGSEGV">
  <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
 </entry>
 <entry keyword="SIGUSR1">
  <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
 </entry>
 <entry keyword="sigwait()">
  <topic href="s1_timer.html#id27" title="Signal notification"/>
 </entry>
 <entry keyword="sleep()">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  <topic href="s1_timer.html#id4" title="Operating periodically"/>
  <topic href="s1_timer.html#otherclock" title="Other clock sources"/>
  <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
  <entry keyword="bad implementation">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
 </entry>
 <entry keyword="sleepon locks">
 </entry>
 <entry keyword="slowing down time">
  <topic href="s1_timer.html#id52" title="Getting and setting"/>
 </entry>
 <entry keyword="SMP">
  <topic href="s1_msg.html#id4" title="A small microkernel and message passing"/>
  <topic href="s1_procs.html#id27" title="Multiple CPU (SMP)"/>
  <entry keyword="application">
   <topic href="s1_procs.html#id91" title="Multiple threads on a single CPU"/>
  </entry>
  <entry keyword="atomic operations">
   <topic href="s1_procs.html#smpbeware" title="Things to watch out for when using SMP"/>
  </entry>
  <entry keyword="coding for SMP or single processor">
   <topic href="s1_procs.html#codingeither" title="Coding for SMP or single processor"/>
  </entry>
  <entry keyword="concurrency">
   <topic href="s1_procs.html#smpbeware" title="Things to watch out for when using SMP"/>
  </entry>
  <entry keyword="condvars">
   <topic href="s1_procs.html#id109" title="Sleepons versus condvars"/>
  </entry>
  <entry keyword="constraints">
   <topic href="s1_procs.html#id91" title="Multiple threads on a single CPU"/>
  </entry>
  <entry keyword="creating enough threads">
   <topic href="s1_procs.html#parallel" title="Threads in mathematical operations"/>
  </entry>
  <entry keyword="in a networked system">
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
  </entry>
  <entry keyword="interrupts">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
   <topic href="s1_procs.html#smpbeware" title="Things to watch out for when using SMP"/>
  </entry>
  <entry keyword="message passing">
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
  </entry>
  <entry keyword="multiple threads">
   <topic href="s1_procs.html#id91" title="Multiple threads on a single CPU"/>
  </entry>
  <entry keyword="scalability">
   <topic href="s1_msg.html#id22" title="Multi-threaded server"/>
  </entry>
  <entry keyword="soaker thread">
   <topic href="s1_procs.html#id91" title="Multiple threads on a single CPU"/>
  </entry>
  <entry keyword="STATE_RUNNING">
   <topic href="s1_procs.html#id42" title="RUNNING"/>
  </entry>
  <entry keyword="thread pools">
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
  </entry>
  <entry keyword="threads">
   <topic href="s1_procs.html#parallel" title="Threads in mathematical operations"/>
  </entry>
  <entry keyword="timing">
   <entry keyword="diagram">
    <topic href="s1_procs.html#id91" title="Multiple threads on a single CPU"/>
   </entry>
  </entry>
  <entry keyword="tips">
   <topic href="s1_procs.html#smpbeware" title="Things to watch out for when using SMP"/>
  </entry>
  <entry keyword="underutilization">
   <topic href="s1_procs.html#id91" title="Multiple threads on a single CPU"/>
  </entry>
  <entry keyword="utilization">
   <topic href="s1_procs.html#id91" title="Multiple threads on a single CPU"/>
  </entry>
 </entry>
 <entry keyword="soaker thread">
  <topic href="s1_procs.html#id91" title="Multiple threads on a single CPU"/>
 </entry>
 <entry keyword="spawn()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
  <topic href="s1_procs.html#id63" title="Starting a process with the fork() call"/>
 </entry>
 <entry keyword="spawn() family">
  <topic href="s1_procs.html#id69" title="So what should you use?"/>
  <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="SPAWN_NOZOMBIE">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="spawnl()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="spawnle()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="spawnlp()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="spawnlpe()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="spawnp()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="spawnv()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="spawnve()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="spawnvp()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="spawnvpe()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="speeding time up">
  <topic href="s1_timer.html#id52" title="Getting and setting"/>
 </entry>
 <entry keyword="stack">
  <entry keyword="for thread">
   <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
  </entry>
  <entry keyword="postmortem analysis">
   <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
  </entry>
 </entry>
 <entry keyword="stat()">
  <topic href="s1_resmgr.html#libisreal" title="The library really does what we just talked about"/>
  <topic href="s1_resmgr.html#the_resource_manager_library" title="The resource manager library"/>
 </entry>
 <entry keyword="STATE_CONDVAR">
  <topic href="s1_procs.html#condvar" title="Condition variables"/>
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_DEAD">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_INTR">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_JOIN">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_MUTEX">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  <topic href="s1_procs.html#id46" title="The blocked states"/>
 </entry>
 <entry keyword="STATE_NANOSLEEP">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_NET_REPLY">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_NET_SEND">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_READY">
  <topic href="s1_inter.html#id15" title="Attaching with InterruptAttachEvent()"/>
  <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
  <topic href="s1_timer.html#id15" title="Notification schemes"/>
  <topic href="s1_timer.html#id4" title="Operating periodically"/>
  <topic href="s1_msg.html#prio_interitance" title="Priority inheritance"/>
  <topic href="s1_procs.html#id117" title="Rescheduling — hardware interrupts"/>
  <topic href="s1_procs.html#id119" title="Rescheduling — kernel calls"/>
  <topic href="s1_procs.html#id46" title="The blocked states"/>
  <topic href="s1_timer.html#id11" title="Timing jitter"/>
 </entry>
 <entry keyword="STATE_READY state">
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
 </entry>
 <entry keyword="STATE_RECEIVE">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_RECV">
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  <topic href="s1_timer.html#id25" title="Pulse notification"/>
  <topic href="s1_msg.html#id92" title="So what's the trick?"/>
 </entry>
 <entry keyword="STATE_RECV state">
  <entry keyword="diagram">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
 </entry>
 <entry keyword="STATE_REPLY">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  <topic href="s1_timer.html#notes" title="Notes"/>
  <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
 </entry>
 <entry keyword="STATE_REPLY state">
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  <entry keyword="diagram">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
 </entry>
 <entry keyword="STATE_RUNNING">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  <topic href="s1_inter.html#Introduction" title="Neutrino and interrupts"/>
 </entry>
 <entry keyword="STATE_SEM">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  <topic href="s1_procs.html#id46" title="The blocked states"/>
 </entry>
 <entry keyword="STATE_SEND">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
  <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
 </entry>
 <entry keyword="STATE_SEND state">
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  <entry keyword="diagram">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
 </entry>
 <entry keyword="STATE_SIGSUSPEND">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_SIGWAITINFO">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_STACK">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_STOPPED">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_WAITCTX">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_WAITPAGE">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="STATE_WAITTHREAD">
  <topic href="s1_procs.html#id48" title="Kernel states, the complete list"/>
 </entry>
 <entry keyword="strcmp()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
 </entry>
 <entry keyword="strdup()">
  <topic href="s1_inter.html#id35" title="ISR functions"/>
 </entry>
 <entry keyword="strftime()">
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
 </entry>
 <entry keyword="struct _clockadjust">
  <topic href="s1_timer.html#id52" title="Getting and setting"/>
 </entry>
 <entry keyword="struct _clockperiod">
  <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
  <entry keyword="members">
   <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
  </entry>
 </entry>
 <entry keyword="struct _io_chmod">
  <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
 </entry>
 <entry keyword="struct _io_chown">
  <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
 </entry>
 <entry keyword="struct _io_close">
  <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
  <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
 </entry>
 <entry keyword="struct _io_connect">
  <topic href="s1_resmgr.html#cnotes" title="Connect functions notes"/>
  <topic href="s1_resmgr.html#id72" title="End-user parameter part"/>
  <topic href="s1_resmgr.html#id70" title="Internal use part"/>
  <topic href="s1_resmgr.html#io_link" title="io_link()"/>
  <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
  <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
  <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
  <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
  <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
 </entry>
 <entry keyword="struct _io_connect_link_reply">
  <topic href="s1_resmgr.html#io_link" title="io_link()"/>
  <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
  <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
  <topic href="s1_resmgr.html#io_open" title="io_open()"/>
  <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
  <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
  <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
 </entry>
 <entry keyword="struct _io_devctl">
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
 </entry>
 <entry keyword="struct _io_devctl_reply">
  <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
 </entry>
 <entry keyword="struct _io_dup">
  <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
 </entry>
 <entry keyword="struct _io_lock">
  <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
 </entry>
 <entry keyword="struct _io_lock_reply">
  <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
 </entry>
 <entry keyword="struct _io_lseek">
  <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
 </entry>
 <entry keyword="struct _io_mmap">
  <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
 </entry>
 <entry keyword="struct _io_mmap_reply">
  <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
 </entry>
 <entry keyword="struct _io_msg">
  <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
 </entry>
 <entry keyword="struct _io_notify">
  <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
 </entry>
 <entry keyword="struct _io_notify_reply">
  <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
 </entry>
 <entry keyword="struct _io_openfd">
  <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
 </entry>
 <entry keyword="struct _io_pathconf">
  <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
 </entry>
 <entry keyword="struct _io_read">
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
 </entry>
 <entry keyword="struct _io_space">
  <topic href="s1_resmgr.html#io_space" title="io_space()"/>
 </entry>
 <entry keyword="struct _io_stat">
  <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
 </entry>
 <entry keyword="struct _io_sync">
  <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
 </entry>
 <entry keyword="struct _io_utime">
  <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
 </entry>
 <entry keyword="struct _io_write">
  <topic href="s1_resmgr.html#io_write" title="io_write()"/>
 </entry>
 <entry keyword="struct _msg_info">
  <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
  <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
  <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  <entry keyword="declaration">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
  <entry keyword="fields in">
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
  </entry>
  <entry keyword="flags">
   <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
  </entry>
  <entry keyword="node descriptors">
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
  </entry>
 </entry>
 <entry keyword="struct _pulse">
  <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  <entry keyword="declaration">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
 </entry>
 <entry keyword="struct _thread_pool_attr">
  <entry keyword="defined">
   <topic href="s1_procs.html#tpool" title="Pools of threads"/>
  </entry>
  <entry keyword="members">
   <topic href="s1_procs.html#id114" title="The thread pool functions"/>
  </entry>
 </entry>
 <entry keyword="struct dirent">
  <topic href="s1_resmgr.html#io_read" title="io_read()"/>
  <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
 </entry>
 <entry keyword="struct itimerspec">
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  <entry keyword="defined">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="example of filling">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="it_interval member">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="it_value member">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
 </entry>
 <entry keyword="struct sigevent">
  <topic href="s1_inter.html#id17" title="Attaching with InterruptAttach()"/>
  <topic href="s1_inter.html#id15" title="Attaching with InterruptAttachEvent()"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  <topic href="s3_qnx2nto.html#pp-isr" title="Interrupt service routines"/>
  <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
  <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
  <topic href="s3_qnx2nto.html#id14" title="Pulses and events"/>
  <topic href="s1_timer.html#id32" title="Signal, pulse, or thread?"/>
  <topic href="s1_timer.html#id70" title="Summary"/>
  <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
  <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  <topic href="s1_timer.html#id49" title="Timers creating threads"/>
  <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
  <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  <topic href="s1_timer.html#using" title="Using timers"/>
  <entry keyword="anonymous union">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
  <entry keyword="creating threads">
   <topic href="s1_timer.html#id49" title="Timers creating threads"/>
  </entry>
  <entry keyword="defined">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="how to initialize">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
  <entry keyword="interrupts">
   <topic href="s1_inter.html#id17" title="Attaching with InterruptAttach()"/>
   <topic href="s1_inter.html#id15" title="Attaching with InterruptAttachEvent()"/>
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
  </entry>
  <entry keyword="macros for filling">
   <topic href="s1_timer.html#id23" title="General tricks for notification"/>
  </entry>
  <entry keyword="persistency">
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
  </entry>
  <entry keyword="pulse">
   <topic href="s1_timer.html#id70" title="Summary"/>
  </entry>
  <entry keyword="pulses">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="send hierarchy">
   <topic href="s1_msg.html#id71" title="The MsgDeliverEvent() function"/>
  </entry>
  <entry keyword="shortcut initialization">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="sigev_code member">
   <topic href="s1_timer.html#id18" title="Pulse notification"/>
   <topic href="s1_timer.html#id20" title="Signal notification"/>
  </entry>
  <entry keyword="sigev_coid member">
   <topic href="s1_timer.html#id18" title="Pulse notification"/>
  </entry>
  <entry keyword="SIGEV_INTR">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
  <entry keyword="sigev_notify member">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#id20" title="Signal notification"/>
  </entry>
  <entry keyword="sigev_notify_attributes member">
   <topic href="s1_timer.html#sigev_thread" title="Thread notification"/>
  </entry>
  <entry keyword="sigev_notify_function member">
   <topic href="s1_timer.html#sigev_thread" title="Thread notification"/>
  </entry>
  <entry keyword="sigev_priority member">
   <topic href="s1_timer.html#id18" title="Pulse notification"/>
  </entry>
  <entry keyword="SIGEV_PULSE">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="SIGEV_SIGNAL">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#id20" title="Signal notification"/>
  </entry>
  <entry keyword="SIGEV_SIGNAL_CODE">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#id20" title="Signal notification"/>
  </entry>
  <entry keyword="SIGEV_SIGNAL_THREAD">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#id20" title="Signal notification"/>
  </entry>
  <entry keyword="sigev_signo">
   <entry keyword="and pulses">
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   </entry>
  </entry>
  <entry keyword="sigev_signo member">
   <topic href="s1_timer.html#id20" title="Signal notification"/>
  </entry>
  <entry keyword="SIGEV_THREAD">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
  <entry keyword="SIGEV_UNBLOCK">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  </entry>
  <entry keyword="sigev_value member">
   <topic href="s1_timer.html#id18" title="Pulse notification"/>
   <topic href="s1_timer.html#sigev_thread" title="Thread notification"/>
  </entry>
  <entry keyword="signal">
   <topic href="s1_timer.html#id70" title="Summary"/>
  </entry>
  <entry keyword="timers">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
 </entry>
 <entry keyword="struct timespec">
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  <entry keyword="defined">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
 </entry>
 <entry keyword="structures">
  <entry keyword="attribute">
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="FILE">
   <topic href="s1_resmgr.html#id10" title="Characteristics of resource managers"/>
   <topic href="s1_resmgr.html#id21" title="Client summary"/>
  </entry>
  <entry keyword="iov_t">
   <topic href="s1_msg.html#id58" title="Multipart messages"/>
  </entry>
  <entry keyword="pthread_attr_t">
   <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
  </entry>
  <entry keyword="pthread_cond_t">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
  </entry>
  <entry keyword="pthread_rwlock_t">
   <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
  </entry>
  <entry keyword="pthread_t">
   <topic href="s1_procs.html#id88" title="Joining"/>
   <topic href="s1_procs.html#id71" title="Starting a thread"/>
  </entry>
  <entry keyword="resmgr_attr_t">
   <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
   <topic href="s1_resmgr.html#resmgr_attr" title="resmgr_attr_t control structure"/>
   <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
  </entry>
  <entry keyword="resmgr_connect_funcs_t">
   <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
   <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
  </entry>
  <entry keyword="resmgr_context_t">
   <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
   <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
   <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
   <topic href="s1_resmgr.html#dsize" title="The data structure sizing parameters"/>
   <topic href="s1_resmgr.html#resmgr_context" title="The resmgr_context_t internal context block"/>
  </entry>
  <entry keyword="RESMGR_HANDLE_T">
   <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
  </entry>
  <entry keyword="resmgr_io_funcs_t">
   <topic href="s1_resmgr.html#datastruct" title="Data structures"/>
   <topic href="s1_resmgr.html#resmgr_connect" title="resmgr_connect_funcs_t connect table"/>
   <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
  </entry>
  <entry keyword="RESMGR_OCB_T">
   <topic href="s1_resmgr.html#resmgr_io" title="resmgr_io_funcs_t I/O table"/>
  </entry>
  <entry keyword="resource manager">
   <entry keyword="io_chmod_t">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
   </entry>
   <entry keyword="io_chown_t">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="io_close_t">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
   </entry>
   <entry keyword="io_devctl_t">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="io_dup_t">
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
   </entry>
   <entry keyword="io_link_extra_t">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
   </entry>
   <entry keyword="io_link_t">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
   </entry>
   <entry keyword="io_lock_t">
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
   </entry>
   <entry keyword="io_lseek_t">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
   </entry>
   <entry keyword="io_mknod_t">
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
   </entry>
   <entry keyword="io_mmap_t">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="io_mount_t">
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
   </entry>
   <entry keyword="io_msg_t">
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
   </entry>
   <entry keyword="io_notify_t">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="io_open_t">
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
   </entry>
   <entry keyword="io_openfd_t">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="io_pathconf_t">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="io_read_t">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
   </entry>
   <entry keyword="io_rename_extra_t">
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
   </entry>
   <entry keyword="io_rename_t">
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
   </entry>
   <entry keyword="io_space_t">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="io_stat_t">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
   </entry>
   <entry keyword="io_sync_t">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="io_unlink_t">
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="io_utime_t">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="io_write_t">
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="iofunc_attr_t">
    <topic href="s1_resmgr.html#posixdata" title="POSIX-layer data structures"/>
    <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
   </entry>
   <entry keyword="iofunc_mount_t">
    <topic href="s1_resmgr.html#posixdata" title="POSIX-layer data structures"/>
    <topic href="s1_resmgr.html#iofunc_attr" title="The iofunc_attr_t attributes structure"/>
    <topic href="s1_resmgr.html#iofunc_mount" title="The iofunc_mount_t mount structure"/>
   </entry>
   <entry keyword="iofunc_ocb_t">
    <topic href="s1_resmgr.html#posixdata" title="POSIX-layer data structures"/>
    <topic href="s1_resmgr.html#iofunc_ocb" title="The iofunc_ocb_t OCB structure"/>
    <topic href="s1_resmgr.html#strange_offset" title="The strange case of the offset member"/>
   </entry>
   <entry keyword="resmgr_context_t">
    <topic href="s1_resmgr.html#general" title="General notes"/>
   </entry>
   <entry keyword="struct _io_chmod">
    <topic href="s1_resmgr.html#io_chmod" title="io_chmod()"/>
   </entry>
   <entry keyword="struct _io_chown">
    <topic href="s1_resmgr.html#io_chown" title="io_chown()"/>
   </entry>
   <entry keyword="struct _io_close">
    <topic href="s1_resmgr.html#io_close_dup" title="io_close_dup()"/>
    <topic href="s1_resmgr.html#io_close_ocb" title="io_close_ocb()"/>
   </entry>
   <entry keyword="struct _io_connect">
    <topic href="s1_resmgr.html#cnotes" title="Connect functions notes"/>
    <topic href="s1_resmgr.html#id72" title="End-user parameter part"/>
    <topic href="s1_resmgr.html#id70" title="Internal use part"/>
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="struct _io_connect_link_reply">
    <topic href="s1_resmgr.html#io_link" title="io_link()"/>
    <topic href="s1_resmgr.html#io_mknod" title="io_mknod()"/>
    <topic href="s1_resmgr.html#io_mount" title="io_mount()"/>
    <topic href="s1_resmgr.html#io_open" title="io_open()"/>
    <topic href="s1_resmgr.html#io_readlink" title="io_readlink()"/>
    <topic href="s1_resmgr.html#io_rename" title="io_rename()"/>
    <topic href="s1_resmgr.html#io_unlink" title="io_unlink()"/>
   </entry>
   <entry keyword="struct _io_devctl">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="struct _io_devctl_reply">
    <topic href="s1_resmgr.html#io_devctl" title="io_devctl()"/>
   </entry>
   <entry keyword="struct _io_dup">
    <topic href="s1_resmgr.html#io_dup" title="io_dup()"/>
   </entry>
   <entry keyword="struct _io_lock">
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
   </entry>
   <entry keyword="struct _io_lock_reply">
    <topic href="s1_resmgr.html#io_lock" title="io_lock()"/>
   </entry>
   <entry keyword="struct _io_lseek">
    <topic href="s1_resmgr.html#io_lseek" title="io_lseek()"/>
   </entry>
   <entry keyword="struct _io_mmap">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="struct _io_mmap_reply">
    <topic href="s1_resmgr.html#io_mmap" title="io_mmap()"/>
   </entry>
   <entry keyword="struct _io_msg">
    <topic href="s1_resmgr.html#io_msg" title="io_msg()"/>
   </entry>
   <entry keyword="struct _io_notify">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="struct _io_notify_reply">
    <topic href="s1_resmgr.html#io_notify" title="io_notify()"/>
   </entry>
   <entry keyword="struct _io_openfd">
    <topic href="s1_resmgr.html#io_openfd" title="io_openfd()"/>
   </entry>
   <entry keyword="struct _io_pathconf">
    <topic href="s1_resmgr.html#io_pathconf" title="io_pathconf()"/>
   </entry>
   <entry keyword="struct _io_read">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
   </entry>
   <entry keyword="struct _io_space">
    <topic href="s1_resmgr.html#io_space" title="io_space()"/>
   </entry>
   <entry keyword="struct _io_stat">
    <topic href="s1_resmgr.html#io_stat" title="io_stat()"/>
   </entry>
   <entry keyword="struct _io_sync">
    <topic href="s1_resmgr.html#io_sync" title="io_sync()"/>
   </entry>
   <entry keyword="struct _io_utime">
    <topic href="s1_resmgr.html#io_utime" title="io_utime()"/>
   </entry>
   <entry keyword="struct _io_write">
    <topic href="s1_resmgr.html#io_write" title="io_write()"/>
   </entry>
   <entry keyword="struct dirent">
    <topic href="s1_resmgr.html#io_read" title="io_read()"/>
    <topic href="s1_resmgr.html#id191" title="The struct dirent structure and friends"/>
   </entry>
  </entry>
  <entry keyword="struct _msg_info">
   <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   <topic href="s1_msg.html#id88" title="Impact on MsgReceive()"/>
   <topic href="s1_msg.html#ndnotes" title="Some notes on NDs"/>
   <topic href="s1_msg.html#nto_mi_unblock_req" title="Using the _NTO_MI_UNBLOCK_REQ"/>
   <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   <entry keyword="chid">
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="coid">
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="dstmsglen">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
   </entry>
   <entry keyword="flags">
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="msglen">
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="nd">
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="pid">
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="priority">
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="scoid">
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="srcmsglen">
    <topic href="s1_msg.html#chanflags" title="Channel flags"/>
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="srcnd">
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
   <entry keyword="tid">
    <topic href="s1_msg.html#msginfo" title="Who sent the message?"/>
   </entry>
  </entry>
  <entry keyword="struct _pulse">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
  <entry keyword="struct itimerspec">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   <entry keyword="it_interval member">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
   <entry keyword="it_value member">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
  </entry>
  <entry keyword="struct sigevent">
   <topic href="s1_inter.html#id17" title="Attaching with InterruptAttach()"/>
   <topic href="s1_inter.html#id15" title="Attaching with InterruptAttachEvent()"/>
   <topic href="s3_glossary.html" title="Glossary"/>
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s3_qnx2nto.html#pp-isr" title="Interrupt service routines"/>
   <topic href="s1_inter.html#id31" title="InterruptAttach() versus InterruptAttachEvent()"/>
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
   <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
   <topic href="s3_qnx2nto.html#id14" title="Pulses and events"/>
   <topic href="s1_timer.html#id32" title="Signal, pulse, or thread?"/>
   <topic href="s1_timer.html#id70" title="Summary"/>
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
   <topic href="s1_timer.html#id49" title="Timers creating threads"/>
   <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
   <topic href="s1_inter.html#id29" title="Using InterruptAttachEvent()"/>
   <topic href="s1_timer.html#using" title="Using timers"/>
  </entry>
  <entry keyword="struct timespec">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="thread_pool_attr_t">
   <topic href="s1_procs.html#tpool" title="Pools of threads"/>
  </entry>
  <entry keyword="union sigval">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
 </entry>
 <entry keyword="sub-second timers">
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
 </entry>
 <entry keyword="support, technical">
  <topic href="about.html#Support" title="Technical support"/>
 </entry>
 <entry keyword="synchronization">
  <entry keyword="association of mutex and condvar">
   <topic href="s1_procs.html#id109" title="Sleepons versus condvars"/>
  </entry>
  <entry keyword="barrier">
   <topic href="s1_procs.html#id123" title="Summary"/>
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="condition variable">
   <topic href="s1_procs.html#condvar" title="Condition variables"/>
   <topic href="s1_procs.html#More_synchronization" title="More on synchronization"/>
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="condvar">
   <topic href="s1_procs.html#id123" title="Summary"/>
   <entry keyword="versus sleepon">
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
   </entry>
  </entry>
  <entry keyword="condvar versus sleepon">
   <topic href="s1_procs.html#id109" title="Sleepons versus condvars"/>
  </entry>
  <entry keyword="deadlock">
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="joining">
   <topic href="s1_procs.html#id123" title="Summary"/>
  </entry>
  <entry keyword="mutex">
   <topic href="s1_procs.html#id123" title="Summary"/>
   <entry keyword="across process boundaries">
    <topic href="s1_procs.html#ntoext" title="Additional Neutrino services"/>
   </entry>
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="reader/writer lock">
   <topic href="s1_procs.html#More_synchronization" title="More on synchronization"/>
   <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
  </entry>
  <entry keyword="rendezvous">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
  <entry keyword="semaphore">
   <topic href="s1_procs.html#id123" title="Summary"/>
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="signal versus broadcast">
   <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
  </entry>
  <entry keyword="sleepon">
   <entry keyword="versus condvar">
    <topic href="s1_procs.html#condvar" title="Condition variables"/>
   </entry>
  </entry>
  <entry keyword="sleepon lock">
   <topic href="s1_procs.html#More_synchronization" title="More on synchronization"/>
   <topic href="s1_procs.html#sleepon" title="Sleepon locks"/>
   <topic href="s1_procs.html#id123" title="Summary"/>
  </entry>
  <entry keyword="sleepon versus condvar">
   <topic href="s1_procs.html#id109" title="Sleepons versus condvars"/>
  </entry>
  <entry keyword="to termination of thread">
   <topic href="s1_procs.html#id88" title="Joining"/>
   <topic href="s1_procs.html#sync2term" title="Synchronizing to the termination of a thread"/>
  </entry>
  <entry keyword="using a barrier">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
 </entry>
 <entry keyword="synchronizing time of day">
  <topic href="s1_timer.html#id52" title="Getting and setting"/>
 </entry>
 <entry keyword="synchronous">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="See also asynchronous"/>
 </entry>
 <entry keyword="sysconf()">
  <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
 </entry>
 <entry keyword="system">
  <entry keyword="as consisting of processes and threads">
   <topic href="s1_procs.html#Threads_and_processes" title="Threads and processes"/>
  </entry>
 </entry>
 <entry keyword="system()">
  <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
  <topic href="s1_procs.html#id59" title="Starting a process with the system() call"/>
 </entry>
 <entry keyword="tar">
  <topic href="s3_help.html#id35" title="Narrow it down"/>
  <entry keyword="example">
   <topic href="s3_help.html#id35" title="Narrow it down"/>
  </entry>
 </entry>
 <entry keyword="TDP (Transparent Distributed Processing)">
  <topic href="s1_msg.html#id42" title="More about channels"/>
  <entry keyword="See also Qnet"/>
 </entry>
 <entry keyword="technical support">
  <topic href="s3_help.html#id23" title="Contact technical support"/>
  <topic href="s3_help.html#id3" title="Seeking professional help"/>
  <topic href="about.html#Support" title="Technical support"/>
  <entry keyword="beta versions">
   <topic href="s3_help.html#id31" title="If you're using a beta…"/>
   <entry keyword="updates">
    <topic href="s3_help.html#id31" title="If you're using a beta…"/>
   </entry>
  </entry>
  <entry keyword="contacting">
   <topic href="s3_help.html#id23" title="Contact technical support"/>
  </entry>
  <entry keyword="describing the problem">
   <topic href="s3_help.html#id25" title="Describe the problem"/>
   <entry keyword="be precise">
    <topic href="s3_help.html#id27" title="Precise information"/>
   </entry>
  </entry>
  <entry keyword="narrow it down">
   <topic href="s3_help.html#id35" title="Narrow it down"/>
  </entry>
  <entry keyword="reproduce the problem">
   <topic href="s3_help.html#id33" title="Reproduce the problem"/>
  </entry>
  <entry keyword="RTFM">
   <topic href="s3_help.html#id7" title="RTFM"/>
  </entry>
  <entry keyword="training">
   <topic href="s3_help.html#id37" title="Training"/>
  </entry>
 </entry>
 <entry keyword="telnet">
  <topic href="s3_help.html#id29" title="Versions"/>
 </entry>
 <entry keyword="termination synchronization">
  <topic href="s1_procs.html#id88" title="Joining"/>
  <topic href="s1_procs.html#sync2term" title="Synchronizing to the termination of a thread"/>
 </entry>
 <entry keyword="tfork()">
  <topic href="s3_qnx2nto.html#id10" title="Thread support"/>
 </entry>
 <entry keyword="thread">
  <entry keyword="associating with interrupt handler">
   <topic href="s1_inter.html#id23" title="The flags parameter"/>
  </entry>
  <entry keyword="barriers">
   <topic href="s1_procs.html#barriers" title="Using a barrier"/>
  </entry>
  <entry keyword="blocking states">
   <topic href="s1_procs.html#id29" title="The kernel as arbiter"/>
  </entry>
  <entry keyword="concurrent">
   <topic href="s1_procs.html#id27" title="Multiple CPU (SMP)"/>
  </entry>
  <entry keyword="context switch">
   <topic href="s1_procs.html#id29" title="The kernel as arbiter"/>
  </entry>
  <entry keyword="coupling">
   <topic href="s1_procs.html#id97" title="Multiple processes with shared memory"/>
   <topic href="s1_procs.html#id99" title="Multiple threads"/>
  </entry>
  <entry keyword="created by timer trigger">
   <topic href="s1_timer.html#id49" title="Timers creating threads"/>
  </entry>
  <entry keyword="creating">
   <entry keyword="attribute structure initialization">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="detached">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="example">
    <topic href="s1_procs.html#parallel" title="Threads in mathematical operations"/>
   </entry>
   <entry keyword="joinable">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="on timer expiry">
    <topic href="s1_timer.html#id15" title="Notification schemes"/>
   </entry>
   <entry keyword="registering exit function">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="scheduling parameters">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
   <entry keyword="specifying scheduling policy">
    <topic href="s1_procs.html#id80" title="The “scheduling” thread attributes"/>
   </entry>
   <entry keyword="specifying stack">
    <topic href="s1_procs.html#thread_attr" title="The thread attributes structure"/>
   </entry>
  </entry>
  <entry keyword="creating on timer expiration">
   <topic href="s1_timer.html#sigev_thread" title="Thread notification"/>
  </entry>
  <entry keyword="creating via struct sigevent">
   <topic href="s1_timer.html#sigev_thread" title="Thread notification"/>
  </entry>
  <entry keyword="deadlock">
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="design abstraction">
   <topic href="s1_procs.html#id27" title="Multiple CPU (SMP)"/>
  </entry>
  <entry keyword="example of creation">
   <topic href="s1_procs.html#id82" title="A few examples"/>
  </entry>
  <entry keyword="FIFO scheduling">
   <topic href="s1_procs.html#id33" title="Scheduling policies"/>
  </entry>
  <entry keyword="fork()">
   <topic href="s1_procs.html#id69" title="So what should you use?"/>
  </entry>
  <entry keyword="fundamentals">
   <topic href="s1_procs.html#Fundamentals" title="Process and thread fundamentals"/>
  </entry>
  <entry keyword="in mathematical operations">
   <topic href="s1_procs.html#parallel" title="Threads in mathematical operations"/>
  </entry>
  <entry keyword="in process">
   <topic href="s1_procs.html#Threads_and_processes" title="Threads and processes"/>
  </entry>
  <entry keyword="interrupt interaction">
   <topic href="s1_inter.html#id35" title="ISR functions"/>
  </entry>
  <entry keyword="interrupt interactions">
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
  <entry keyword="interrupts">
   <topic href="s1_inter.html#id8" title="Telling a thread to do something"/>
  </entry>
  <entry keyword="message passing">
   <topic href="s1_msg.html#id42" title="More about channels"/>
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
  </entry>
  <entry keyword="multiple threads">
   <topic href="s1_procs.html#id10" title="Multi threaded"/>
  </entry>
  <entry keyword="mutex">
   <topic href="s1_procs.html#mutex" title="Mutual exclusion"/>
  </entry>
  <entry keyword="operating periodically">
   <topic href="s1_timer.html#Clocks" title="Clocks and timers"/>
  </entry>
  <entry keyword="pidin">
   <topic href="s1_procs.html#id82" title="A few examples"/>
  </entry>
  <entry keyword="polling for completion">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="pool">
   <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
   <topic href="s1_procs.html#tpool" title="Pools of threads"/>
   <entry keyword="analysis">
    <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
   </entry>
   <entry keyword="and SMP">
    <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
   </entry>
   <entry keyword="example">
    <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
   </entry>
   <entry keyword="functions">
    <topic href="s1_procs.html#tpool" title="Pools of threads"/>
   </entry>
   <entry keyword="message passing">
    <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
   </entry>
   <entry keyword="POOL_FLAG_EXIT_SELF">
    <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
   </entry>
   <entry keyword="POOL_FLAG_USE_SELF">
    <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
   </entry>
  </entry>
  <entry keyword="POSIX">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="postmortem stack analysis">
   <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
  </entry>
  <entry keyword="preemption">
   <topic href="s1_procs.html#id31" title="Prioritization"/>
  </entry>
  <entry keyword="priorities">
   <topic href="s1_procs.html#id15" title="Priorities"/>
  </entry>
  <entry keyword="Processes">
   <topic href="s1_procs.html#Fundamentals" title="Process and thread fundamentals"/>
  </entry>
  <entry keyword="processes">
   <topic href="s1_procs.html#id97" title="Multiple processes with shared memory"/>
   <topic href="s1_procs.html#id99" title="Multiple threads"/>
  </entry>
  <entry keyword="pthread_join()">
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="readers/writer locks">
   <topic href="s1_procs.html#rwlocks" title="Readers/writer locks"/>
  </entry>
  <entry keyword="readied by timer">
   <topic href="s1_timer.html#id70" title="Summary"/>
  </entry>
  <entry keyword="readying via message pass">
   <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  </entry>
  <entry keyword="resumption">
   <topic href="s1_procs.html#id31" title="Prioritization"/>
  </entry>
  <entry keyword="RR scheduling">
   <topic href="s1_procs.html#id33" title="Scheduling policies"/>
  </entry>
  <entry keyword="scheduling policies">
   <topic href="s1_procs.html#id33" title="Scheduling policies"/>
  </entry>
  <entry keyword="scheduling policy">
   <topic href="s1_procs.html#id29" title="The kernel as arbiter"/>
  </entry>
  <entry keyword="semaphore">
   <topic href="s1_procs.html#semaphore" title="Semaphores"/>
  </entry>
  <entry keyword="single threads">
   <topic href="s1_procs.html#id8" title="Single threaded"/>
  </entry>
  <entry keyword="SMP">
   <topic href="s1_procs.html#parallel" title="Threads in mathematical operations"/>
   <entry keyword="and interrupts">
    <topic href="s1_procs.html#smpbeware" title="Things to watch out for when using SMP"/>
   </entry>
   <entry keyword="concurrency">
    <topic href="s1_procs.html#smpbeware" title="Things to watch out for when using SMP"/>
   </entry>
   <entry keyword="determining how many threads to create">
    <topic href="s1_procs.html#parallel" title="Threads in mathematical operations"/>
   </entry>
   <entry keyword="timing diagram">
    <topic href="s1_procs.html#id91" title="Multiple threads on a single CPU"/>
   </entry>
  </entry>
  <entry keyword="soaker">
   <topic href="s1_procs.html#id91" title="Multiple threads on a single CPU"/>
  </entry>
  <entry keyword="stack">
   <topic href="s1_procs.html#id78" title="The “stack” thread attributes"/>
  </entry>
  <entry keyword="states">
   <entry keyword="receive-blocked">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="receive-blocked diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="reply-blocked">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="reply-blocked diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="send-blocked">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="send-blocked diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="STATE_READY">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="STATE_RECV ">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="STATE_RECV diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="STATE_REPLY ">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="STATE_REPLY diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="STATE_SEND ">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
   <entry keyword="STATE_SEND diagram">
    <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
   </entry>
  </entry>
  <entry keyword="synchronizing to termination of">
   <topic href="s1_procs.html#id88" title="Joining"/>
   <topic href="s1_procs.html#sync2term" title="Synchronizing to the termination of a thread"/>
  </entry>
  <entry keyword="utilizing SMP">
   <topic href="s1_procs.html#id91" title="Multiple threads on a single CPU"/>
  </entry>
  <entry keyword="where to use">
   <topic href="s1_procs.html#independent" title="Threads in independent situations"/>
   <topic href="s1_procs.html#where" title="Where a thread is a good idea"/>
  </entry>
 </entry>
 <entry keyword="thread pool">
  <entry keyword="message passing">
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
 </entry>
 <entry keyword="thread_pool() family">
  <topic href="s1_msg.html#Multiple_threads" title="Multiple threads"/>
 </entry>
 <entry keyword="thread_pool_attr_t">
  <topic href="s1_procs.html#tpool" title="Pools of threads"/>
 </entry>
 <entry keyword="thread_pool_control()">
  <topic href="s1_procs.html#tpool" title="Pools of threads"/>
 </entry>
 <entry keyword="thread_pool_create()">
  <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  <topic href="s1_procs.html#tpool" title="Pools of threads"/>
  <entry keyword="example">
   <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  </entry>
 </entry>
 <entry keyword="thread_pool_destroy()">
  <topic href="s1_procs.html#tpool" title="Pools of threads"/>
 </entry>
 <entry keyword="thread_pool_limits()">
  <topic href="s1_procs.html#tpool" title="Pools of threads"/>
 </entry>
 <entry keyword="thread_pool_start()">
  <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  <topic href="s1_procs.html#tpool" title="Pools of threads"/>
  <entry keyword="example">
   <topic href="s1_procs.html#Number_of_threads" title="Controlling the number of threads"/>
  </entry>
 </entry>
 <entry keyword="ThreadCtl()">
  <topic href="s1_inter.html#id19" title="Now that you've attached an interrupt"/>
 </entry>
 <entry keyword="ticksize">
  <topic href="s1_procs.html#id37" title="Round Robin"/>
 </entry>
 <entry keyword="time">
  <entry keyword="adjusting forwards or backwards">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
  <entry keyword="adjusting gradually">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
  <entry keyword="discontinuities in flow">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
  <entry keyword="retarding flow of">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
  <entry keyword="synchronizing current time of day">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
 </entry>
 <entry keyword="time()">
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
 </entry>
 <entry keyword="timebase">
  <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
 </entry>
 <entry keyword="timeout">
  <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  <entry keyword="and kernel states">
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  </entry>
  <entry keyword="arming">
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
  <entry keyword="clearing">
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  </entry>
  <entry keyword="kernel timeouts">
   <topic href="s1_timer.html#notes" title="Notes"/>
  </entry>
  <entry keyword="pthread_join()">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="server-driven">
   <topic href="s1_timer.html#notes" title="Notes"/>
  </entry>
  <entry keyword="server-maintained">
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
   <entry keyword="example">
    <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
    <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
    <topic href="s1_timer.html#main" title="main()"/>
    <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   </entry>
  </entry>
  <entry keyword="triggering">
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  </entry>
  <entry keyword="unblocking">
   <entry keyword="client">
    <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
   </entry>
  </entry>
  <entry keyword="with pthread_join()">
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
 </entry>
 <entry keyword="timeout notification">
  <topic href="s1_timer.html#id15" title="Notification schemes"/>
  <entry keyword="pulse">
   <topic href="s1_timer.html#id25" title="Pulse notification"/>
  </entry>
  <entry keyword="signal">
   <topic href="s1_timer.html#id27" title="Signal notification"/>
  </entry>
 </entry>
 <entry keyword="timer">
  <entry keyword="10 millisecond">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="time.h">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="absolute">
   <topic href="s1_timer.html#id70" title="Summary"/>
   <topic href="s1_timer.html#id13" title="Types of timers"/>
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
   <entry keyword="example">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
  </entry>
  <entry keyword="accuracy">
   <topic href="s1_timer.html#id7" title="Base timing resolution"/>
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
   <topic href="s1_timer.html#id11" title="Timing jitter"/>
  </entry>
  <entry keyword="adjusting base timing resolution">
   <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
  </entry>
  <entry keyword="asynchronous nature">
   <topic href="s1_timer.html#id11" title="Timing jitter"/>
  </entry>
  <entry keyword="behavior if expired">
   <topic href="s1_timer.html#id7" title="Base timing resolution"/>
  </entry>
  <entry keyword="changing resolution">
   <topic href="s1_timer.html#id9" title="Getting more precision"/>
  </entry>
  <entry keyword="CLOCK_MONOTONIC">
   <topic href="s1_timer.html#id30" title="Creating a timer"/>
  </entry>
  <entry keyword="CLOCK_REALTIME">
   <topic href="s1_timer.html#id30" title="Creating a timer"/>
  </entry>
  <entry keyword="CLOCK_SOFTTIME">
   <topic href="s1_timer.html#id30" title="Creating a timer"/>
  </entry>
  <entry keyword="ClockPeriod()">
   <topic href="s1_timer.html#id52" title="Getting and setting"/>
  </entry>
  <entry keyword="converting time formats">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="creating">
   <topic href="s1_timer.html#id30" title="Creating a timer"/>
  </entry>
  <entry keyword="creating a thread">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
   <topic href="s1_timer.html#sigev_thread" title="Thread notification"/>
  </entry>
  <entry keyword="creating threads on expiry">
   <topic href="s1_timer.html#id15" title="Notification schemes"/>
  </entry>
  <entry keyword="creating threads on trigger">
   <topic href="s1_timer.html#id49" title="Timers creating threads"/>
  </entry>
  <entry keyword="delivering a pulse">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
  <entry keyword="delivering a signal">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
  <entry keyword="diagram showing big picture">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
  <entry keyword="drift">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
  <entry keyword="flags">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="getting and setting the realtime clock">
   <topic href="s1_timer.html#getsetrtclock" title="Getting and setting the realtime clock and more"/>
  </entry>
  <entry keyword="hardware divider">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
  <entry keyword="hardware divisor">
   <topic href="s1_timer.html#clock_int_src" title="Clock interrupt sources"/>
  </entry>
  <entry keyword="implementation">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
   <topic href="s1_timer.html#id70" title="Summary"/>
   <topic href="s1_timer.html#id13" title="Types of timers"/>
  </entry>
  <entry keyword="improving accuracy">
   <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
  </entry>
  <entry keyword="inactivity shutdown">
   <topic href="s1_timer.html#id45" title="Periodic server maintenance cycles"/>
  </entry>
  <entry keyword="jitter">
   <topic href="s1_timer.html#id11" title="Timing jitter"/>
   <entry keyword="diagram">
    <topic href="s1_timer.html#id11" title="Timing jitter"/>
   </entry>
  </entry>
  <entry keyword="kernel timeouts">
   <topic href="s1_timer.html#id70" title="Summary"/>
  </entry>
  <entry keyword="limits on base timing resolution">
   <topic href="s1_timer.html#id54" title="Adjusting the timebase"/>
  </entry>
  <entry keyword="one-shot">
   <topic href="s1_timer.html#id13" title="Types of timers"/>
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   <entry keyword="example">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
  </entry>
  <entry keyword="periodic">
   <topic href="s1_timer.html#id13" title="Types of timers"/>
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   <entry keyword="and server maintenance">
    <topic href="s1_timer.html#id45" title="Periodic server maintenance cycles"/>
   </entry>
   <entry keyword="and servers">
    <topic href="s1_timer.html#id36" title="A server with periodic pulses"/>
   </entry>
   <entry keyword="example">
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
  </entry>
  <entry keyword="polling">
   <topic href="s1_timer.html#id45" title="Periodic server maintenance cycles"/>
  </entry>
  <entry keyword="preemption">
   <topic href="s1_timer.html#id11" title="Timing jitter"/>
  </entry>
  <entry keyword="pulse versus signal">
   <topic href="s1_timer.html#id27" title="Signal notification"/>
  </entry>
  <entry keyword="pulses">
   <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
   <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
   <topic href="s1_timer.html#main" title="main()"/>
   <topic href="s1_timer.html#id15" title="Notification schemes"/>
   <topic href="s1_timer.html#id18" title="Pulse notification"/>
   <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
   <topic href="s1_msg.html#id69" title="The MsgReceivePulse() function"/>
  </entry>
  <entry keyword="putting a thread on hold">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="readying a thread">
   <topic href="s1_timer.html#id70" title="Summary"/>
   <topic href="s1_timer.html#id11" title="Timing jitter"/>
  </entry>
  <entry keyword="relative">
   <topic href="s1_timer.html#id70" title="Summary"/>
   <topic href="s1_timer.html#id13" title="Types of timers"/>
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
   <entry keyword="example">
    <topic href="s1_timer.html#gotAMessage" title="gotAMessage()"/>
    <topic href="s1_timer.html#gotAPulse" title="gotAPulse()"/>
    <topic href="s1_timer.html#main" title="main()"/>
    <topic href="s1_timer.html#server_timeouts" title="Server-maintained timeouts"/>
    <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
    <topic href="s1_timer.html#id34" title="What kind of timer?"/>
   </entry>
  </entry>
  <entry keyword="repeating">
   <entry keyword="defined">
    <topic href="s3_glossary.html" title="Glossary"/>
   </entry>
  </entry>
  <entry keyword="resolving">
   <topic href="s1_timer.html#id7" title="Base timing resolution"/>
  </entry>
  <entry keyword="scheduling an event in the future">
   <topic href="s1_timer.html#id13" title="Types of timers"/>
  </entry>
  <entry keyword="sending a signal">
   <topic href="s1_timer.html#id20" title="Signal notification"/>
   <entry keyword="specifying code number">
    <topic href="s1_timer.html#id20" title="Signal notification"/>
   </entry>
   <entry keyword="specifying signal number">
    <topic href="s1_timer.html#id20" title="Signal notification"/>
   </entry>
  </entry>
  <entry keyword="setting type">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="SIGALRM">
   <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
  </entry>
  <entry keyword="SIGEV_THREAD">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
  <entry keyword="signals">
   <topic href="s1_timer.html#id15" title="Notification schemes"/>
   <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
   <entry keyword="specifying a signal">
    <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
   </entry>
  </entry>
  <entry keyword="SIGUSR1">
   <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
  </entry>
  <entry keyword="specifying sub-second values">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="starting">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="struct itimerspec">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="struct sigevent">
   <topic href="s1_timer.html#how_sigev" title="How to fill in the struct sigevent"/>
  </entry>
  <entry keyword="struct timespec">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="timeout notification">
   <topic href="s1_timer.html#id15" title="Notification schemes"/>
   <entry keyword="by pulse">
    <topic href="s1_timer.html#id25" title="Pulse notification"/>
   </entry>
   <entry keyword="by signal">
    <topic href="s1_timer.html#id27" title="Signal notification"/>
   </entry>
  </entry>
  <entry keyword="TIMER_ABSTIME">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="timer_create()">
   <topic href="s1_timer.html#id30" title="Creating a timer"/>
  </entry>
  <entry keyword="timer_settime()">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="types">
   <topic href="s1_timer.html#id13" title="Types of timers"/>
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="usage examples">
   <topic href="s1_timer.html#id36" title="A server with periodic pulses"/>
  </entry>
  <entry keyword="using">
   <topic href="s1_timer.html#using" title="Using timers"/>
  </entry>
  <entry keyword="using pulses with servers">
   <topic href="s1_timer.html#id25" title="Pulse notification"/>
  </entry>
  <entry keyword="warm-up timer">
   <topic href="s1_timer.html#id45" title="Periodic server maintenance cycles"/>
  </entry>
 </entry>
 <entry keyword="TIMER_ABSTIME">
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
 </entry>
 <entry keyword="timer_create()">
  <topic href="s1_timer.html#id60" title="CLOCK_MONOTONIC"/>
  <topic href="s1_timer.html#id30" title="Creating a timer"/>
  <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  <topic href="s1_timer.html#id32" title="Signal, pulse, or thread?"/>
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  <entry keyword="example">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
  <entry keyword="flags argument">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="signal example">
   <topic href="s1_timer.html#id47" title="Timers delivering signals"/>
  </entry>
 </entry>
 <entry keyword="timer_settime()">
  <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  <entry keyword="and TIMER_ABSTIME">
   <topic href="s1_timer.html#id34" title="What kind of timer?"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_timer.html#setupPulseAndTimer" title="setupPulseAndTimer()"/>
  </entry>
 </entry>
 <entry keyword="TimerTimeout()">
  <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  <topic href="s3_qnx2nto.html#id12" title="Message passing"/>
  <topic href="s1_msg.html#ntochfunblock" title="_NTO_CHF_UNBLOCK"/>
  <topic href="s1_msg.html#id45" title="The receive ID (a.k.a. the client cookie)"/>
  <entry keyword="and CLOCK_REALTIME">
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  </entry>
  <entry keyword="example">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
   <topic href="s1_timer.html#Thread_Join" title="Kernel timeouts with pthread_join()"/>
  </entry>
  <entry keyword="specifying multiple kernel states">
   <topic href="s1_timer.html#id68" title="Kernel timeouts with message passing"/>
  </entry>
 </entry>
 <entry keyword="timeslice">
  <topic href="s1_procs.html#id37" title="Round Robin"/>
 </entry>
 <entry keyword="timestamps">
  <topic href="s1_timer.html#id56" title="An accurate timestamp"/>
 </entry>
 <entry keyword="timing">
  <entry keyword="busy wait">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="fine grained">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="high accuracy">
   <topic href="s1_timer.html#id56" title="An accurate timestamp"/>
  </entry>
  <entry keyword="hogging CPU">
   <topic href="s1_timer.html#id4" title="Operating periodically"/>
  </entry>
  <entry keyword="using ClockCycles()">
   <topic href="s1_timer.html#id56" title="An accurate timestamp"/>
  </entry>
 </entry>
 <entry keyword="tips">
  <entry keyword="broadcast versus signal">
   <topic href="s1_procs.html#id107" title="Signal versus broadcast"/>
  </entry>
  <entry keyword="SMP gotchas">
   <topic href="s1_procs.html#smpbeware" title="Things to watch out for when using SMP"/>
  </entry>
  <entry keyword="when to use condvar">
   <topic href="s1_procs.html#id109" title="Sleepons versus condvars"/>
  </entry>
  <entry keyword="when to use sleepon">
   <topic href="s1_procs.html#id109" title="Sleepons versus condvars"/>
  </entry>
  <entry keyword="where to use a thread">
   <topic href="s1_procs.html#independent" title="Threads in independent situations"/>
   <topic href="s1_procs.html#where" title="Where a thread is a good idea"/>
  </entry>
 </entry>
 <entry keyword="Transparent Distributed Processing (TDP)">
  <topic href="s1_msg.html#id42" title="More about channels"/>
  <entry keyword="See also Qnet"/>
 </entry>
 <entry keyword="Trigger() (QNX 4)">
  <topic href="s3_qnx2nto.html#pp-proxy" title="Proxies"/>
 </entry>
 <entry keyword="triggering timeouts">
  <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
 </entry>
 <entry keyword="Trunley, Paul">
  <topic href="preface.html" title="Preface to the First Edition by Rob Krten"/>
 </entry>
 <entry keyword="typographical conventions">
  <topic href="about.html#Typographical_conventions" title="Typographical conventions"/>
 </entry>
 <entry keyword="unblock">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
  <entry keyword="using a timeout">
   <topic href="s1_timer.html#kto" title="Kernel timeouts"/>
  </entry>
 </entry>
 <entry keyword="unblock_func()">
  <topic href="s1_procs.html#id114" title="The thread pool functions"/>
 </entry>
 <entry keyword="union sigval">
  <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  <entry keyword="declaration">
   <topic href="s1_msg.html#id67" title="What's in a pulse?"/>
  </entry>
 </entry>
 <entry keyword="unit testing">
  <entry keyword="message passing">
   <topic href="s1_msg.html#What_it_means" title="What it means for you"/>
  </entry>
 </entry>
 <entry keyword="vfork()">
  <topic href="s1_procs.html#id69" title="So what should you use?"/>
  <topic href="s1_procs.html#id57" title="Starting a process from within a program"/>
  <topic href="s1_procs.html#id65" title="Starting a process with the vfork() call"/>
  <topic href="s1_procs.html#id123" title="Summary"/>
 </entry>
 <entry keyword="virtual address">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="virtual memory">
  <entry keyword="defined">
   <topic href="s3_glossary.html" title="Glossary"/>
  </entry>
 </entry>
 <entry keyword="volatile">
  <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  <entry keyword="and interrupts">
   <topic href="s1_inter.html#Summary" title="Summary"/>
   <topic href="s1_inter.html#id27" title="Using InterruptAttach()"/>
  </entry>
 </entry>
 <entry keyword="waitpid()">
  <topic href="s1_procs.html#id61" title="Starting a process with the exec() and spawn() calls"/>
 </entry>
 <entry keyword="warm-up timer">
  <topic href="s1_timer.html#id45" title="Periodic server maintenance cycles"/>
 </entry>
 <entry keyword="website, QNX">
  <topic href="s3_help.html#id23" title="Contact technical support"/>
 </entry>
 <entry keyword="write()">
  <topic href="s3_qnx2nto.html#id29" title="Client/Server using an I/O manager"/>
  <topic href="s3_glossary.html" title="Glossary"/>
  <topic href="s1_msg.html#mpcs" title="Message passing and client/server"/>
  <topic href="s1_msg.html#id58" title="Multipart messages"/>
  <topic href="s1_msg.html#id56" title="Reading and writing data"/>
  <topic href="s3_qnx2nto.html#id26" title="Translating messages to standard file-descriptor-based POSIX calls"/>
 </entry>
 <entry keyword="www.qnx.com">
  <topic href="s3_help.html#id23" title="Contact technical support"/>
 </entry>
</index>
