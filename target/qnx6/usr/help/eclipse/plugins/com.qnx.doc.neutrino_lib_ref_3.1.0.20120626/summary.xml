<function_summary>
<function
   name="abort"
   summary="Raise the SIGABRT signal to terminate program execution"
   synopsis="#include &lt;stdlib.h&gt;\n void abort( void );\n"
/>
<function
   name="abs"
   summary="Return the absolute value of an integer"
   synopsis="#include &lt;stdlib.h&gt;\n int abs( int j );\n"
/>
<function
   name="accept"
   summary="Accept a connection on a socket"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n int accept( int s, struct sockaddr * addr, socklen_t * addrlen );\n"
/>
<function
   name="access"
   summary="Check to see if a file or directory can be accessed"
   synopsis="#include &lt;unistd.h&gt;\n int access( const char * path, int amode );\n"
/>
<function
   name="acos, acosf, acosl"
   summary="Compute the arccosine of an angle"
   synopsis="#include &lt;math.h&gt;\n double acos( double x );\n float acosf( float x );\n long double acosl( long double x );\n"
/>
<function
   name="acosh, acoshf, acoshl"
   summary="Compute the inverse hyperbolic cosine"
   synopsis="#include &lt;math.h&gt;\n double acosh( double x );\n float acoshf( float x );\n long double acoshl( long double x );\n"
/>
<function
   name="aio_cancel"
   summary="Cancel an asynchronous I/O operation"
   synopsis="#include &lt;aio.h&gt;\n int aio_cancel( int fd, struct aiocb * aiocbptr );\n"
/>
<function
   name="aio_error"
   summary="Get the error status for an asynchronous I/O operation"
   synopsis="#include &lt;aio.h&gt;\n int aio_error( const struct aiocb * aiocbptr );\n"
/>
<function
   name="aio_fsync"
   summary="Asynchronously synchronize a file"
   synopsis="#include &lt;aio.h&gt;\n int aio_fsync( int op, struct aiocb * aiocbptr );\n"
/>
<function
   name="aio_read"
   summary="Asynchronously read from a file"
   synopsis="#include &lt;aio.h&gt;\n int aio_read( struct aiocb * aiocbptr );\n"
/>
<function
   name="aio_return"
   summary="Get the return status for an asynchronous I/O operation"
   synopsis="#include &lt;aio.h&gt;\n ssize_t aio_return( struct aiocb * aiocbptr );\n"
/>
<function
   name="aio_suspend"
   summary="Wait for asynchronous I/O operations to be completed"
   synopsis="#include &lt;aio.h&gt;\n int aio_suspend( const struct aiocb * const list[], int nent, const struct timespec * timeout );\n"
/>
<function
   name="aio_write"
   summary="Asynchronously write to a file"
   synopsis="#include &lt;aio.h&gt;\n int aio_write( struct aiocb * aiocbptr );\n"
/>
<function
   name="alarm"
   summary="Schedule an alarm"
   synopsis="#include &lt;unistd.h&gt;\n unsigned int alarm( unsigned int seconds );\n"
/>
<function
   name="alloca"
   summary="Allocate automatic space from the stack"
   synopsis="#include &lt;alloca.h&gt;\n void* alloca( size_t size );\n"
/>
<function
   name="alphasort"
   summary="Compare two directory entries"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/dir.h&gt;\n struct direct { unsigned long d_fileno; unsigned short d_reclen; unsigned short d_namlen; char d_name[1]; }; int alphasort( struct direct **d1, struct direct **d2);\n"
/>
<function
   name="asctime, asctime_r"
   summary="Convert time information to a string"
   synopsis="#include &lt;time.h&gt;\n char* asctime( const struct tm* timeptr );\n char* asctime_r( const struct tm* timeptr, char* buf );\n"
/>
<function
   name="asin, asinf, asinl"
   summary="Compute the arcsine of an angle"
   synopsis="#include &lt;math.h&gt;\n double asin( double x );\n float asinf( float x );\n long double asinl( long double x );\n"
/>
<function
   name="asinh, asinhf, asinhl"
   summary="Compute the inverse hyperbolic sine"
   synopsis="#include &lt;math.h&gt;\n double asinh( double x );\n float asinhf( float x );\n long double asinhl( long double x );\n"
/>
<function
   name="assert"
   summary="Print a diagnostic message and optionally terminate the program"
   synopsis="#include &lt;assert.h&gt;\n void assert( int expression );\n"
/>
<function
   name="asyncmsg_channel_create"
   summary="Create an asynchronous message channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/asyncmsg.h&gt;\n int asyncmsg_channel_create ( unsigned flags, mode_t mode, size_t buffer_size, unsigned max_num_buffer, const struct sigevent *ev, int (*recvbuf_callback) ( size_t bufsize, unsigned num_bufs, void *bufs[], int flags, void *handle ), void *recvbuf_callback_handle );\n"
/>
<function
   name="asyncmsg_channel_destroy"
   summary="Destroy an asynchronous message channel"
   synopsis="#include &lt;sys/asyncmsg.h&gt;\n int asyncmsg_channel_destroy( int chid );\n"
/>
<function
   name="asyncmsg_connect_attach"
   summary="Establish a connection to be used for asynchronous messages between a process and a channel"
   synopsis="#include &lt;sys/asyncmsg.h&gt;\n int asyncmsg_connect_attach ( uint32_t nd, pid_t pid, int chid, unsigned index, unsigned flags, const struct _asyncmsg_connection_attr * attr);\n"
/>
<function
   name="asyncmsg_connect_attr"
   summary="Examine or change connection attributes for asynchronous messaging"
   synopsis="#include &lt;sys/asyncmsg.h&gt;\n int asyncmsg_connect_attr ( int coid, struct _asyncmsg_connection_attr *old_attr, const struct _asyncmsg_connection_attr *new_attr);\n"
/>
<function
   name="asyncmsg_connect_detach"
   summary="Break a connection used for asynchronous messages between a process and a channel"
   synopsis="#include &lt;sys/asyncmsg.h&gt;\n int asyncmsg_connect_detach( int coid );\n"
/>
<function
   name="asyncmsg_flush"
   summary="Flush the asynchronous messages sent through a connection"
   synopsis="#include &lt;sys/asyncmsg.h&gt;\n int asyncmsg_flush( int coid, int mode );\n"
/>
<function
   name="asyncmsg_free"
   summary="Free a message buffer used for asynchronous messaging"
   synopsis="#include &lt;sys/asyncmsg.h&gt;\n void asyncmsg_free( void *buf);\n"
/>
<function
   name="asyncmsg_get"
   summary="Receive an asynchronous message"
   synopsis="#include &lt;sys/asyncmsg.h&gt;\n struct _asyncmsg_get_header *asyncmsg_get( int chid );\n"
/>
<function
   name="asyncmsg_malloc"
   summary="Allocate a message buffer for sending an asynchronous message"
   synopsis="#include &lt;sys/asyncmsg.h&gt;\n void *asyncmsg_malloc( size_t size );\n"
/>
<function
   name="asyncmsg_put, asyncmsg_putv"
   summary="Send an asynchronous message to a connection"
   synopsis="#include &lt;sys/asyncmsg.h&gt;\n int asyncmsg_put( int coid, const void *buff, size_t size, unsigned handle), int (*call_back) ( int err, void* buf, unsigned handle ));\n int asyncmsg_putv( int coid, const iov_t* iov, int parts, unsigned handle, int (*call_back) ( int err, void* buf, unsigned handle ));\n"
/>
<function
   name="atan, atanf, atanl"
   summary="Compute the arctangent of an angle"
   synopsis="#include &lt;math.h&gt;\n double atan( double x );\n float atanf( float x );\n long double atanl( long double x );\n"
/>
<function
   name="atan2, atan2f"
   summary="Compute the arctangent, determining the quadrant"
   synopsis="#include &lt;math.h&gt;\n double atan2( double y, double x );\n float atan2f( float y, float x );\n"
/>
<function
   name="atanh, atanhf, atanhl"
   summary="Compute an inverse hyperbolic tangent"
   synopsis="#include &lt;math.h&gt;\n double atanh( double x );\n float atanhf( float x );\n long double atanhl( long double x );\n"
/>
<function
   name="atexit"
   summary="Register functions to be called during normal program termination"
   synopsis="#include &lt;stdlib.h&gt;\n int atexit( register void (*func)(void) );\n"
/>
<function
   name="atof"
   summary="Convert a string into a double"
   synopsis="#include &lt;stdlib.h&gt;\n double atof( const char* ptr );\n"
/>
<function
   name="atoh"
   summary="Convert a string containing a hexadecimal number into an unsigned number"
   synopsis="#include &lt;stdlib.h&gt;\n unsigned atoh( const char* ptr );\n"
/>
<function
   name="atoi"
   summary="Convert a string into an integer"
   synopsis="#include &lt;stdlib.h&gt;\n int atoi( const char* ptr );\n"
/>
<function
   name="atol, atoll"
   summary="Convert a string into a long integer"
   synopsis="#include &lt;stdlib.h&gt;\n long atol( const char* ptr );\n long long atoll( const char* ptr );\n"
/>
<function
   name="atomic_add"
   summary="Safely add to a variable"
   synopsis="#include &lt;atomic.h&gt;\n void atomic_add( volatile unsigned * loc, unsigned incr );\n"
/>
<function
   name="atomic_add_value"
   summary="Safely add to a variable, returning the previous value"
   synopsis="#include &lt;atomic.h&gt;\n unsigned atomic_add_value( volatile unsigned * loc, unsigned incr );\n"
/>
<function
   name="atomic_clr"
   summary="Safely clear a variable"
   synopsis="#include &lt;atomic.h&gt;\n void atomic_clr( volatile unsigned * loc, unsigned bits );\n"
/>
<function
   name="atomic_clr_value"
   summary="Safely clear a variable, returning the previous value"
   synopsis="#include &lt;atomic.h&gt;\n unsigned atomic_clr_value( volatile unsigned * loc, unsigned bits );\n"
/>
<function
   name="atomic_set"
   summary="Safely set bits in a variable"
   synopsis="#include &lt;atomic.h&gt;\n void atomic_set( volatile unsigned * loc, unsigned bits );\n"
/>
<function
   name="atomic_set_value"
   summary="Safely set bits in a variable, returning the previous value"
   synopsis="#include &lt;atomic.h&gt;\n unsigned atomic_set_value( volatile unsigned * loc, unsigned bits );\n"
/>
<function
   name="atomic_sub"
   summary="Safely subtract from a variable"
   synopsis="#include &lt;atomic.h&gt;\n void atomic_sub( volatile unsigned * loc, unsigned decr );\n"
/>
<function
   name="atomic_sub_value"
   summary="Safely subtract from a variable, returning the previous value"
   synopsis="#include &lt;atomic.h&gt;\n unsigned atomic_sub_value( volatile unsigned * loc, unsigned decr );\n"
/>
<function
   name="atomic_toggle"
   summary="Safely toggle a variable"
   synopsis="#include &lt;atomic.h&gt;\n void atomic_toggle( volatile unsigned * loc, unsigned bits );\n"
/>
<function
   name="atomic_toggle_value"
   summary="Safely toggle a variable, returning the previous value"
   synopsis="#include &lt;atomic.h&gt;\n unsigned atomic_toggle_value( volatile unsigned * loc, unsigned bits );\n"
/>
<function
   name="basename"
   summary="Find the part of a string after the last slash (/)"
   synopsis="#include &lt;libgen.h&gt;\n char* basename( char* path );\n"
/>
<function
   name="bcmp"
   summary="Compare a given number of characters in two strings"
   synopsis="#include &lt;strings.h&gt;\n int bcmp( const void *s1, const void *s2, size_t n );\n"
/>
<function
   name="bcopy"
   summary="Copy a number of characters in one string to another"
   synopsis="#include &lt;strings.h&gt;\n void bcopy( const void *src, void *dst, size_t n );\n"
/>
<function
   name="bind"
   summary="Bind a name to a socket"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n int bind( int s, const struct sockaddr * name, socklen_t namelen );\n"
/>
<function
   name="bindresvport"
   summary="Bind a socket to a privileged IP port"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;netinet/in.h&gt;\n int bindresvport( int sd, struct sockaddr_in * sin );\n"
/>
<function
   name="brk"
   summary="Change the amount of space allocated for the calling process's data segment"
   synopsis="#include &lt;unistd.h&gt;\n int brk( void* endds );\n"
/>
<function
   name="bsearch"
   summary="Perform a binary search on a sorted array"
   synopsis="#include &lt;stdlib.h&gt;\n void *bsearch( const void *key, const void *base, size_t num, size_t width, int (*compar)( const void *pkey, const void *pbase) );\n"
/>
<function
   name="bt_get_backtrace"
   summary="Collect a backtrace"
   synopsis="#include &lt;backtrace.h&gt;\n int bt_get_backtrace( bt_accessor_t *acc, bt_addr_t *addrs, int len );\n"
/>
<function
   name="bt_init_accessor"
   summary="Initialize a backtrace accessor"
   synopsis="#include &lt;backtrace.h&gt;\n int bt_init_accessor( bt_accessor_t *acc, bt_acc_type_t type, ...);\n"
/>
<function
   name="bt_load_memmap"
   summary="Load a memory map associated with a backtrace"
   synopsis="#include &lt;backtrace.h&gt;\n int bt_load_memmap( bt_accessor_t *acc, bt_memmap_t * memmap );\n"
/>
<function
   name="bt_release_accessor"
   summary="Release an accessor for a backtrace"
   synopsis="#include &lt;backtrace.h&gt;\n int bt_release_accessor(bt_accessor_t *acc);\n"
/>
<function
   name="bt_set_flags"
   summary="Set or clear the flags for backtracing"
   synopsis="#include &lt;backtrace.h&gt;\n int bt_set_flags( bt_accessor_t *acc, unsigned flags, int onoff );\n"
/>
<function
   name="bt_sprn_memmap"
   summary="Format the memory map information for a backtrace"
   synopsis="#include &lt;backtrace.h&gt;\n int bt_sprn_memmap( bt_memmap_t *memmap, char *out, size_t outlen );\n"
/>
<function
   name="bt_sprnf_addrs"
   summary="Format the addresses from a backtrace"
   synopsis="#include &lt;backtrace.h&gt;\n int bt_sprnf_addrs( bt_memmap_t *memmap, bt_addr_t *addrs, int addrslen, char *fmt, char *out, size_t outlen, char *separator );\n"
/>
<function
   name="bt_translate_addrs"
   summary="Translate the addresses from a backtrace"
   synopsis="#include &lt;backtrace.h&gt;\n void bt_translate_addrs( bt_memmap_t *memmap, bt_addr_t *addrs, int addrslen, bt_addr_t *reladdrs, bt_addr_t *offsets, int *index, char **filenames );\n"
/>
<function
   name="bt_unload_memmap"
   summary="Unload a memory map associated with a backtrace"
   synopsis="#include &lt;backtrace.h&gt;\n void bt_unload_memmap( bt_memmap_t *memmap );\n"
/>
<function
   name="btowc"
   summary="Convert a single-byte character to a wide character"
   synopsis="#include &lt;wchar.h&gt;\n wint_t btowc( int c );\n"
/>
<function
   name="bzero"
   summary="Set the first part of an object to null bytes"
   synopsis="#include &lt;strings.h&gt;\n void bzero( void *dst, size_t n );\n"
/>
<function
   name="cabs, cabsf"
   summary="Compute the absolute value of a complex number"
   synopsis="#include &lt;math.h&gt;\n struct __cabsargs { double x; /* real part */ double y; /* imaginary part */ }; double cabs( struct __cabsargs value );\n struct __cabsfargs { float x; /* real part */ float y; /* imaginary part */ }; float cabsf( struct __cabsfargs value );\n"
/>
<function
   name="cache_fini"
   summary="Free cache-coherency resources when the driver is unloaded"
   synopsis="int cache_fini(struct cache_ctrl *cinfo);\n"
/>
<function
   name="CACHE_FLUSH"
   summary="Flush cache lines associated with  a data buffer"
   synopsis="#include &lt;sys/cache.h&gt;\n CACHE_FLUSH(struct cache_ctrl *cinfo, void *vaddr, uint64_t paddr, size_t len);\n"
/>
<function
   name="cache_init"
   summary="Register with the cache-coherency library"
   synopsis="#include &lt;sys/cache.h&gt;\n int cache_init(int flags, struct cache_ctrl *cinfo, const char *dllname);\n"
/>
<function
   name="CACHE_INVAL"
   summary="Invalidate cache lines associated with a data buffer"
   synopsis="#include &lt;sys/cache.h&gt;\n CACHE_INVAL(struct cache_ctrl *cinfo, void *vaddr, uint64_t paddr, size_t len);\n"
/>
<function
   name="calloc"
   summary="Allocate space for an array"
   synopsis="#include &lt;stdlib.h&gt;\n void* calloc ( size_t n, size_t size );\n"
/>
<function
   name="cbrt, cbrtf"
   summary="Compute the cube root of a number"
   synopsis="#include &lt;math.h&gt;\n double cbrt ( double x );\n float cbrtf ( float x );\n"
/>
<function
   name="ceil, ceilf"
   summary="Round up a value to the next integer"
   synopsis="#include &lt;math.h&gt;\n double ceil( double x );\n float ceilf( float x );\n"
/>
<function
   name="cfgetispeed"
   summary="Return the input baud rate that's stored in a termios structure"
   synopsis="#include &lt;termios.h&gt;\n speed_t cfgetispeed( const struct termios* termios_p );\n"
/>
<function
   name="cfgetospeed"
   summary="Return the output baud rate that's stored in a termios structure"
   synopsis="#include &lt;termios.h&gt;\n speed_t cfgetospeed( const struct termios* termios_p );\n"
/>
<function
   name="cfgopen"
   summary="Open a configuration file"
   synopsis="#include &lt;cfgopen.h&gt;\n int cfgopen( const char * path, unsigned flags, const char * historical, char * namebuf, int nblen );\n"
/>
<function
   name="cfmakeraw"
   summary="Set terminal attributes"
   synopsis="#include &lt;termios.h&gt;\n int cfmakeraw( struct termios * termios_p );\n"
/>
<function
   name="cfree"
   summary="Free allocated memory"
   synopsis="#include &lt;malloc.h&gt;\n int cfree( void *ptr );\n"
/>
<function
   name="cfsetispeed"
   summary="Set the input baud rate in a termios structure"
   synopsis="#include &lt;termios.h&gt;\n int cfsetispeed( struct termios* termios_p, speed_t speed );\n"
/>
<function
   name="cfsetospeed"
   summary="Set the output baud rate in a termios structure"
   synopsis="#include &lt;termios.h&gt;\n int cfsetospeed( struct termios *termios_p, speed_t speed );\n"
/>
<function
   name="ChannelCreate, ChannelCreate_r"
   summary="Create a communications channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ChannelCreate( unsigned flags );\n int ChannelCreate_r( unsigned flags );\n"
/>
<function
   name="ChannelDestroy, ChannelDestroy_r"
   summary="Destroy a communications channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ChannelDestroy( int chid );\n int ChannelDestroy_r( int chid );\n"
/>
<function
   name="chdir"
   summary="Change the current working directory"
   synopsis="#include &lt;unistd.h&gt;\n int chdir( const char* path );\n"
/>
<function
   name="chmod"
   summary="Change the permissions for a file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/stat.h&gt;\n int chmod( const char * path, mode_t mode );\n"
/>
<function
   name="chown"
   summary="Change the user ID and group ID of a file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n int chown( const char * path, uid_t owner, gid_t group );\n"
/>
<function
   name="chroot"
   summary="Change the root directory"
   synopsis="#include &lt;unistd.h&gt;\n int chroot( const char *path );\n"
/>
<function
   name="chsize"
   summary="Change the size of a file"
   synopsis="#include &lt;unistd.h&gt;\n int chsize( int filedes, long size );\n"
/>
<function
   name="clearenv"
   summary="Clear the environment"
   synopsis="#include &lt;stdlib.h&gt;\n int clearenv( void );\n"
/>
<function
   name="clearerr"
   summary="Clear a stream's end-of-file and error flags"
   synopsis="#include &lt;stdio.h&gt;\n void clearerr( FILE *fp );\n"
/>
<function
   name="clock"
   summary="Return the number of clock ticks used by the program"
   synopsis="#include &lt;time.h&gt;\n clock_t clock( void );\n"
/>
<function
   name="clock_getcpuclockid"
   summary="Return the clock ID of the CPU-time clock from a specified process"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;time.h&gt;\n #include &lt;errno.h&gt;\n extern int clock_getcpuclockid( pid_t pid, clockid_t* clock_id );\n"
/>
<function
   name="clock_getres"
   summary="Get the resolution of the clock"
   synopsis="#include &lt;time.h&gt;\n int clock_getres( clockid_t clock_id, struct timespec * res );\n"
/>
<function
   name="clock_gettime"
   summary="Get the current time of a clock"
   synopsis="#include &lt;time.h&gt;\n int clock_gettime( clockid_t clock_id, struct timespec * tp );\n"
/>
<function
   name="clock_nanosleep"
   summary="High resolution sleep with specifiable clock"
   synopsis="#include &lt;time.h&gt;\n int clock_nanosleep( clockid_t clock_id, int flags, const struct timespec * rqtp, struct timespec * rmtp );\n"
/>
<function
   name="clock_settime"
   summary="Set a clock"
   synopsis="#include &lt;time.h&gt;\n int clock_settime( clockid_t id, const struct timespec * tp );\n"
/>
<function
   name="ClockAdjust, ClockAdjust_r"
   summary="Adjust the time of a clock"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ClockAdjust( clockid_t id, const struct _clockadjust * new, struct _clockadjust * old );\n int ClockAdjust_r( clockid_t id, const struct _clockadjust * new, struct _clockadjust * old );\n"
/>
<function
   name="ClockCycles"
   summary="Get the number of clock cycles"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;inttypes.h&gt;\n uint64_t ClockCycles( void );\n"
/>
<function
   name="ClockId, ClockId_r"
   summary="Get the CPU-time clock ID for a given process and thread"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;inttypes.h&gt;\n extern int ClockId( pid_t pid, int tid );\n extern int ClockId_r( pid_t pid, int tid );\n"
/>
<function
   name="ClockPeriod, ClockPeriod_r"
   summary="Get or set a clock period"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ClockPeriod( clockid_t id, const struct _clockperiod * new, struct _clockperiod * old, int reserved );\n int ClockPeriod_r( clockid_t id, const struct _clockperiod * new, struct _clockperiod * old, int reserved );\n"
/>
<function
   name="ClockTime, ClockTime_r"
   summary="Get or set a clock"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ClockTime( clockid_t id, const uint64_t * new, uint64_t * old );\n int ClockTime_r( clockid_t id, const uint64_t * new, uint64_t * old );\n"
/>
<function
   name="close"
   summary="Close a file"
   synopsis="#include &lt;unistd.h&gt;\n int close( int filedes );\n"
/>
<function
   name="closedir"
   summary="Close a directory"
   synopsis="#include &lt;dirent.h&gt;\n int closedir( DIR * dirp );\n"
/>
<function
   name="closelog"
   summary="Close the system log"
   synopsis="#include &lt;syslog.h&gt;\n void closelog( void );\n"
/>
<function
   name="_cmdfd"
   summary="Return a file descriptor for the executable file"
   synopsis="#include &lt;process.h&gt;\n int _cmdfd( void );\n"
/>
<function
   name="_cmdname"
   summary="Find the path used to invoke the current process"
   synopsis="#include &lt;process.h&gt;\n char * _cmdname( char * buff );\n"
/>
<function
   name="confstr"
   summary="Get configuration-defined string values"
   synopsis="#include &lt;unistd.h&gt;\n size_t confstr( int name, char * buf, size_t len );\n"
/>
<function
   name="connect"
   summary="Initiate a connection on a socket"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n int connect( int s, const struct sockaddr * name, socklen_t namelen );\n"
/>
<function
   name="ConnectAttach, ConnectAttach_r"
   summary="Establish a connection between a process and a channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/netmgr.h&gt;\n int ConnectAttach( uint32_t nd, pid_t pid, int chid, unsigned index, int flags );\n int ConnectAttach_r( uint32_t nd, pid_t pid, int chid, unsigned index, int flags );\n"
/>
<function
   name="ConnectClientInfo, ConnectClientInfo_r"
   summary="Store information about a client connection"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ConnectClientInfo( int scoid, struct _client_info * info int ngroups );\n int ConnectClientInfo_r( int scoid, struct _client_info * info int ngroups );\n"
/>
<function
   name="ConnectDetach, ConnectDetach_r"
   summary="Break a connection between a process and a channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ConnectDetach( int coid );\n int ConnectDetach_r( int coid );\n"
/>
<function
   name="ConnectFlags, ConnectFlags_r"
   summary="Modify the flags associated with a connection"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ConnectFlags( pid_t pid, int coid, unsigned mask, unsigned bits );\n int ConnectFlags_r( pid_t pid, int coid, unsigned mask, unsigned bits );\n"
/>
<function
   name="ConnectServerInfo, ConnectServerInfo_r"
   summary="Get information about a server connection"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ConnectServerInfo( pid_t pid, int coid, struct _server_info* info );\n int ConnectServerInfo_r( pid_t pid, int coid, struct _server_info* info );\n"
/>
<function
   name="copysign, copysignf"
   summary="Copy the sign bit from one number to another"
   synopsis="#include &lt;math.h&gt;\n double copysign ( double x, double y);\n float copysignf ( float x, float y );\n"
/>
<function
   name="cos, cosf, cosl"
   summary="Compute the cosine of an angle"
   synopsis="#include &lt;math.h&gt;\n double cos( double x );\n float cosf( float x );\n long double cosl( long double x );\n"
/>
<function
   name="cosh, coshf, coshl"
   summary="Compute the hyperbolic cosine"
   synopsis="#include &lt;math.h&gt;\n double cosh( double x );\n float coshf( float x );\n long double coshl( long double x );\n"
/>
<function
   name="creat, creat64"
   summary="Create and open a file (low-level)"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/stat.h&gt;\n #include &lt;fcntl.h&gt;\n int creat( const char* path, mode_t mode );\n int creat64( const char* path, mode_t mode );\n"
/>
<function
   name="crypt"
   summary="Encrypt a password"
   synopsis="#include &lt;unistd.h&gt;\n char * crypt( const char * key, const char * salt );\n"
/>
<function
   name="ctermid"
   summary="Generate the path name of the current controlling terminal"
   synopsis="#include &lt;stdio.h&gt;\n char * ctermid( char * s );\n"
/>
<function
   name="ctime, ctime_r"
   summary="Convert calendar time to local time"
   synopsis="#include &lt;time.h&gt;\n char* ctime( const time_t* timer );\n char* ctime_r( const time_t* timer, char* buf );\n"
/>
<function
   name="daemon"
   summary="Run a process in the background"
   synopsis="#include &lt;stdlib.h&gt;\n int daemon( int nochdir, int noclose );\n"
/>
<function
   name="DebugBreak"
   summary="Enter the process debugger"
   synopsis="#include &lt;sys/neutrino.h&gt;\n void DebugBreak( void );\n"
/>
<function
   name="DebugKDBreak"
   summary="Enter the kernel debugger"
   synopsis="#include &lt;sys/neutrino.h&gt;\n void DebugKDBreak( void );\n"
/>
<function
   name="DebugKDOutput"
   summary="Print text with the kernel debugger"
   synopsis="#include &lt;sys/neutrino.h&gt;\n void DebugKDOutput( const char* str, size_t size );\n"
/>
<function
   name="delay"
   summary="Suspends a calling thread  for a given length of time"
   synopsis="#include &lt;unistd.h&gt;\n unsigned int delay( unsigned int duration );\n"
/>
<function
   name="devctl"
   summary="Control a device"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n #include &lt;devctl.h&gt;\n int devctl( int filedes, int dcmd, void * dev_data_ptr, size_t n_bytes, int * dev_info_ptr );\n int devctlv( int filedes, int dcmd, int sparts, int rparts, const iov_t *sv, const iov_t *rv, int *dev_info_ptr);\n"
/>
<function
   name="difftime"
   summary="Calculate the difference between two times"
   synopsis="#include &lt;time.h&gt;\n double difftime( time_t time1, time_t time0 );\n"
/>
<function
   name="dircntl"
   summary="Control an open directory"
   synopsis="#include &lt;dirent.h&gt;\n int dircntl( DIR * dir, int cmd, ... );\n"
/>
<function
   name="dirname"
   summary="Find the parent directory part of a file pathname"
   synopsis="#include &lt;libgen.h&gt;\n char *dirname( char *path );\n"
/>
<function
   name="dispatch_block"
   summary="Block while waiting for an event"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n dispatch_context_t * dispatch_block ( dispatch_context_t * ctp );\n"
/>
<function
   name="dispatch_context_alloc"
   summary="Return a dispatch context"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n dispatch_context_t * dispatch_context_alloc ( dispatch_t * dpp );\n"
/>
<function
   name="dispatch_context_free"
   summary="Free a dispatch context"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n void dispatch_context_free( dispatch_context_t * ctp );\n"
/>
<function
   name="dispatch_create"
   summary="Allocate a dispatch handle"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n dispatch_t *dispatch_create( void );\n"
/>
<function
   name="dispatch_create_channel"
   summary="Allocate a dispatch handle, specifying a channel ID"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n dispatch_t *dispatch_create_channel( int chid, unsigned reserved );\n"
/>
<function
   name="dispatch_destroy"
   summary="Destroy a dispatch handle"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int dispatch_destroy( dispatch_t *dpp );\n"
/>
<function
   name="dispatch_handler"
   summary="Handle events received by dispatch_block"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int dispatch_handler( dispatch_context_t * ctp );\n"
/>
<function
   name="dispatch_timeout"
   summary="Set a timeout"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int dispatch_timeout( dispatch_t *dpp, struct timespec *reltime );\n"
/>
<function
   name="dispatch_unblock"
   summary="Unblock all of the threads that are blocked on a dispatch handle"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n void dispatch_unblock( dispatch_context_t * ctp );\n"
/>
<function
   name="div"
   summary="Calculate a quotient and remainder"
   synopsis="#include &lt;stdlib.h&gt;\n div_t div( int numer, int denom );\n"
/>
<function
   name="dladdr"
   summary="Translate an address to symbolic information"
   synopsis="#include &lt;dlfcn.h&gt;\n int dladdr( void *address, Dl_info *dlip );\n"
/>
<function
   name="dlclose"
   summary="Close a shared object"
   synopsis="#include &lt;dlfcn.h&gt;\n int dlclose( void *handle );\n"
/>
<function
   name="dlerror"
   summary="Get dynamic loading diagnostic information"
   synopsis="#include &lt;dlfcn.h&gt;\n char *dlerror( void );\n"
/>
<function
   name="dlopen"
   summary="Gain access to an executable object file"
   synopsis="#include &lt;dlfcn.h&gt;\n void * dlopen( const char * pathname, int mode );\n"
/>
<function
   name="dlsym"
   summary="Get the address of a symbol in a shared object"
   synopsis="#include &lt;dlfcn.h&gt;\n void* dlsym( void* handle, const char* name );\n"
/>
<function
   name="dn_comp"
   summary="Compress an Internet domain name"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/nameser.h&gt;\n #include &lt;resolv.h&gt;\n int dn_comp( const char * exp_dn, u_char * comp_dn, int length, u_char ** dnptrs, u_char ** lastdnptr );\n"
/>
<function
   name="dn_expand"
   summary="Expand a compressed Internet domain name"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/nameser.h&gt;\n #include &lt;resolv.h&gt;\n int dn_expand( const u_char * msg, const u_char * eomorig, const u_char * comp_dn, char * exp_dn, int length );\n"
/>
<function
   name="drand48"
   summary="Generate a pseudo-random double"
   synopsis="#include &lt;stdlib.h&gt;\n double drand48( void );\n"
/>
<function
   name="ds_clear"
   summary="Delete a data server variable"
   synopsis="#include &lt;ds.h&gt;\n int ds_clear( ds_t dsdes, const char* variable_name );\n"
/>
<function
   name="ds_create"
   summary="Create a data server variable"
   synopsis="#include &lt;ds.h&gt;\n int ds_create( ds_t dsdes, const char * variable_name, char flags, struct sigevent * sigevent );\n"
/>
<function
   name="ds_deregister"
   summary="Deregister an application with the data server"
   synopsis="#include &lt;ds.h&gt;\n int ds_deregister( ds_t dsdes );\n"
/>
<function
   name="ds_flags"
   summary="Set the flags for a data server variable"
   synopsis="#include &lt;ds.h&gt;\n int ds_flags( ds_t dsdes, const char* variable_name, char flags );\n"
/>
<function
   name="ds_get"
   summary="Retrieve a data server variable"
   synopsis="#include &lt;ds.h&gt;\n int ds_get( ds_t dsdes, const char* variable_name, const char* variable_data, size_t data_len );\n"
/>
<function
   name="ds_register"
   summary="Register an application with the data server"
   synopsis="#include &lt;ds.h&gt;\n ds_t ds_register( void );\n"
/>
<function
   name="ds_set"
   summary="Set a data server variable"
   synopsis="#include &lt;ds.h&gt;\n int ds_set( ds_t dsdes, const char* variable_name, const char* variable_data, size_t data_len );\n"
/>
<function
   name="dup"
   summary="Duplicate a file descriptor"
   synopsis="#include &lt;unistd.h&gt;\n int dup( int filedes );\n"
/>
<function
   name="dup2"
   summary="Duplicate a file descriptor, specifying the new descriptor"
   synopsis="#include &lt;unistd.h&gt;\n int dup2( int filedes, int filedes2 );\n"
/>
<function
   name="eaccess"
   summary="Check to see if a file or directory can be accessed (extended version)"
   synopsis="#include &lt;libgen.h&gt;\n #include &lt;unistd.h&gt;\n int eaccess( const char * path, int amode );\n"
/>
<function
   name="encrypt"
   summary="Encrypt or decrypt a string"
   synopsis="#include &lt;unistd.h&gt;\n void encrypt( char block[64], int flag );\n"
/>
<function
   name="endfsent"
   summary="Close the filesystem table (/etc/fstab) file"
   synopsis="#include &lt;fstab.h&gt;\n void endfsent( void );\n"
/>
<function
   name="endgrent"
   summary="Close the group database file"
   synopsis="#include &lt;grp.h&gt;\n int endgrent( void );\n"
/>
<function
   name="endhostent"
   summary="Close the TCP connection and the hosts file"
   synopsis="#include &lt;netdb.h&gt;\n void endhostent( void );\n"
/>
<function
   name="ENDIAN_BE16"
   summary="Return a big-endian 16-bit value in native format"
   synopsis="#include &lt;gulliver.h&gt;\n uint16_t ENDIAN_BE16( uint16_t num );\n"
/>
<function
   name="ENDIAN_BE32"
   summary="Return a big-endian 32-bit value in native format"
   synopsis="#include &lt;gulliver.h&gt;\n uint32_t ENDIAN_BE32( uint32_t num );\n"
/>
<function
   name="ENDIAN_BE64"
   summary="Return a big-endian 64-bit value in native format"
   synopsis="#include &lt;gulliver.h&gt;\n uint64_t ENDIAN_BE64( uint64_t num );\n"
/>
<function
   name="ENDIAN_LE16"
   summary="Return a little-endian 16-bit value in native format"
   synopsis="#include &lt;gulliver.h&gt;\n uint16_t ENDIAN_LE16( uint16_t num );\n"
/>
<function
   name="ENDIAN_LE32"
   summary="Return a little-endian 32-bit value in native format"
   synopsis="#include &lt;gulliver.h&gt;\n uint32_t ENDIAN_LE32( uint32_t num );\n"
/>
<function
   name="ENDIAN_LE64"
   summary="Return a little-endian 64-bit value in native format"
   synopsis="#include &lt;gulliver.h&gt;\n uint64_t ENDIAN_LE64( uint64_t num );\n"
/>
<function
   name="ENDIAN_RET16"
   summary="Return an endian-swapped 16-bit value"
   synopsis="#include &lt;gulliver.h&gt;\n uint16_t ENDIAN_RET16( uint16_t num );\n"
/>
<function
   name="ENDIAN_RET32"
   summary="Return an endian-swapped 32-bit value"
   synopsis="#include &lt;gulliver.h&gt;\n uint32_t ENDIAN_RET32( uint32_t num );\n"
/>
<function
   name="ENDIAN_RET64"
   summary="Return an endian-swapped 64-bit value"
   synopsis="#include &lt;gulliver.h&gt;\n uint64_t ENDIAN_RET64( uint64_t num );\n"
/>
<function
   name="ENDIAN_SWAP16"
   summary="Endian-swap a 16-bit value in place"
   synopsis="#include &lt;gulliver.h&gt;\n void ENDIAN_SWAP16( uint16_t * num );\n"
/>
<function
   name="ENDIAN_SWAP32"
   summary="Endian-swap a 32-bit value in place"
   synopsis="#include &lt;gulliver.h&gt;\n void ENDIAN_SWAP32( uint32_t * num );\n"
/>
<function
   name="ENDIAN_SWAP64"
   summary="Endian-swap a 64-bit value in place"
   synopsis="#include &lt;gulliver.h&gt;\n void ENDIAN_SWAP64( uint64_t * num );\n"
/>
<function
   name="endnetent"
   summary="Close the network name database file"
   synopsis="#include &lt;netdb.h&gt;\n void endnetent( void );\n"
/>
<function
   name="endprotoent"
   summary="Close the protocol name database file"
   synopsis="#include &lt;netdb.h&gt;\n void endprotoent( void );\n"
/>
<function
   name="endpwent"
   summary="Close the password database file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;pwd.h&gt;\n int endpwent( void );\n"
/>
<function
   name="endservent"
   summary="Close the network services database file"
   synopsis="#include &lt;netdb.h&gt;\n void endservent( void );\n"
/>
<function
   name="endspent"
   summary="Close the shadow password database file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;shadow.h&gt;\n void endspent( void );\n"
/>
<function
   name="endutent"
   summary="Close the current user-information file"
   synopsis="#include &lt;utmp.h&gt;\n void endutent( void );\n"
/>
<function
   name="eof"
   summary="Test if the end-of-file has been reached"
   synopsis="#include &lt;unistd.h&gt;\n int eof( int filedes );\n"
/>
<function
   name="erand48"
   summary="Generate a pseudo-random double in a thread-safe manner"
   synopsis="#include &lt;stdlib.h&gt;\n double erand48( unsigned short int xsubi[3] );\n"
/>
<function
   name="erf, erff"
   summary="Compute the error function of a number"
   synopsis="#include &lt;math.h&gt;\n double erf ( double x );\n float erff ( float x );\n"
/>
<function
   name="erfc, erfcf, erfcl"
   summary="Complementary error function"
   synopsis="#include &lt;math.h&gt;\n double erfc ( double x );\n float erfcf ( float x );\n long double erfcl( long double x );\n"
/>
<function
   name="err, errx"
   summary="Display a formatted error message, and then exit"
   synopsis="#include &lt;err.h&gt;\n void err( int eval, const char *fmt, ...);\n void errx( int eval, const char *fmt, ...);\n"
/>
<function
   name="execl"
   summary="Execute a file"
   synopsis="#include &lt;process.h&gt;\n int execl( const char * path, const char * arg0, const char * arg1, &#8230; const char * argn, NULL );\n"
/>
<function
   name="execle"
   summary="Execute a file"
   synopsis="#include &lt;process.h&gt;\n int execle( const char * path, const char * arg0, const char * arg1, &#8230; const char * argn, NULL, const char * envp[] );\n"
/>
<function
   name="execlp"
   summary="Execute a file"
   synopsis="#include &lt;process.h&gt;\n int execlp( const char * file, const char * arg0, const char * arg1, &#8230; const char * argn, NULL );\n"
/>
<function
   name="execlpe"
   summary="Execute a file"
   synopsis="#include &lt;process.h&gt;\n int execlpe( const char * file, const char * arg0, const char * arg1, &#8230; const char * argn, NULL, const char * envp[] );\n"
/>
<function
   name="execv"
   summary="Execute a file"
   synopsis="#include &lt;process.h&gt;\n int execv( const char * path, char * const argv[] );\n"
/>
<function
   name="execve"
   summary="Execute a file"
   synopsis="#include &lt;process.h&gt;\n int execve( const char * path, char * const argv[], char * const envp[] );\n"
/>
<function
   name="execvp"
   summary="Execute a file"
   synopsis="#include &lt;process.h&gt;\n int execvp( const char * file, char * const argv[] );\n"
/>
<function
   name="execvpe"
   summary="Execute a file"
   synopsis="#include &lt;process.h&gt;\n int execvpe( const char * file, char * const argv[], char * const envp[] );\n"
/>
<function
   name="_exit"
   summary="Terminate the program"
   synopsis="#include &lt;stdlib.h&gt;\n void _exit( int status );\n"
/>
<function
   name="exit"
   summary="Exit the calling program"
   synopsis="#include &lt;stdlib.h&gt;\n void exit( int status );\n"
/>
<function
   name="exp, expf, expl"
   summary="Compute the exponential function of a number"
   synopsis="#include &lt;math.h&gt;\n double exp( double x );\n float expf( float x );\n long double expl( long double x );\n"
/>
<function
   name="expm1, expm1f"
   summary="Compute the exponential of a number, then subtract 1"
   synopsis="#include &lt;math.h&gt;\n double expm1 ( double x );\n float expm1f ( float x );\n"
/>
<function
   name="fabs, fabsf"
   summary="Compute the absolute value of a double number"
   synopsis="#include &lt;math.h&gt;\n double fabs( double x );\n float fabsf( float x );\n"
/>
<function
   name="fcfgopen"
   summary="Open a configuration file"
   synopsis="#include &lt;cfgopen.h&gt;\n FILE * fcfgopen( const char * path, const char * mode, int location, const char * historical, char * namebuf, int nblen );\n"
/>
<function
   name="fchdir"
   summary="Change the working directory"
   synopsis="#include &lt;unistd.h&gt;\n int fchdir(int fd);\n"
/>
<function
   name="fchmod"
   summary="Change the permissions for a file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/stat.h&gt;\n int fchmod( int fd, mode_t mode );\n"
/>
<function
   name="fchown"
   summary="Change the user ID and group ID of a file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n int fchown( int fd, uid_t owner, gid_t group );\n"
/>
<function
   name="fclose"
   summary="Close a stream"
   synopsis="#include &lt;stdio.h&gt;\n int fclose( FILE* fp );\n"
/>
<function
   name="fcloseall"
   summary="Close all open stream files"
   synopsis="#include &lt;stdio.h&gt;\n int fcloseall( void );\n"
/>
<function
   name="fcntl"
   summary="Provide control over an open file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n #include &lt;fcntl.h&gt;\n int fcntl( int fildes, int cmd, ... );\n"
/>
<function
   name="fdatasync"
   summary="Synchronize file data"
   synopsis="#include &lt;unistd.h&gt;\n int fdatasync( int filedes );\n"
/>
<function
   name="fdopen"
   summary="Associate a stream with a file descriptor"
   synopsis="#include &lt;stdio.h&gt;\n FILE* fdopen( int filedes, const char* mode );\n"
/>
<function
   name="feof"
   summary="Test a stream's end-of-file flag"
   synopsis="#include &lt;stdio.h&gt;\n int feof( FILE* fp );\n"
/>
<function
   name="ferror"
   summary="Test a stream's error flag"
   synopsis="#include &lt;stdio.h&gt;\n int ferror( FILE* fp );\n"
/>
<function
   name="fflush"
   summary="Flush the buffers for a stream"
   synopsis="#include &lt;stdio.h&gt;\n int fflush( FILE* fp );\n"
/>
<function
   name="ffs"
   summary="Find the first bit set in a bit string"
   synopsis="#include &lt;strings.h&gt;\n int ffs( int value );\n"
/>
<function
   name="fgetc"
   summary="Read a character from a stream"
   synopsis="#include &lt;stdio.h&gt;\n int fgetc( FILE* fp );\n"
/>
<function
   name="fgetchar"
   summary="Read a character from stdin"
   synopsis="#include &lt;stdio.h&gt;\n int fgetchar( void );\n"
/>
<function
   name="fgetpos"
   summary="Get the current position of a stream"
   synopsis="#include &lt;stdio.h&gt;\n int fgetpos( FILE* fp, fpos_t* pos );\n"
/>
<function
   name="fgets"
   summary="Read a string of characters from a stream"
   synopsis="#include &lt;stdio.h&gt;\n char* fgets( char* buf, size_t n, FILE* fp );\n"
/>
<function
   name="fgetspent"
   summary="Get an entry from the shadow password database"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;shadow.h&gt;\n struct spwd* fgetspent( FILE* f );\n"
/>
<function
   name="fgetwc"
   summary="Read a wide character from a stream"
   synopsis="#include &lt;wchar.h&gt;\n wint_t fgetwc( FILE * fp );\n"
/>
<function
   name="fgetws"
   summary="Read a string of wide characters from a stream"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * fgetws( wchar_t * buf, int n, FILE * fp );\n"
/>
<function
   name="fileno"
   summary="Return the file descriptor for a stream"
   synopsis="#include &lt;stdio.h&gt;\n int fileno( FILE * stream );\n"
/>
<function
   name="flink"
   summary="Assign a pathname to a file descriptor"
   synopsis="#include &lt;unistd.h&gt;\n int flink( int fd, const char *path );\n"
/>
<function
   name="flock"
   summary="Apply or remove an advisory lock on an open file"
   synopsis="#include &lt;fcntl.h&gt;\n int flock( int filedes, int operation );\n"
/>
<function
   name="flockfile"
   summary="Acquire ownership of a file"
   synopsis="#include &lt;stdio.h&gt;\n void flockfile( FILE* file );\n"
/>
<function
   name="floor, floorf"
   summary="Round down a value to the next integer"
   synopsis="#include &lt;math.h&gt;\n double floor( double x );\n float floorf( float x );\n"
/>
<function
   name="flushall"
   summary="Flush all input/output buffers"
   synopsis="#include &lt;stdio.h&gt;\n int flushall( void );\n"
/>
<function
   name="fmod, fmodf, fmodl"
   summary="Compute a residue, using floating-point modular arithmetic"
   synopsis="#include &lt;math.h&gt;\n double fmod( double x, double y );\n float fmodf( float x, float y );\n long double fmodl( long double x, long double y );\n"
/>
<function
   name="fnmatch"
   summary="Check to see if a file or path name matches a pattern"
   synopsis="#include &lt;fnmatch.h&gt;\n int fnmatch( const char* pat, const char* str, int flags );\n"
/>
<function
   name="fopen, fopen64"
   summary="Open a file stream"
   synopsis="#include &lt;stdio.h&gt;\n FILE * fopen( const char * filename, const char * mode );\n FILE * fopen64( const char * filename, const char * mode );\n"
/>
<function
   name="fork"
   summary="Create a new process"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;process.h&gt;\n pid_t fork( void );\n"
/>
<function
   name="forkpty"
   summary="Create a new process operating in a pseudo-tty"
   synopsis="#include &lt;unix.h&gt;\n pid_t forkpty( int *amaster, char *name, struct termios *termp, struct winsize *winp );\n"
/>
<function
   name="fp_exception_mask"
   summary="Get or set the current exception mask"
   synopsis="#include &lt;fpstatus.h&gt;\n int fp_exception_mask ( int new_mask, int set );\n"
/>
<function
   name="fp_exception_value"
   summary="Get the value of the current exception registers"
   synopsis="#include &lt;fpstatus.h&gt;\n int fp_exception_value( int mask );\n"
/>
<function
   name="fp_precision"
   summary="Set or get the current precision"
   synopsis="#include &lt;fpstatus.h&gt;\n int fp_precision( int newprecision );\n"
/>
<function
   name="fp_rounding"
   summary="Set or get the current rounding"
   synopsis="#include &lt;fpstatus.h&gt;\n int fp_rounding( int newrounding );\n"
/>
<function
   name="fp_setenv"
   summary="Set the floating point environment"
   synopsis="#include &lt;fpstatus.h&gt;\n void fp_setenv( int rounding int flags int fmask int exc int emask);\n"
/>
<function
   name="fpathconf"
   summary="Return the value of a configurable limit associated with a file"
   synopsis="#include &lt;unistd.h&gt;\n long fpathconf( int filedes, int name );\n"
/>
<function
   name="fprintf"
   summary="Write output to a stream"
   synopsis="#include &lt;stdio.h&gt;\n int fprintf( FILE* fp, const char* format, ... );\n"
/>
<function
   name="fputc"
   summary="Write a character to a stream"
   synopsis="#include &lt;stdio.h&gt;\n int fputc( int c, FILE* fp );\n"
/>
<function
   name="fputchar"
   summary="Write a character to stdout"
   synopsis="#include &lt;stdio.h&gt;\n int fputchar( int c );\n"
/>
<function
   name="fputs"
   summary="Write a string to an output stream"
   synopsis="#include &lt;stdio.h&gt;\n int fputs( const char* buf, FILE* fp );\n"
/>
<function
   name="fputwc"
   summary="Write a wide character to a stream"
   synopsis="#include &lt;wchar.h&gt;\n wint_t fputwc( wchar_t wc, FILE * fp );\n"
/>
<function
   name="fputws"
   summary="Write a wide-character string to an output stream"
   synopsis="#include &lt;wchar.h&gt;\n int fputws( const wchar_t * ws, FILE * fp );\n"
/>
<function
   name="fread"
   summary="Read elements of a given size from a stream"
   synopsis="#include &lt;stdio.h&gt;\n size_t fread( void* buf, size_t size, size_t num, FILE* fp );\n"
/>
<function
   name="free"
   summary="Deallocate a block of memory"
   synopsis="#include &lt;stdlib.h&gt;\n void free( void* ptr );\n"
/>
<function
   name="freeaddrinfo"
   summary="Free a list of address information structures"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n #include &lt;netdb.h&gt;\n void freeaddrinfo( struct addrinfo * ai );\n"
/>
<function
   name="freeifaddrs"
   summary="Free a network interface address"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n #include &lt;ifaddrs.h&gt;\n void freeifaddrs( struct ifaddrs * ifap );\n"
/>
<function
   name="freopen, freopen64"
   summary="Reopen a stream"
   synopsis="#include &lt;stdio.h&gt;\n FILE* freopen( const char* filename, const char* mode, FILE* fp );\n FILE* freopen64( const char* filename, const char* mode, FILE* fp );\n"
/>
<function
   name="frexp, frexpf"
   summary="Break a floating-point number into a normalized fraction and an integral power of 2"
   synopsis="#include &lt;math.h&gt;\n double frexp( double value, int* exp );\n float frexpf( float value, int* exp );\n"
/>
<function
   name="fscanf"
   summary="Scan input from a stream"
   synopsis="#include &lt;stdio.h&gt;\n int fscanf( FILE* fp, const char* format, ... );\n"
/>
<function
   name="fseek, fseeko, fseeko64"
   summary="Change the current position of a stream"
   synopsis="#include &lt;stdio.h&gt;\n int fseek( FILE *fp, long offset, int whence );\n int fseeko( FILE *fp, off_t offset, int whence );\n int fseeko64( FILE *fp, off64_t offset, int whence );\n"
/>
<function
   name="fsetpos"
   summary="Set the current position of a file"
   synopsis="#include &lt;stdio.h&gt;\n int fsetpos( FILE* fp, const fpos_t* pos );\n"
/>
<function
   name="fstat, fstat64"
   summary="Get file information, given a file description"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/stat.h&gt;\n int fstat( int filedes, struct stat* buf );\n int fstat64( int filedes, struct stat64* buf );\n"
/>
<function
   name="fstatvfs, fstatvfs64"
   summary="Get filesystem information, given a file descriptor"
   synopsis="#include &lt;sys/statvfs.h&gt;\n int fstatvfs( int fildes, struct statvfs *buf );\n int fstatvfs64( int fildes, struct statvfs64 *buf );\n"
/>
<function
   name="fsync"
   summary="Synchronize the file state"
   synopsis="#include &lt;unistd.h&gt;\n int fsync( int filedes );\n"
/>
<function
   name="ftell, ftello, ftello64"
   summary="Return the current position of a stream"
   synopsis="#include &lt;stdio.h&gt;\n long int ftell( FILE* fp );\n off_t ftello( FILE* fp );\n off64_t ftello64( FILE* fp );\n"
/>
<function
   name="ftime"
   summary="Get the current time"
   synopsis="#include &lt;sys/timeb.h&gt;\n int ftime( struct timeb * timeptr );\n"
/>
<function
   name="ftruncate, ftruncate64"
   summary="Truncate a file"
   synopsis="#include &lt;unistd.h&gt;\n int ftruncate( int fildes, off_t length );\n int ftruncate64( int fildes, off64_t length );\n"
/>
<function
   name="ftrylockfile"
   summary="Acquire ownership of a file, without blocking"
   synopsis="#include &lt;stdio.h&gt;\n int ftrylockfile( FILE* file );\n"
/>
<function
   name="ftw, ftw64"
   summary="Walk a file tree"
   synopsis="#include &lt;ftw.h&gt;\n int ftw( const char *path, int (*fn)( const char *fname, const struct stat *sbuf, int flags), int depth );\n"
/>
<function
   name="funlockfile"
   summary="Release ownership of a file"
   synopsis="#include &lt;stdio.h&gt;\n void funlockfile( FILE* file );\n"
/>
<function
   name="futime"
   summary="Record the modification time for a file"
   synopsis="#include &lt;utime.h&gt;\n int futime( int fildes, const struct utimbuf *times );\n struct utimbuf { time_t actime; /* access time */ time_t modtime; /* modification time */ };"
/>
<function
   name="fwide"
   summary="Set or get the stream orientation"
   synopsis="#include &lt;wchar.h&gt;\n int fwide( FILE * fp, int mode );\n"
/>
<function
   name="fwprintf"
   summary="Write wide-character output to a stream"
   synopsis="#include &lt;wchar.h&gt;\n int fwprintf( FILE * fp, const wchar_t * format, ... );\n"
/>
<function
   name="fwrite"
   summary="Write elements to a file"
   synopsis="#include &lt;stdio.h&gt;\n size_t fwrite( const void* buf, size_t size, size_t num, FILE* fp );\n"
/>
<function
   name="fwscanf"
   summary="Scan wide-character input from a stream"
   synopsis="#include &lt;wchar.h&gt;\n int fwscanf( FILE * fp, const wchar_t * format, ... );\n"
/>
<function
   name="gai_strerror"
   summary="Return the string associated with a getaddrinfo error code"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n #include &lt;netdb.h&gt;\n const char * gai_strerror( int ecode );\n"
/>
<function
   name="gamma, gamma_r, gammaf, gammaf_r"
   summary="Log gamma function"
   synopsis="#include &lt;math.h&gt;\n double gamma( double x );\n double gamma_r( double x, int* signgam);\n float gammaf( float x );\n float gammaf_r( float x, int* signgam);\n"
/>
<function
   name="getaddrinfo"
   summary="Get socket address information"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;netdb.h&gt;\n int getaddrinfo( const char * nodename, const char * servname, const struct addrinfo * hints, struct addrinfo ** res );\n"
/>
<function
   name="getc"
   summary="Get the next character from a file"
   synopsis="#include &lt;stdio.h&gt;\n int getc( FILE* fp );\n"
/>
<function
   name="getc_unlocked"
   summary="Get the next character from a file"
   synopsis="#include &lt;stdio.h&gt;\n int getc_unlocked( FILE *fp );\n"
/>
<function
   name="getchar"
   summary="Get a character from stdin"
   synopsis="#include &lt;stdio.h&gt;\n int getchar( void );\n"
/>
<function
   name="getchar_unlocked"
   summary="Get a character from stdin"
   synopsis="#include &lt;stdio.h&gt;\n int getchar_unlocked( void );\n"
/>
<function
   name="getcwd"
   summary="Get the name of the current working directory"
   synopsis="#include &lt;unistd.h&gt;\n char* getcwd( char* buffer, size_t size );\n"
/>
<function
   name="getdomainname"
   summary="Get the domain name of the current host"
   synopsis="#include &lt;unistd.h&gt;\n int getdomainname( char * name, size_t namelen );\n"
/>
<function
   name="getdtablesize"
   summary="Get the size of the file descriptor table"
   synopsis="#include &lt;unistd.h&gt;\n int getdtablesize( void );\n"
/>
<function
   name="getegid"
   summary="Get the effective group ID"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n gid_t getegid( void );\n"
/>
<function
   name="getenv"
   summary="Get the value of an environment variable"
   synopsis="#include &lt;stdlib.h&gt;\n char* getenv( const char* name );\n"
/>
<function
   name="geteuid"
   summary="Get the effective user ID"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n uid_t geteuid( void );\n"
/>
<function
   name="getfsfile"
   summary="Search for a filesystem name in the filesystem table (/etc/fstab) file"
   synopsis="#include &lt;fstab.h&gt;\n struct fstab * getfsfile(const char *file);\n"
/>
<function
   name="getfsent"
   summary="Get the next entry from the filesystem table (/etc/fstab) file"
   synopsis="#include &lt;fstab.h&gt;\n struct fstab * getfsent(void);\n"
/>
<function
   name="getfsspec"
   summary="Search for a block special device in the filesystem table (/etc/fstab) file"
   synopsis="#include &lt;fstab.h&gt;\n struct fstab * getfsspec(const char *spec);\n"
/>
<function
   name="getgid"
   summary="Get the group ID"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n gid_t getgid( void );\n"
/>
<function
   name="getgrent"
   summary="Return an entry from the group database"
   synopsis="#include &lt;grp.h&gt;\n struct group* getgrent( void );\n"
/>
<function
   name="getgrgid"
   summary="Get information about the group with a given ID"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;grp.h&gt;\n struct group* getgrgid( gid_t gid );\n"
/>
<function
   name="getgrgid_r"
   summary="Get information about the group with a given ID"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;grp.h&gt;\n int getgrgid_r ( gid_t gid, struct group* grp, char* buffer, size_t bufsize, struct group** result );\n"
/>
<function
   name="getgrnam"
   summary="Get information about the group with a given name"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;grp.h&gt;\n struct group* getgrnam( const char* name );\n"
/>
<function
   name="getgrnam_r"
   summary="Get information about the group with a given name"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;grp.h&gt;\n int getgrnam_r( const char* name, struct group* grp, char* buffer, size_t bufsize, struct group** result );\n"
/>
<function
   name="getgrouplist"
   summary="Determine the group access list for a user"
   synopsis="#include &lt;unistd.h&gt;\n int getgrouplist( const char *name, gid_t basegid, gid_t *groups, int *ngroups );\n"
/>
<function
   name="getgroups"
   summary="Get the supplementary group IDs of the calling process"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n int getgroups( int gidsetsize, gid_t grouplist[] );\n"
/>
<function
   name="gethostbyaddr"
   summary="Get a network host entry, given an Internet address"
   synopsis="#include &lt;netdb.h&gt;\n struct hostent * gethostbyaddr( const void * addr, socklen_t len, int type );\n"
/>
<function
   name="gethostbyaddr_r"
   summary="Get a network host entry, in a thread-safe manner"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n #include &lt;netdb.h&gt;\n struct hostent * gethostbyaddr_r( const void * addr, socklen_t length, int type, struct hostent * result, char * buffer, int buflen, int * h_errnop );\n"
/>
<function
   name="gethostbyname, gethostbyname2"
   summary="Get a network host entry, given a name"
   synopsis="#include &lt;netdb.h&gt;\n struct hostent * gethostbyname( const char * name );\n struct hostent * gethostbyname2( const char * name, int af );\n"
/>
<function
   name="gethostbyname_r"
   summary="Get a network host entry by name"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n #include &lt;netdb.h&gt;\n struct hostent *gethostbyname_r( const char * name, struct hostent * result, char * buffer, int bufflen, int * h_errnop );\n"
/>
<function
   name="gethostent"
   summary="Read the next line of the host database file"
   synopsis="#include &lt;netdb.h&gt;\n struct hostent * gethostent( void );\n"
/>
<function
   name="gethostent_r"
   summary="Read the next line of the host database file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n #include &lt;netdb.h&gt;\n struct hostent * gethostent_r( FILE ** hostf, struct hostent * result, char * buffer, int buflen, int * h_errnop );\n"
/>
<function
   name="gethostname"
   summary="Get the name of the current host"
   synopsis="#include &lt;unistd.h&gt;\n int gethostname( char * name, size_t namelen );\n"
/>
<function
   name="getifaddrs"
   summary="Get a network interface address"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n #include &lt;ifaddrs.h&gt;\n int getifaddrs( struct ifaddrs ** ifap );\n"
/>
<function
   name="GETIOVBASE"
   summary="Get the base member of an iov_t structure"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n #define GETIOVBASE( _iov ) ..."
/>
<function
   name="GETIOVLEN"
   summary="Get the length member of an iov_t structure"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n #define GETIOVLEN( _iov ) ..."
/>
<function
   name="getitimer"
   summary="Get the value of an interval timer"
   synopsis="#include &lt;sys/time.h&gt;\n int getitimer ( int which, struct itimerval *value );\n"
/>
<function
   name="getlogin"
   summary="Get the user name associated with the calling process"
   synopsis="#include &lt;unistd.h&gt;\n char* getlogin( void ) ;"
/>
<function
   name="getlogin_r"
   summary="Get the user name associated with the calling process"
   synopsis="#include &lt;unistd.h&gt;\n int getlogin_r( char* name, size_t namesize );\n"
/>
<function
   name="getnameinfo"
   summary="Perform address-to-nodename translation in a protocol-independent manner"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n #include &lt;netdb.h&gt;\n int getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, size_t hostlen, char *serv, size_t servlen, int flags);\n"
/>
<function
   name="getnetbyaddr"
   summary="Get a network entry, given an address (Unix)"
   synopsis="#include &lt;netdb.h&gt;\n struct netent * getnetbyaddr( uint32_t net, int type );\n"
/>
<function
   name="getnetbyname"
   summary="Get a network entry, given a name"
   synopsis="#include &lt;netdb.h&gt;\n struct netent * getnetbyname( const char * name );\n"
/>
<function
   name="getnetent"
   summary="Read the next line of the network name database file"
   synopsis="#include &lt;netdb.h&gt;\n struct netent * getnetent( void );\n"
/>
<function
   name="getopt"
   summary="Parse options from a command line"
   synopsis="#include &lt;unistd.h&gt;\n int getopt( int argc, char * const argv[], const char * optstring );\n extern char * optarg; extern int optind, opterr, optopt;"
/>
<function
   name="getpagesize"
   summary="Get the current page size (Legacy Unix)"
   synopsis="#include &lt;unistd.h&gt;\n int getpagesize(void);\n"
/>
<function
   name="getpagesizes, getpagesizes64"
   summary="Get the available page sizes"
   synopsis="#include &lt;sys/mman.h&gt;\n int getpagesizes( size_t pagesize[], int nelem );\n int getpagesizes64( uint64_t pagesize[], int nelem );\n"
/>
<function
   name="getpass"
   summary="Prompt for and read a password"
   synopsis="#include &lt;unistd.h&gt;\n char *getpass( const char *prompt );\n"
/>
<function
   name="getpeereid"
   summary="Get the effective credentials of a UNIX-domain peer"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n int getpeereid( int s, uid_t *euid, gid_t *egid );\n"
/>
<function
   name="getpeername"
   summary="Get the name of the peer connected to a socket"
   synopsis="#include &lt;sys/socket.h&gt;\n int getpeername( int s, struct sockaddr * name, socklen_t * namelen );\n"
/>
<function
   name="getpgid"
   summary="Get a process group ID"
   synopsis="#include &lt;unistd.h&gt;\n pid_t getpgid( pid_t pid );\n"
/>
<function
   name="getpgrp"
   summary="Get the process group"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;process.h&gt;\n pid_t getpgrp( void );\n"
/>
<function
   name="getpid"
   summary="Get the process ID"
   synopsis="#include &lt;process.h&gt;\n pid_t getpid( void );\n"
/>
<function
   name="getppid"
   summary="Get the parent process ID"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;process.h&gt;\n pid_t getppid( void );\n"
/>
<function
   name="getprio"
   summary="Get the priority of a given process"
   synopsis="#include &lt;sched.h&gt;\n int getprio( pid_t pid );\n"
/>
<function
   name="getprotobyname"
   summary="Get a protocol entry, given a name"
   synopsis="#include &lt;netdb.h&gt;\n struct protoent * getprotobyname( const char * name );\n"
/>
<function
   name="getprotobynumber"
   summary="Get a protocol entry, given a number"
   synopsis="#include &lt;netdb.h&gt;\n struct protoent * getprotobynumber( int proto );\n"
/>
<function
   name="getprotoent"
   summary="Read the next line of the protocol name database file"
   synopsis="#include &lt;netdb.h&gt;\n struct protoent * getprotoent( void );\n"
/>
<function
   name="getpwent"
   summary="Get the next entry from the password database"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;pwd.h&gt;\n struct passwd* getpwent( void );\n"
/>
<function
   name="getpwent_r"
   summary="Get the next entry from the password database"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;pwd.h&gt;\n int getpwent_r( struct passwd *pwd, char *buffer, size_t bufsize, struct passwd **result);\n"
/>
<function
   name="getpwnam"
   summary="Get information about the user with a given name"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;pwd.h&gt;\n struct passwd* getpwnam( const char* name );\n"
/>
<function
   name="getpwnam_r"
   summary="Get information about the user with a given name"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;pwd.h&gt;\n int getpwnam_r( const char* name, struct passwd* pwd, char* buffer, size_t bufsize, struct passwd* result );\n"
/>
<function
   name="getpwuid"
   summary="Get information about the user with a given ID"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;pwd.h&gt;\n struct passwd* getpwuid( uid_t uid );\n"
/>
<function
   name="getpwuid_r"
   summary="Get information about the user with a given ID"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;pwd.h&gt;\n int getpwuid_r( uid_t uid, struct passwd* pwd, char* buffer, size_t bufsize, struct passwd** result );\n"
/>
<function
   name="getrlimit, getrlimit64"
   summary="Get the limit on a system resource"
   synopsis="#include &lt;sys/resource.h&gt;\n int getrlimit( int resource, struct rlimit * rlp );\n int getrlimit64( int resource, struct rlimit64 * rlp );\n"
/>
<function
   name="getrusage"
   summary="Get information about resource utilization"
   synopsis="#include &lt;sys/resource.h&gt;\n int getrusage( int who, struct rusage * r_usage );\n"
/>
<function
   name="gets"
   summary="Get a string of characters from standard input"
   synopsis="#include &lt;stdio.h&gt;\n char *gets( char *buf );\n"
/>
<function
   name="getservbyname"
   summary="Get a service entry, given a name"
   synopsis="#include &lt;netdb.h&gt;\n struct servent * getservbyname( const char * name, const char * proto );\n"
/>
<function
   name="getservbyport"
   summary="Get a service entry, given a port"
   synopsis="#include &lt;netdb.h&gt;\n struct servent * getservbyport( int port, const char * proto );\n"
/>
<function
   name="getservent"
   summary="Read the next line of network services database file"
   synopsis="#include &lt;netdb.h&gt;\n struct servent * getservent( void );\n"
/>
<function
   name="getsid"
   summary="Get the session ID of a process"
   synopsis="#include &lt;unistd.h&gt;\n pid_t getsid( pid_t pid );\n"
/>
<function
   name="getsockname"
   summary="Get the name of a socket"
   synopsis="#include &lt;sys/socket.h&gt;\n int getsockname( int s, struct sockaddr * name, socklen_t * namelen );\n"
/>
<function
   name="getsockopt"
   summary="Get options associated with a socket"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n int getsockopt( int s, int level, int optname, void * optval, socklen_t * optlen );\n"
/>
<function
   name="getspent, getspent_r"
   summary="Get an entry from the shadow password database"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;shadow.h&gt;\n struct spwd* getspent( void );\n struct spwd* getspent_r( struct spwd* result, char* buffer, int buflen );\n"
/>
<function
   name="getspnam, getspnam_r"
   summary="Get information about a user with a given name"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;shadow.h&gt;\n struct spwd* getspnam( char* name );\n struct spwd* getspnam_r( const char* name, struct spwd* result, char* buffer, size_t bufsize );\n"
/>
<function
   name="getsubopt"
   summary="Parse suboptions from a string"
   synopsis="#include &lt;stdlib.h&gt;\n int getsubopt( char** optionp, char* const* tokens, char** valuep );\n"
/>
<function
   name="gettimeofday"
   summary="Get the current time"
   synopsis="#include &lt;sys/time.h&gt;\n int gettimeofday( struct timeval * when, void * not_used );\n"
/>
<function
   name="getuid"
   summary="Get the user ID"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n uid_t getuid( void );\n"
/>
<function
   name="getutent"
   summary="Read the next entry from the user-information file"
   synopsis="#include &lt;utmp.h&gt;\n struct utmp * getutent( void );\n"
/>
<function
   name="getutid"
   summary="Search for an entry in the user-information file"
   synopsis="#include &lt;utmp.h&gt;\n struct utmp * getutid( struct utmp * id );\n"
/>
<function
   name="getutline"
   summary="Get an entry from the user-information file"
   synopsis="#include &lt;utmp.h&gt;\n struct utmp * getutline( struct utmp * line );\n"
/>
<function
   name="getw"
   summary="Get a word from a stream"
   synopsis="#include &lt;stdio.h&gt;\n int getw( FILE* stream );\n"
/>
<function
   name="getwc"
   summary="Read a wide character from a stream"
   synopsis="#include &lt;wchar.h&gt;\n wint_t getwc( FILE * fp );\n"
/>
<function
   name="getwchar"
   summary="Read a character from a stream"
   synopsis="#include &lt;wchar.h&gt;\n wint_t getwchar( void );\n"
/>
<function
   name="getwd"
   summary="Get current working directory pathname"
   synopsis="#include &lt;unistd.h&gt;\n char* getwd( char *path_name );\n"
/>
<function
   name="glob"
   summary="Find paths matching a pattern"
   synopsis="#include &lt;glob.h&gt;\n int glob( const char* pattern, int flags, int (*errfunc)( const char* epath, int error ), glob_t* pglob );\n"
/>
<function
   name="globfree"
   summary="Free storage allocated by a call to glob"
   synopsis="#include &lt;glob.h&gt;\n void globfree( glob_t* pglob );\n"
/>
<function
   name="gmtime"
   summary="Convert calendar time to a broken-down time"
   synopsis="#include &lt;time.h&gt;\n struct tm* gmtime( const time_t* timer );\n"
/>
<function
   name="gmtime_r"
   summary="Convert calendar time to a broken-down time"
   synopsis="#include &lt;time.h&gt;\n struct tm* gmtime_r( const time_t* timer, struct tm* result );\n"
/>
<function
   name="hcreate"
   summary="Create a hash search table"
   synopsis="#include &lt;search.h&gt;\n int hcreate( size_t nel );\n"
/>
<function
   name="hdestroy"
   summary="Destroy the hash search table"
   synopsis="#include &lt;search.h&gt;\n void hdestroy( void );\n"
/>
<function
   name="herror"
   summary="Print the message associated with the value of h_errno to standard error"
   synopsis="#include &lt;netdb.h&gt;\n void herror( const char* prefix );\n"
/>
<function
   name="hsearch"
   summary="Search the hash search table"
   synopsis="#include &lt;search.h&gt;\n ENTRY* hsearch ( ENTRY item, ACTION action );\n"
/>
<function
   name="hstrerror"
   summary="Get an error message string associated with the error return status"
   synopsis="#include &lt;netdb.h&gt;\n const char* hstrerror( int err );\n"
/>
<function
   name="htonl"
   summary="Convert a 32-bit value from host-byte order to network-byte order"
   synopsis="#include &lt;arpa/inet.h&gt;\n uint32_t htonl( uint32_t hostlong );\n"
/>
<function
   name="htons"
   summary="Convert a 16-bit value from host-byte order to network-byte order"
   synopsis="#include &lt;arpa/inet.h&gt;\n uint16_t htons( uint16_t hostshort );\n"
/>
<function
   name="hwi_find_item"
   summary="Find an item in the hwinfo structure"
   synopsis="#include &lt;hw/sysinfo.h&gt;\n unsigned hwi_find_item( unsigned start, ... );\n"
/>
<function
   name="hwi_find_tag"
   summary="Find a tag in the hwinfo structure"
   synopsis="#include &lt;hw/sysinfo.h&gt;\n unsigned hwi_find_tag( unsigned start, int curr_item, const char * tagname );\n"
/>
<function
   name="hwi_off2tag"
   summary="Return a pointer to the start of a tag in the hwinfo area of the system page"
   synopsis="#include &lt;hw/sysinfo.h&gt;\n void * hwi_off2tag( unsigned offsect );\n"
/>
<function
   name="hwi_tag2off"
   summary="Return the offset from the start of the hwinfo area of the system page"
   synopsis="#include &lt;hw/sysinfo.h&gt;\n unsigned hwi_tag2off( void *tag );\n"
/>
<function
   name="hypot, hypotf"
   summary="Calculate the length of the hypotenuse for a right-angled triangle"
   synopsis="#include &lt;math.h&gt;\n double hypot( double x, double y );\n float hypotf( float x, float y );\n"
/>
<function
   name="if_freenameindex"
   summary="Free dynamic memory allocated by if_nameindex"
   synopsis="#include &lt;net/if.h&gt;\n void if_freenameindex( struct if_nameindex * ptr );\n"
/>
<function
   name="if_indextoname"
   summary="Map an interface index to its name"
   synopsis="#include &lt;net/if.h&gt;\n char * if_indextoname( unsigned int ifindex, char * ifname );\n"
/>
<function
   name="if_nameindex"
   summary="Return a list of interfaces"
   synopsis="#include &lt;net/if.h&gt;\n struct if_nameindex * if_nameindex( void );\n"
/>
<function
   name="if_nametoindex"
   summary="Map an interface name to its index"
   synopsis="#include &lt;net/if.h&gt;\n unsigned int if_nametoindex( const char * ifname );\n"
/>
<function
   name="ilogb, ilogbf"
   summary="Compute the integral part of a logarithm"
   synopsis="#include &lt;math.h&gt;\n int ilogb ( double x );\n int ilogbf (float x );\n"
/>
<function
   name="in8"
   summary="Read an 8-bit value from a port"
   synopsis="#include &lt;hw/inout.h&gt;\n uint8_t in8( uintptr_t port );\n"
/>
<function
   name="in8s"
   summary="Read 8-bit values from a port"
   synopsis="#include &lt;hw/inout.h&gt;\n void * in8s( void * buff, unsigned len, uintptr_t port );\n"
/>
<function
   name="in16, inbe16, inle16"
   summary="Read a 16-bit value from a port"
   synopsis="#include &lt;hw/inout.h&gt;\n uint16_t in16( uintptr_t port );\n #define inbe16 ( port ) ... #define inle16 ( port ) ..."
/>
<function
   name="in16s"
   summary="Read 16-bit values from a port"
   synopsis="#include &lt;hw/inout.h&gt;\n void * in16s( void * buff, unsigned len, uintptr_t port );\n"
/>
<function
   name="in32, inbe32, inle32"
   summary="Read a 32-bit value from a port"
   synopsis="#include &lt;hw/inout.h&gt;\n uint32_t in32( uintptr_t port );\n #define inbe32 ( port ) ... #define inle32 ( port ) ..."
/>
<function
   name="in32s"
   summary="Read 32-bit values from a port"
   synopsis="#include &lt;hw/inout.h&gt;\n void * in32s( void * buff, unsigned len, uintptr_t port );\n"
/>
<function
   name="index"
   summary="Find a character in a string"
   synopsis="#include &lt;strings.h&gt;\n char* index( const char* s, int c );\n"
/>
<function
   name="inet_addr"
   summary="Convert a string into a numeric Internet address"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n in_addr_t inet_addr( const char * cp );\n"
/>
<function
   name="inet_aton"
   summary="Convert a string into an Internet address stored in a structure"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n int inet_aton( const char * cp, struct in_addr * addr );\n"
/>
<function
   name="inet_lnaof"
   summary="Extract the local network address from an Internet address"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n unsigned long inet_lnaof( struct in_addr in );\n"
/>
<function
   name="inet_makeaddr"
   summary="Convert a network number and a local network address into an Internet address"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n struct in_addr inet_makeaddr( unsigned long net, unsigned long lna );\n"
/>
<function
   name="inet_net_ntop"
   summary="Convert an Internet network number to CIDR format"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n char * inet_net_ntop( int af, const void * src, int bits, char * dst, size_t size );\n"
/>
<function
   name="inet_netof"
   summary="Extract the network number from an Internet address"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n unsigned long inet_netof( struct in_addr in );\n"
/>
<function
   name="inet_net_pton"
   summary="Convert an Internet network number from CIDR format to network format"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n int inet_net_pton( int af, const char * src, void * dst, size_t size );\n"
/>
<function
   name="inet_network"
   summary="Convert a string into an Internet network number"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n unsigned long inet_network( const char * cp );\n"
/>
<function
   name="inet_ntoa"
   summary="Convert an Internet address into a string"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n char * inet_ntoa( struct in_addr in );\n"
/>
<function
   name="inet_ntoa_r"
   summary="Convert an Internet address into a string"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/inet.h&gt;\n char * inet_ntoa_r( struct in_addr in, char * buffer, int bufflen );\n"
/>
<function
   name="inet_ntop"
   summary="Convert a numeric network address to a string"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;arpa/inet.h&gt;\n const char * inet_ntop( int af, const void * src, char * dst, socklen_t size );\n"
/>
<function
   name="inet_pton"
   summary="Convert a text host address to a numeric address"
   synopsis="#include &lt;sys/socket.h&gt;\n #include &lt;arpa/inet.h&gt;\n int inet_pton( int af, const char * src, void * dst );\n"
/>
<function
   name="inet6_option_alloc"
   summary="Append IPv6 hop-by-hop or destination options into ancillary data
object"
   synopsis="#include &lt;netinet/in.h&gt;\n u_int8_t * inet6_option_alloc(struct cmsghdr *cmsg, int datalen, int multx, int plusy);\n"
/>
<function
   name="inet6_option_append"
   summary="Append an IPv6 hop-by-hop or destination option to an ancillary data object"
   synopsis="#include &lt;netinet/in.h&gt;\n int inet6_option_append(struct cmsghdr *cmsg, const u_int8_t *typep, int multx, int plusy);\n"
/>
<function
   name="inet6_option_find"
   summary="Search for IPv6 hop-by-hop and destination options"
   synopsis="#include &lt;netinet/in.h&gt;\n int inet6_option_find(const struct cmsghdr *cmsg, u_int8_t **tptrp, int type);\n"
/>
<function
   name="inet6_option_init"
   summary="Initialize an ancillary data object that contains IPv6 hop-by-hop and destination options"
   synopsis="#include &lt;netinet/in.h&gt;\n int inet6_option_init(void *bp, struct cmsghdr **cmsgp, int type);\n"
/>
<function
   name="inet6_option_next"
   summary="Find the next  IPv6 hop-by-hop or destination option"
   synopsis="#include &lt;netinet/in.h&gt;\n int inet6_option_next(const struct cmsghdr *cmsg, u_int8_t **tptrp);\n"
/>
<function
   name="inet6_option_space"
   summary="Determine how much space an IPv6 hop-by-hop or destination option
requires"
   synopsis="#include &lt;netinet/in.h&gt;\n int inet6_option_space(int nbytes);\n"
/>
<function
   name="inet6_rthdr_add"
   summary="Add an address to an IPv6 routing header"
   synopsis="#include &lt;netinet/in.h&gt;\n int inet6_rthdr_add(struct cmsghdr *cmsg, const struct in6_addr *addr, unsigned int flags);\n"
/>
<function
   name="inet6_rthdr_getaddr"
   summary="Get a pointer to an IPv6 address in the routing header"
   synopsis="#include &lt;netinet/in.h&gt;\n struct in6_addr * inet6_rthdr_getaddr( struct cmsghdr *cmsg, int index);\n"
/>
<function
   name="inet6_rthdr_getflags"
   summary="Get the flags for a segment in an IPv6 routing header"
   synopsis="#include &lt;netinet/in.h&gt;\n int inet6_rthdr_getflags(const struct cmsghdr *cmsg, int index);\n"
/>
<function
   name="inet6_rthdr_init"
   summary="Initialize an  IPv6 routing header "
   synopsis="#include &lt;netinet/in.h&gt;\n struct cmsghdr * inet6_rthdr_init(void *bp, int type);\n"
/>
<function
   name="inet6_rthdr_lasthop"
   summary="Specify the Strict/Loose flag for the final hop of an IPv6 routing header"
   synopsis="#include &lt;netinet/in.h&gt;\n int inet6_rthdr_lasthop(struct cmsghdr *cmsg, unsigned int flags);\n"
/>
<function
   name="inet6_rthdr_reverse"
   summary="Reverse the list of addresses in an  IPv6 router header"
   synopsis="#include &lt;netinet/in.h&gt;\n int inet6_rthdr_reverse(const struct cmsghdr *in, struct cmsghdr *out);\n"
/>
<function
   name="inet6_rthdr_segments"
   summary="Count the segments in an IPv6 routing header "
   synopsis="#include &lt;netinet/in.h&gt;\n int inet6_rthdr_segments(const struct cmsghdr *cmsg);\n"
/>
<function
   name="inet6_rthdr_space"
   summary="Determine the space required by an IPv6 routing header"
   synopsis="#include &lt;netinet/in.h&gt;\n size_t inet6_rthdr_space(int type, int segments);\n"
/>
<function
   name="initgroups"
   summary="Initialize the supplementary group access list"
   synopsis="#include &lt;grp.h&gt;\n #include &lt;sys/types.h&gt;\n int initgroups( const char * name, gid_t basegid );\n"
/>
<function
   name="initstate"
   summary="Initialize a pseudo-random number generator"
   synopsis="#include &lt;stdlib.h&gt;\n char* initstate( unsigned int seed, char* state, size_t size );\n"
/>
<function
   name="input_line"
   summary="Get a string of characters from a file"
   synopsis="#include &lt;stdio.h&gt;\n char* input_line( FILE* fp, char* buf, int bufsize );\n extern int _input_line_max;"
/>
<function
   name="insque"
   summary="Insert an element into a doubly linked queue"
   synopsis="#include &lt;search.h&gt;\n void insque( void *elem, void *pred);\n"
/>
<function
   name="InterruptAttach, InterruptAttach_r"
   summary="Attach an interrupt handler to an interrupt source"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int InterruptAttach( int intr, const struct sigevent * (* handler)(void *, int), const void * area, int size, unsigned flags );\n int InterruptAttach_r( int intr, const struct sigevent * (* handler)(void *, int), const void * area, int size, unsigned flags );\n"
/>
<function
   name="InterruptAttachEvent, InterruptAttachEvent_r"
   summary="Attach an event to an interrupt source"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int InterruptAttachEvent( int intr, const struct sigevent* event, unsigned flags );\n int InterruptAttachEvent_r( int intr, const struct sigevent* event, unsigned flags );\n"
/>
<function
   name="InterruptDetach, InterruptDetach_r"
   summary="Detach an interrupt handler by ID"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int InterruptDetach( int id );\n int InterruptDetach_r( int id );\n"
/>
<function
   name="InterruptDisable"
   summary="Disable hardware interrupts"
   synopsis="#include &lt;sys/neutrino.h&gt;\n void InterruptDisable( void );\n"
/>
<function
   name="InterruptEnable"
   summary="Enable hardware interrupts"
   synopsis="#include &lt;sys/neutrino.h&gt;\n void InterruptEnable( void );\n"
/>
<function
   name="InterruptHookIdle"
   summary="Attach an idle interrupt handler"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int InterruptHookIdle( void (*handler)(uint64_t *, struct qtime_entry *), unsigned flags );\n"
/>
<function
   name="InterruptHookTrace"
   summary="Attach the pseudo interrupt handler that the instrumented module uses"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int InterruptHookTrace( const struct sigevent * (* handler)(int), unsigned flags );\n"
/>
<function
   name="InterruptLock"
   summary="Guard a critical section in an interrupt handler"
   synopsis="#include &lt;sys/neutrino.h&gt;\n void InterruptLock( intrspin_t* spinlock );\n"
/>
<function
   name="InterruptMask"
   summary="Disable a hardware interrupt"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int InterruptMask( int intr, int id );\n"
/>
<function
   name="InterruptStatus"
   summary="Determine whether or not interrupts are enabled"
   synopsis="#include &lt;sys/neutrino.h&gt;\n void InterruptStatus( void );\n"
/>
<function
   name="InterruptUnlock"
   summary="Release a critical section in an interrupt handler"
   synopsis="#include &lt;sys/neutrino.h&gt;\n void InterruptUnlock( intrspin_t* spinlock );\n"
/>
<function
   name="InterruptUnmask"
   summary="Enable a hardware interrupt"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int InterruptUnmask( int intr, int id );\n"
/>
<function
   name="InterruptWait, InterruptWait_r"
   summary="Wait for a hardware interrupt"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int InterruptWait( int flags, const uint64_t * timeout );\n int InterruptWait_r( int flags, const uint64_t * timeout );\n"
/>
<function
   name="_intr_v86"
   summary="Execute a real-mode software interrupt"
   synopsis="#include &lt;x86/v86.h&gt;\n int _intr_v86( int swi, struct _v86reg* regs, void* data, int datasize );\n"
/>
<function
   name="ioctl, ioctl_socket"
   summary="Control a device"
   synopsis="#include &lt;sys/ioctl.h&gt;\n int ioctl( int fd, int request, ... );\n int ioctl_socket( int fd, int request, ... );\n"
/>
<function
   name="iofdinfo"
   summary="Retrieve server attributes"
   synopsis="#include &lt;sys/iomgr.h&gt;\n int iofdinfo( int filedes, unsigned flags, struct _fdinfo * info, char * path, int maxlen );\n"
/>
<function
   name="iofunc_attr_init"
   summary="Initialize the per-name attribute structure associated with a device"
   synopsis="#include &lt;sys/iofunc.h&gt;\n void iofunc_attr_init ( iofunc_attr_t *attr, mode_t mode, iofunc_attr_t *dattr, struct _client_info *info );\n"
/>
<function
   name="iofunc_attr_lock"
   summary="Lock the attribute structure"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_attr_lock( iofunc_attr_t *attr );\n"
/>
<function
   name="iofunc_attr_trylock"
   summary="Try to lock the attribute structure"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_attr_trylock( iofunc_attr_t *attr );\n"
/>
<function
   name="iofunc_attr_unlock"
   summary="Unlock the attribute structure"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_attr_unlock( iofunc_attr_t *attr );\n"
/>
<function
   name="iofunc_check_access"
   summary="Check access permissions"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_check_access( resmgr_context_t *ctp, const iofunc_attr_t *attr, mode_t checkmode, const struct _client_info *info );\n"
/>
<function
   name="iofunc_chmod"
   summary="Handle an _IO_CHMOD message"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_chmod ( resmgr_context_t *ctp, io_chmod_t *msg, iofunc_ocb_t *ocb, iofunc_attr_t *attr );\n"
/>
<function
   name="iofunc_chmod_default"
   summary="Default handler for _IO_CHMOD messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_chmod_default( resmgr_context_t *ctp, io_chmod_t *msg, iofunc_ocb_t *ocb );\n"
/>
<function
   name="iofunc_chown"
   summary="Handle an _IO_CHOWN message"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_chown ( resmgr_context_t *ctp, io_chown_t *msg, iofunc_ocb_t *ocb, iofunc_attr_t *attr );\n"
/>
<function
   name="iofunc_chown_default"
   summary="Default handler for _IO_CHOWN messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_chown_default( resmgr_context_t *ctp, io_chown_t *msg, iofunc_ocb_t *ocb );\n"
/>
<function
   name="iofunc_client_info"
   summary="Return information about a client connection"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_client_info ( resmgr_context_t * ctp, int ioflag, struct _client_info * info );\n"
/>
<function
   name="iofunc_close_dup"
   summary="Free all locks allocated for the client process"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_close_dup( resmgr_context_t* ctp, io_close_t* msg, iofunc_ocb_t* ocb, iofunc_attr_t* attr );\n"
/>
<function
   name="iofunc_close_dup_default"
   summary="Default handler for _IO_CLOSE messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_close_dup_default( resmgr_context_t *ctp, io_close_t *msg, iofunc_ocb_t *ocb );\n"
/>
<function
   name="iofunc_close_ocb"
   summary="Return the memory allocated for an OCB"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_close_ocb( resmgr_context_t* ctp, iofunc_ocb_t* ocb, iofunc_attr_t* attr );\n"
/>
<function
   name="iofunc_close_ocb_default"
   summary="Return the memory allocated for an OCB"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_close_ocb_default( resmgr_context_t* ctp, void* reserved, iofunc_ocb_t* ocb );\n"
/>
<function
   name="iofunc_devctl"
   summary="Handle an _IO_DEVCTL message"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_devctl( resmgr_context_t *ctp, io_devctl_t *msg, iofunc_ocb_t *ocb, iofunc_attr_t *attr );\n"
/>
<function
   name="iofunc_devctl_default"
   summary="Default handler for _IO_DEVCTL messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_devctl_default( resmgr_context_t *ctp, io_devctl_t *msg, iofunc_ocb_t *ocb );\n"
/>
<function
   name="iofunc_fdinfo"
   summary="Handle an _IO_FDINFO message"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_fdinfo( resmgr_context_t * ctp, iofunc_ocb_t * ocb, iofunc_attr_t * attr, struct _fdinfo * info );\n"
/>
<function
   name="iofunc_fdinfo_default"
   summary="Default handler for _IO_FDINFO messages"
   synopsis="#include &lt;sys/iomgr.h&gt;\n int iofunc_fdinfo_default( resmgr_context_t * ctp, io_fdinfo_t * msg, iofunc_ocb_t * ocb );\n"
/>
<function
   name="iofunc_func_init"
   summary="Initialize the default POSIX-layer function tables"
   synopsis="#include &lt;sys/iofunc.h&gt;\n void iofunc_func_init( unsigned nconnect, resmgr_connect_funcs_t *connect, unsigned nio, resmgr_io_funcs_t *io );\n"
/>
<function
   name="iofunc_link"
   summary="Link two directories"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_link( resmgr_context_t* ctp, io_link_t* msg, iofunc_attr_t* attr, iofunc_attr_t* dattr, struct _client_info* info );\n"
/>
<function
   name="iofunc_lock"
   summary="Lock a resource"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_lock( resmgr_context_t * ctp, io_lock_t * msg, iofunc_ocb_t * ocb, iofunc_attr_t * attr );\n"
/>
<function
   name="iofunc_lock_calloc"
   summary="Allocate memory to lock structures"
   synopsis="#include &lt;sys/iofunc.h&gt;\n iofunc_lock_list_t *iofunc_lock_calloc ( resmgr_context_t *ctp, IOFUNC_OCB_T *ocb, size_t size );\n"
/>
<function
   name="iofunc_lock_default"
   summary="Default handler for _IO_LOCK messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_lock_default( resmgr_context_t * ctp, io_lock_t * msg, iofunc_ocb_t * ocb );\n"
/>
<function
   name="iofunc_lock_free"
   summary="Return memory allocated for lock structures"
   synopsis="#include &lt;sys/iofunc.h&gt;\n void iofunc_lock_free( iofunc_lock_list_t* lock, size_t size );\n"
/>
<function
   name="iofunc_lock_ocb_default"
   summary="Default handler for the lock_ocb callout"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_lock_ocb_default( resmgr_context_t *ctp, void *reserved, iofunc_ocb_t *ocb );\n"
/>
<function
   name="iofunc_lseek"
   summary="Handle an _IO_LSEEK message"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_lseek ( resmgr_context_t* ctp, io_lseek_t* msg, iofunc_ocb_t* ocb, iofunc_attr_t* attr );\n"
/>
<function
   name="iofunc_lseek_default"
   summary="Default handler for _IO_LSEEK messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_lseek_default( resmgr_context_t* ctp, io_lseek_t* msg, iofunc_ocb_t* ocb );\n"
/>
<function
   name="iofunc_mknod"
   summary="Verify a client's ability to make a new filesystem entry point"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_mknod( resmgr_context_t *ctp, io_mknod_t *msg, iofunc_attr_t *attr, iofunc_attr_t *dattr, struct _client_info *info );\n"
/>
<function
   name="iofunc_mmap"
   summary="Handle an _IO_MMAP message"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_mmap ( resmgr_context_t * hdr, io_mmap_t * msg, iofunc_ocb_t * ocb, iofunc_attr_t * attr );\n"
/>
<function
   name="iofunc_mmap_default"
   summary="Default handler for _IO_MMAP messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_mmap_default ( resmgr_context_t * hdr, io_mmap_t * msg, iofunc_ocb_t * ocb );\n"
/>
<function
   name="iofunc_notify"
   summary="Install, poll, or remove a notification handler"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_notify( resmgr_context_t *ctp, io_notify_t *msg, iofunc_notify_t *nop, int trig, const int *notifycounts, int *armed );\n"
/>
<function
   name="iofunc_notify_remove"
   summary="Remove notification entries from list"
   synopsis="#include &lt;sys/iofunc.h&gt;\n void iofunc_notify_remove( resmgr_context_t * ctp, iofunc_notify_t * nop );\n"
/>
<function
   name="iofunc_notify_trigger"
   summary="Send notifications to queued clients"
   synopsis="#include &lt;sys/iofunc.h&gt;\n void iofunc_notify_trigger( iofunc_notify_t *nop, int count, int index );\n"
/>
<function
   name="iofunc_ocb_attach"
   summary="Initialize an Open Control Block"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_ocb_attach( resmgr_context_t * ctp, io_open_t * msg, iofunc_ocb_t * ocb, iofunc_attr_t * attr, const resmgr_io_funcs_t * io_funcs );\n"
/>
<function
   name="iofunc_ocb_calloc"
   summary="Allocate an iofunc Open Control Block"
   synopsis="#include &lt;sys/iofunc.h&gt;\n iofunc_ocb_t * iofunc_ocb_calloc( resmgr_context_t * ctp, iofunc_attr_t * attr );\n"
/>
<function
   name="iofunc_ocb_detach"
   summary="Release Open Control Block resources"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_ocb_detach( resmgr_context_t * ctp, iofunc_ocb_t * ocb );\n"
/>
<function
   name="iofunc_ocb_free"
   summary="Deallocate an iofunc Open Control Block's memory"
   synopsis="#include &lt;sys/iofunc.h&gt;\n void iofunc_ocb_free( iofunc_ocb_t * ocb );\n"
/>
<function
   name="iofunc_open"
   summary="Verify a client's ability to open a resource"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_open( resmgr_context_t *ctp, io_open_t *msg, iofunc_attr_t *attr, iofunc_attr_t *dattr, struct _client_info *info );\n"
/>
<function
   name="iofunc_open_default"
   summary="Default handler for _IO_CONNECT messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_open_default( resmgr_context_t *ctp, io_open_t *msg, iofunc_attr_t *attr, void *extra );\n"
/>
<function
   name="iofunc_openfd"
   summary="Increment count and locking flags"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_openfd( resmgr_context_t *ctp, io_openfd_t *msg, iofunc_ocb_t *ocb, iofunc_attr_t *attr );\n"
/>
<function
   name="iofunc_openfd_default"
   summary="Default handler for _IO_OPENFD messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_openfd_default( resmgr_context_t *ctp, io_openfd_t *msg, iofunc_ocb_t *ocb );\n"
/>
<function
   name="iofunc_pathconf"
   summary="Support pathconf requests"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_pathconf( resmgr_context_t *ctp, io_pathconf_t *msg, iofunc_ocb_t *ocb, iofunc_attr_t *attr );\n"
/>
<function
   name="iofunc_pathconf_default"
   summary="Default handler for _IO_PATHCONF messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_pathconf_default( resmgr_context_t *ctp, io_pathconf_t *msg, iofunc_ocb_t *ocb );\n"
/>
<function
   name="iofunc_read_default"
   summary="Default handler for _IO_READ messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_read_default( resmgr_context_t *ctp, io_read_t *msg, iofunc_ocb_t *ocb );\n"
/>
<function
   name="iofunc_read_verify"
   summary="Verify a client's read access to a resource"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_read_verify( resmgr_context_t* ctp, io_read_t* msg, iofunc_ocb_t* ocb, int* nonblock );\n"
/>
<function
   name="iofunc_readlink"
   summary="Verify a client's ability to read a symbolic link"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_readlink( resmgr_context_t *ctp, io_readlink_t *msg, iofunc_attr_t *attr, struct _client_info *info );\n"
/>
<function
   name="iofunc_rename"
   summary="Do permission checks for a _IO_CONNECT_RENAME message"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_rename( resmgr_context_t* ctp, io_rename_t* msg, iofunc_attr_t* oldattr, iofunc_attr_t* olddattr, iofunc_attr_t* newattr, iofunc_attr_t* newdattr, struct _client_info* info );\n"
/>
<function
   name="iofunc_space_verify"
   summary="Do permission checks for the _IO_SPACE message"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_space_verify( resmgr_context_t *ctp, io_space_t *msg, iofunc_ocb_t *ocb, int *nonblock );\n"
/>
<function
   name="iofunc_stat"
   summary="Populate a stat structure"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_stat( resmgr_context_t* ctp, iofunc_attr_t* attr, struct stat* stat );\n"
/>
<function
   name="iofunc_stat_default"
   summary="Default handler for _IO_STAT messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_stat_default( resmgr_context_t *ctp, io_stat_t *msg, iofunc_ocb_t *ocb );\n"
/>
<function
   name="iofunc_sync"
   summary="Indicate if synchronization is needed"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_sync( resmgr_context_t* ctp, iofunc_ocb_t* ocb, int ioflag );\n"
/>
<function
   name="iofunc_sync_default"
   summary="Default handler for _IO_SYNC messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_sync_default( resmgr_context_t *ctp, io_sync_t *msg, iofunc_ocb_t *ocb );\n"
/>
<function
   name="iofunc_sync_verify"
   summary="Verify permissions to sync"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_sync_verify( resmgr_context_t *ctp, io_sync_t *msg, iofunc_ocb_t *ocb );\n"
/>
<function
   name="iofunc_time_update"
   summary="Update time stamps"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_time_update( iofunc_attr_t* attr );\n"
/>
<function
   name="iofunc_unblock"
   summary="Unblock OCBs"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_unblock( resmgr_context_t * ctp, iofunc_attr_t * attr );\n"
/>
<function
   name="iofunc_unblock_default"
   summary="Default unblock handler"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_unblock_default( resmgr_context_t * ctp, io_pulse_t * msg, iofunc_ocb_t * ocb );\n"
/>
<function
   name="iofunc_unlink"
   summary="Verify that an entry can be unlinked"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_unlink( resmgr_context_t* ctp, io_unlink_t* msg, iofunc_attr_t* attr, iofunc_attr_t* dattr, struct _client_info* info );\n"
/>
<function
   name="iofunc_unlock_ocb_default"
   summary="Default handler for the unlock_ocb callout"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_unlock_ocb_default( resmgr_context_t * ctp, void * reserved, iofunc_ocb_t * ocb );\n"
/>
<function
   name="iofunc_utime"
   summary="Update time stamps"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_utime( resmgr_context_t* ctp, io_utime_t* msg, iofunc_ocb_t* ocb, iofunc_attr_t* attr );\n"
/>
<function
   name="iofunc_utime_default"
   summary="Default handler for _IO_UTIME messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_utime_default( resmgr_context_t* ctp, io_utime_t* msg, iofunc_ocb_t* ocb );\n"
/>
<function
   name="iofunc_write_default"
   summary="Default handler for _IO_WRITE messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_write_default( resmgr_context_t* ctp, io_write_t* msg, iofunc_ocb_t* ocb );\n"
/>
<function
   name="iofunc_write_verify"
   summary="Verify a client's write access to a resource"
   synopsis="#include &lt;sys/iofunc.h&gt;\n int iofunc_write_verify( resmgr_context_t* ctp, io_write_t* msg, iofunc_ocb_t* ocb, int* nonblock );\n"
/>
<function
   name="ionotify"
   summary="Arm a resource manager"
   synopsis="#include &lt;unistd.h&gt;\n #include &lt;sys/iomsg.h&gt;\n int ionotify ( int fd, int action, int flags, const struct sigevent* event );\n"
/>
<function
   name="ipsec_dump_policy"
   summary="Generate a readable string from an IPsec policy specification"
   synopsis="#include &lt;netinet6/ipsec.h&gt;\n char* ipsec_dump_policy(char *buf, char *delim);\n"
/>
<function
   name="ipsec_get_policylen"
   summary="Get the length of the IPsec policy"
   synopsis="#include &lt;netinet6/ipsec.h&gt;\n int ipsec_get_policylen(char *buf);\n"
/>
<function
   name="ipsec_set_policy"
   summary="Generate an IPsec policy specification structure from a readable string"
   synopsis="#include &lt;netinet6/ipsec.h&gt;\n char* ipsec_set_policy( char *policy, int len );\n"
/>
<function
   name="ipsec_strerror"
   summary="Error messages for IPsec policy manipulation library"
   synopsis="#include &lt;netinet6/ipsec.h&gt;\n const char *ipsec_strerror( void );\n"
/>
<function
   name="iruserok, iruserok_sa"
   summary="Check the identity of a remote host"
   synopsis="#include &lt;unistd.h&gt;\n int iruserok( uint32_t raddr, int superuser, char * ruser, char * luser );\n int iruserok_sa( const void * raddr, int superuser, int rlen, char * ruser, char * luser );\n"
/>
<function
   name="isalnum"
   summary="Test a character to see if it's alphanumeric"
   synopsis="#include &lt;ctype.h&gt;\n int isalnum( int c );\n"
/>
<function
   name="isalpha"
   summary="Test a character to see if it's alphabetic"
   synopsis="#include &lt;ctype.h&gt;\n int isalpha( int c );\n"
/>
<function
   name="isascii"
   summary="Test a character to see if it's a 7-bit ASCII character"
   synopsis="#include &lt;ctype.h&gt;\n int isascii( int c );\n"
/>
<function
   name="isatty"
   summary="Test to see if a file descriptor is associated with a terminal"
   synopsis="#include &lt;unistd.h&gt;\n int isatty( int fildes );\n"
/>
<function
   name="iscntrl"
   summary="Test a character to see if it's a control character"
   synopsis="#include &lt;ctype.h&gt;\n int iscntrl( int c );\n"
/>
<function
   name="isdigit"
   summary="Test a character to see if it's a decimal digit"
   synopsis="#include &lt;ctype.h&gt;\n int isdigit( int c );\n"
/>
<function
   name="isfdtype"
   summary="Determine whether a file descriptor refers to a socket"
   synopsis="#include &lt;sys/stat.h&gt;\n int isfdtype( int filedes, int fdtype );\n"
/>
<function
   name="isfinite"
   summary="Determine if a number is finite"
   synopsis="#include &lt;math.h&gt;\n int isfinite ( double x );\n"
/>
<function
   name="isgraph"
   summary="Test a character to see if it's any printable character except a space"
   synopsis="#include &lt;ctype.h&gt;\n int isgraph( int c );\n"
/>
<function
   name="isinf"
   summary="Test for infinity"
   synopsis="#include &lt;math.h&gt;\n #define isinf ( x ) ..."
/>
<function
   name="islower"
   summary="Test a character to see if it's a lowercase letter"
   synopsis="#include &lt;ctype.h&gt;\n int islower( int c );\n"
/>
<function
   name="isnan"
   summary="Test for not-a-number (NAN)"
   synopsis="#include &lt;math.h&gt;\n #define isnan ( x ) ..."
/>
<function
   name="isprint"
   summary="Test a character to see if it's any printable character, including a space"
   synopsis="#include &lt;ctype.h&gt;\n int isprint( int c );\n"
/>
<function
   name="ispunct"
   summary="Test a character to see if it's any punctuation character"
   synopsis="#include &lt;ctype.h&gt;\n int ispunct( int c );\n"
/>
<function
   name="isspace"
   summary="Test a character to see if it's a whitespace character"
   synopsis="#include &lt;ctype.h&gt;\n int isspace( int c );\n"
/>
<function
   name="isupper"
   summary="Test a character to see if it's an uppercase letter"
   synopsis="#include &lt;ctype.h&gt;\n int isupper( int c );\n"
/>
<function
   name="iswalnum"
   summary="Test a wide character to see if it's alphanumeric"
   synopsis="#include &lt;wctype.h&gt;\n int iswalnum( wint_t wc );\n"
/>
<function
   name="iswalpha"
   summary="Test a wide character to see if it's alphabetic"
   synopsis="#include &lt;wctype.h&gt;\n int iswalpha( wint_t wc );\n"
/>
<function
   name="iswcntrl"
   summary="Test a wide character to see if it's a control character"
   synopsis="#include &lt;wctype.h&gt;\n int iswcntrl( wint_t wc );\n"
/>
<function
   name="iswctype"
   summary="Test a wide character to see if it's a given character class"
   synopsis="#include &lt;wctype.h&gt;\n int iswctype( wint_t wc, wctype_t charclass );\n"
/>
<function
   name="iswdigit"
   summary="Test a wide character to see if it's a decimal digit"
   synopsis="#include &lt;wctype.h&gt;\n int iswdigit( wint_t wc );\n"
/>
<function
   name="iswgraph"
   summary="Test a wide character to see if it's any printable character except space"
   synopsis="#include &lt;wctype.h&gt;\n int iswgraph( wint_t wc );\n"
/>
<function
   name="iswlower"
   summary="Test a wide character to see if it's a lowercase letter"
   synopsis="#include &lt;wctype.h&gt;\n int iswlower( wint_t wc );\n"
/>
<function
   name="iswprint"
   summary="Test a wide character to see if it's any printable character, including space"
   synopsis="#include &lt;wctype.h&gt;\n int iswprint( wint_t wc );\n"
/>
<function
   name="iswpunct"
   summary="Test a wide character to see if it's any punctuation character"
   synopsis="#include &lt;wctype.h&gt;\n int iswpunct( wint_t wc );\n"
/>
<function
   name="iswspace"
   summary="Test a wide character to see if it's a whitespace character"
   synopsis="#include &lt;wctype.h&gt;\n int iswspace( wint_t wc );\n"
/>
<function
   name="iswupper"
   summary="Test a character to see if it's an uppercase letter"
   synopsis="#include &lt;wctype.h&gt;\n int iswupper( wint_t wc );\n"
/>
<function
   name="iswxdigit"
   summary="Test a wide character to see if it's a hexadecimal digit"
   synopsis="#include &lt;wctype.h&gt;\n int iswxdigit( wint_t wc );\n"
/>
<function
   name="isxdigit"
   summary="Test a character to see if it's a hexadecimal digit"
   synopsis="#include &lt;ctype.h&gt;\n int isxdigit( int c );\n"
/>
<function
   name="itoa"
   summary="Convert an integer into a string, using a given base"
   synopsis="#include &lt;stdlib.h&gt;\n char* itoa( int value, char* buffer, int radix );\n"
/>
<function
   name="j0, j0f"
   summary="Compute a Bessel function of the first kind"
   synopsis="#include &lt;math.h&gt;\n double j0( double x );\n float j0f( float x );\n"
/>
<function
   name="j1, j1f"
   summary="Compute a Bessel function of the first kind"
   synopsis="#include &lt;math.h&gt;\n double j1( double x );\n float j1f( float x );\n"
/>
<function
   name="jn, jnf"
   summary="Compute a Bessel function of the first kind"
   synopsis="#include &lt;math.h&gt;\n double jn( int n, double x );\n float jnf( int n, float x );\n"
/>
<function
   name="jrand48"
   summary="Generate a pseudo-random signed long integer in a thread-safe manner"
   synopsis="#include &lt;stdlib.h&gt;\n long jrand48( unsigned short xsubi[3] );\n"
/>
<function
   name="kill"
   summary="Send a signal to a process or a group of processes"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;signal.h&gt;\n int kill( pid_t pid, int sig );\n"
/>
<function
   name="killpg"
   summary="Send a signal to a process group"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;signal.h&gt;\n int killpg( pid_t pgrp, int sig );\n"
/>
<function
   name="labs"
   summary="Calculate the absolute value of a long integer"
   synopsis="#include &lt;stdlib.h&gt;\n long labs( long j );\n"
/>
<function
   name="lchown"
   summary="Change the user ID and group ID of a file or symbolic link"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n int lchown( const char * path, uid_t owner, gid_t group );\n"
/>
<function
   name="lcong48"
   summary="Initialize a sequence of pseudo-random numbers"
   synopsis="#include &lt;stdlib.h&gt;\n void lcong48( unsigned short int param[7] );\n"
/>
<function
   name="ldexp, ldexpf, ldexpl"
   summary="Multiply a floating-point number by an integral power of 2"
   synopsis="#include &lt;math.h&gt;\n double ldexp( double x, int exp );\n float ldexp( float x, int exp );\n long double ldexpl( long double x, int exp );\n"
/>
<function
   name="ldiv"
   summary="Perform division on long integers"
   synopsis="#include &lt;stdlib.h&gt;\n ldiv_t ldiv( long int numer, long int denom );\n"
/>
<function
   name="lfind"
   summary="Find an entry in a linear search table"
   synopsis="#include &lt;search.h&gt;\n void * lfind( const void * key, const void * base, unsigned * num, unsigned width, int ( * compare)( const void * element1, const void * element2 ) );\n"
/>
<function
   name="lgamma, lgamma_r, lgammaf, lgammaf_r"
   summary="Log gamma function"
   synopsis="#include &lt;math.h&gt;\n double lgamma( double x );\n double lgamma_r( double x, int* signgamp);\n float lgammaf( float x );\n float lgammaf_r( float x, int* signgamp);\n"
/>
<function
   name="link"
   summary="Create a link to an existing file"
   synopsis="#include &lt;unistd.h&gt;\n int link( const char* existing, const char* new );\n"
/>
<function
   name="lio_listio"
   summary="Initiate a list of I/O requests"
   synopsis="#include &lt;aio.h&gt;\n int lio_listio( int mode, struct aiocb* const list[], int nent, struct sigevent* sig );\n"
/>
<function
   name="listen"
   summary="Listen for connections on a socket"
   synopsis="#include &lt;sys/socket.h&gt;\n int listen( int s, int backlog );\n"
/>
<function
   name="llabs"
   summary="Calculate the absolute value of a long long integer"
   synopsis="#include &lt;stdlib.h&gt;\n long long llabs( long long j );\n"
/>
<function
   name="localeconv"
   summary="Set numeric formatting according to the current locale"
   synopsis="#include &lt;locale.h&gt;\n struct lconv * localeconv( void );\n"
/>
<function
   name="localtime"
   summary="Convert calendar time to local time"
   synopsis="#include &lt;time.h&gt;\n struct tm *localtime( const time_t *timer );\n"
/>
<function
   name="localtime_r"
   summary="Convert calendar time to local time"
   synopsis="#include &lt;time.h&gt;\n struct tm* localtime_r( const time_t* timer, struct tm* result );\n"
/>
<function
   name="lockf"
   summary="Lock or unlock a section of a file"
   synopsis="#include &lt;unistd.h&gt;\n int lockf( int filedes, int function, off_t size );\n"
/>
<function
   name="log, logf, logl"
   summary="Compute the natural logarithm of a number"
   synopsis="#include &lt;math.h&gt;\n double log( double x );\n float logf( float x );\n long double logl( long double x );\n"
/>
<function
   name="log10, log10f, log10l"
   summary="Compute the logarithm (base 10) of a number"
   synopsis="#include &lt;math.h&gt;\n double log10( double x );\n float log10f( float x );\n long double log10l( long double x );\n"
/>
<function
   name="log1p, log1pf, log1pl"
   summary="Log(1+x)"
   synopsis="#include &lt;math.h&gt;\n double log1p ( double x );\n float log1pf ( float x );\n long double log1pl( long double x );\n"
/>
<function
   name="logb, logbf"
   summary="Compute the radix-independent exponent"
   synopsis="#include &lt;math.h&gt;\n double logb ( double x );\n float logbf ( float x );\n"
/>
<function
   name="login_tty"
   summary="Prepare for a login in a tty"
   synopsis="#include &lt;unix.h&gt;\n int login_tty( int fd );\n"
/>
<function
   name="longjmp"
   summary="Restore the environment saved by setjmp"
   synopsis="#include &lt;setjmp.h&gt;\n void longjmp( jmp_buf env, int return_value );\n"
/>
<function
   name="lrand48"
   summary="Generate a pseudo-random nonnegative long integer"
   synopsis="#include &lt;stdlib.h&gt;\n long lrand48( void );\n"
/>
<function
   name="lsearch"
   summary="Perform a linear search in an array"
   synopsis="#include &lt;search.h&gt;\n void * lsearch( const void * key, const void * base, unsigned * num, unsigned width, int ( * compare)( const void * element1, const void * element2 ) );\n"
/>
<function
   name="lseek, lseek64"
   summary="Set the current file position at the operating-system level"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n off_t lseek( int filedes, off_t offset, int whence );\n off64_t lseek64( int filedes, off64_t offset, int whence );\n"
/>
<function
   name="lstat, lstat64"
   summary="Get information about a file or directory"
   synopsis="#include &lt;sys/stat.h&gt;\n int lstat( const char* path, struct stat* buf );\n int lstat64( const char* path, struct stat64* buf );\n"
/>
<function
   name="ltoa, lltoa"
   summary="Convert a long integer into a string, using a given base"
   synopsis="#include &lt;stdlib.h&gt;\n char* ltoa( long value, char* buffer, int radix );\n char* lltoa( long long value, char* buffer, int radix );\n"
/>
<function
   name="ltrunc"
   summary="Truncate a file at a given position"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n off_t ltrunc( int fildes, off_t offset, int whence );\n"
/>
<function
   name="main"
   summary="Program entry function"
   synopsis="int main( void );\n int main( int argc, const char *argv[] );\n int main( int argc, const char *argv[], char *envp[] );\n"
/>
<function
   name="mallinfo"
   summary="Get memory allocation information"
   synopsis="#include &lt;malloc.h&gt;\n struct mallinfo mallinfo ( void );\n"
/>
<function
   name="malloc"
   summary="Allocate memory"
   synopsis="#include &lt;stdlib.h&gt;\n void* malloc( size_t size );\n"
/>
<function
   name="mallopt"
   summary="Control the extra checking for memory allocation"
   synopsis="#include &lt;malloc/malloc.h&gt;\n int mallopt( int cmd, int value );\n"
/>
<function
   name="max"
   summary="Return the greater of two numbers"
   synopsis="#include &lt;stdlib.h&gt;\n #define max(a,b) &#8230;"
/>
<function
   name="mblen"
   summary="Count the bytes in a multibyte character"
   synopsis="#include &lt;stdlib.h&gt;\n int mblen( const char * s, size_t n );\n"
/>
<function
   name="mbrlen"
   summary="Count the bytes in a multibyte character (restartable)"
   synopsis="#include &lt;wchar.h&gt;\n size_t mbrlen( const char * s, size_t n, mbstate_t * ps);\n"
/>
<function
   name="mbrtowc"
   summary="Convert a multibyte character into a wide character (restartable)"
   synopsis="#include &lt;wchar.h&gt;\n size_t mbrtowc( wchar_t * pwc, const char * s, size_t n, mbstate_t * ps );\n"
/>
<function
   name="mbsinit"
   summary="Determine the status of the conversion object used for restartable mb* functions"
   synopsis="#include &lt;wchar.h&gt;\n int mbsinit( const mbstate_t * ps );\n"
/>
<function
   name="mbsrtowcs"
   summary="Convert a multibyte-character string into a wide-character string (restartable)"
   synopsis="#include &lt;wchar.h&gt;\n size_t mbsrtowcs( wchar_t * dst, const char ** src, size_t n, mbstate_t * ps );\n"
/>
<function
   name="mbstowcs"
   summary="Convert a multibyte-character string into a wide-character string"
   synopsis="#include &lt;stdlib.h&gt;\n size_t mbstowcs( wchar_t * pwcs, const char * s, size_t n );\n"
/>
<function
   name="mbtowc"
   summary="Convert a multibyte character into a wide character"
   synopsis="#include &lt;stdlib.h&gt;\n int mbtowc( wchar_t * pwc, const char * s, size_t n );\n"
/>
<function
   name="mcheck"
   summary="Enable memory allocation routine consistency checks"
   synopsis="#include &lt;malloc.h&gt;\n int mcheck( void (* abort_fn)(enum mcheck_status status));\n"
/>
<function
   name="mem_offset, mem_offset64"
   summary="Get the physical address of a virtually mapped memory block"
   synopsis="#include &lt;sys/mman.h&gt;\n int mem_offset( const void * addr, int fd, size_t length, off_t * offset, size_t * contig_len );\n int mem_offset64( const void * addr, int fd, size_t length, off64_t * offset, size_t * contig_len );\n"
/>
<function
   name="memalign"
   summary="Allocate aligned memory"
   synopsis="#include &lt;malloc.h&gt;\n void *memalign( size_t alignment, size_t size );\n"
/>
<function
   name="memccpy"
   summary="Copy bytes between buffers until a given byte is found"
   synopsis="#include &lt;string.h&gt;\n void* memccpy( void* dest, const void* src, int c, size_t cnt );\n"
/>
<function
   name="memchr"
   summary="Find the first occurrence of a character in a buffer"
   synopsis="#include &lt;string.h&gt;\n void* memchr(void* buf, int ch, size_t length );\n"
/>
<function
   name="memcmp"
   summary="Compare the bytes in two buffers"
   synopsis="#include &lt;string.h&gt;\n int memcmp( const void* s1, const void* s2, size_t length );\n"
/>
<function
   name="memcpy"
   summary="Copy bytes from one buffer to another"
   synopsis="#include &lt;string.h&gt;\n void* memcpy( void* dst, const void* src, size_t length );\n"
/>
<function
   name="memcpyv"
   summary="Copy a given number of structures"
   synopsis="#include &lt;string.h&gt;\n size_t memcpyv( const struct iovec *dst, int dparts, int doff, const struct iovec *src, int sparts, int soff );\n"
/>
<function
   name="memicmp"
   summary="Compare two buffers, ignoring case"
   synopsis="#include &lt;string.h&gt;\n int memicmp( const void* s1, const void* s2, size_t length );\n"
/>
<function
   name="memmove"
   summary="Copy bytes from one buffer to another, handling overlapping memory correctly"
   synopsis="#include &lt;string.h&gt;\n void* memmove( void* dst, const void* src, size_t length );\n"
/>
<function
   name="memset"
   summary="Set memory to a given value"
   synopsis="#include &lt;string.h&gt;\n void* memset( void* dst, int c, size_t length );\n"
/>
<function
   name="message_attach"
   summary="Attach a message range"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int message_attach( dispatch_t * dpp, message_attr_t * attr, int low, int high, int (* func) ( message_context_t * ctp, int code, unsigned flags, void * handle ), void * handle );\n"
/>
<function
   name="message_connect"
   summary="Create a connection to a channel"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int message_connect( dispatch_t * dpp, int flags );\n"
/>
<function
   name="message_detach"
   summary="Detach a message range"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int message_detach( dispatch_t * dpp, int low, int high, int flags );\n"
/>
<function
   name="min"
   summary="Return the lesser of two numbers"
   synopsis="#include &lt;stdlib.h&gt;\n #define min(a,b) &#8230;"
/>
<function
   name="mkdir"
   summary="Create a subdirectory"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/stat.h&gt;\n int mkdir( const char *path, mode_t mode );\n"
/>
<function
   name="mkfifo"
   summary="Create a FIFO special file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/stat.h&gt;\n int mkfifo( const char* path, mode_t mode );\n"
/>
<function
   name="mknod"
   summary="Make a new filesystem entry point"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n #include &lt;sys/stat.h&gt;\n int mknod( const char * path, mode_t mode, dev_t dev );\n"
/>
<function
   name="mkstemp"
   summary="Make a unique temporary filename, and open the file"
   synopsis="#include &lt;stdlib.h&gt;\n int mkstemp( char* template );\n"
/>
<function
   name="mktemp"
   summary="Make a unique temporary filename"
   synopsis="#include &lt;stdlib.h&gt;\n char* mktemp( char* template );\n"
/>
<function
   name="mktime"
   summary="Convert local time to calendar time"
   synopsis="#include &lt;time.h&gt;\n time_t mktime( struct tm* timeptr );\n"
/>
<function
   name="mlock"
   summary="Lock a range of process address space in physical memory"
   synopsis="#include &lt;sys/mman.h&gt;\n int mlock(const void * addr, size_t len);\n"
/>
<function
   name="mlockall"
   summary="Lock all of a process's address space"
   synopsis="#include &lt;sys/mman.h&gt;\n int mlockall(int flags);\n"
/>
<function
   name="mmap, mmap64"
   summary="Map a memory region into a process's address space"
   synopsis="#include &lt;sys/mman.h&gt;\n void * mmap( void * addr, size_t len, int prot, int flags, int fildes, off_t off );\n void * mmap64( void * addr, size_t len, int prot, int flags, int fildes, off64_t off );\n"
/>
<function
   name="mmap_device_io"
   summary="Gain access to a device's registers"
   synopsis="#include &lt;stdint.h&gt;\n #include &lt;sys/mman.h&gt;\n uintptr_t mmap_device_io( size_t len, uint64_t io );\n"
/>
<function
   name="mmap_device_memory"
   summary="Map a device's physical memory into a process's address space"
   synopsis="#include &lt;sys/mman.h&gt;\n void * mmap_device_memory( void * addr, size_t len, int prot, int flags, uint64_t physical );\n"
/>
<function
   name="modem_open"
   summary="Open a serial port"
   synopsis="#include &lt;sys/modem.h&gt;\n int modem_open( char* device, speed_t baud );\n"
/>
<function
   name="modem_read"
   summary="Read bytes from a file descriptor"
   synopsis="#include &lt;sys/modem.h&gt;\n int modem_read( int fd, char* buf, int bufsize, int quiet, int timeout, int flags, int (*cancel)(void) );\n"
/>
<function
   name="modem_script"
   summary="Run a script on a device"
   synopsis="#include &lt;sys/modem.h&gt;\n int modem_script( int fd, struct modem_script* table, speed_t* baud, void (*io)( char* progress, char* in, char* out ), int (*cancel)(void) );\n"
/>
<function
   name="modem_write"
   summary="Write a string to a device"
   synopsis="#include &lt;sys/modem.h&gt;\n int modem_write( int fd, char* str );\n"
/>
<function
   name="modf, modff"
   summary="Break a number into integral and fractional parts"
   synopsis="#include &lt;math.h&gt;\n double modf( double value, double* iptr );\n float modff( float value, float* iptr );\n"
/>
<function
   name="mount"
   summary="Mount a filesystem"
   synopsis="#include &lt;sys/mount.h&gt;\n int mount( const char* spec, const char* dir, int flags, const char* type, const void* data, int datalen );\n"
/>
<function
   name="mount_parse_generic_args"
   summary="Strip off common mount arguments"
   synopsis="#include &lt;sys/mount.h&gt;\n char * mount_parse_generic_args( char * options, int * flags );\n"
/>
<function
   name="mprobe"
   summary="Perform consistency check on memory"
   synopsis="#include &lt;malloc.h&gt;\n enum mcheck_status mprobe(void * ptr);\n"
/>
<function
   name="mprotect"
   summary="Change memory protection"
   synopsis="#include &lt;sys/mman.h&gt;\n int mprotect( void * addr, size_t len, int prot );\n"
/>
<function
   name="mq_close"
   summary="Close a message queue"
   synopsis="#include &lt;mqueue.h&gt;\n int mq_close( mqd_t mqdes );\n"
/>
<function
   name="mq_getattr"
   summary="Get a message queue's attributes"
   synopsis="#include &lt;mqueue.h&gt;\n int mq_getattr( mqd_t mqdes, struct mq_attr* mqstat );\n"
/>
<function
   name="mq_notify"
   summary="Ask to be notified when there's a message in the queue"
   synopsis="#include &lt;mqueue.h&gt;\n int mq_notify( mqd_t mqdes, const struct sigevent* notification );\n"
/>
<function
   name="mq_open"
   summary="Open a message queue"
   synopsis="#include &lt;mqueue.h&gt;\n #include &lt;fcntl.h&gt;\n mqd_t mq_open( const char * name, int oflag, ... )"
/>
<function
   name="mq_receive"
   summary="Receive a message from a queue"
   synopsis="#include &lt;mqueue.h&gt;\n ssize_t mq_receive( mqd_t mqdes, char* msg_ptr, size_t msg_len, unsigned int* msg_prio );\n"
/>
<function
   name="mq_send"
   summary="Send a message to a queue"
   synopsis="#include &lt;mqueue.h&gt;\n int mq_send( mqd_t mqdes, const char * msg_ptr, size_t msg_len, unsigned int msg_prio );\n"
/>
<function
   name="mq_setattr"
   summary="Set a queue's attributes"
   synopsis="#include &lt;mqueue.h&gt;\n int mq_setattr( mqd_t mqdes, const struct mq_attr* mqstat, struct mq_attr* omqstat );\n"
/>
<function
   name="mq_timedreceive, mq_timedreceive_monotonic"
   summary="Receive a message from a message queue"
   synopsis="#include &lt;mqueue.h&gt;\n #include &lt;time.h&gt;\n ssize_t mq_timedreceive( mqd_t mqdes, char * msg_ptr, size_t msg_len, unsigned int * msg_prio, const struct timespec * abs_timeout );\n ssize_t mq_timedreceive_monotonic( mqd_t mqdes, char * msg_ptr, size_t msg_len, unsigned int * msg_prio, const struct timespec * abs_timeout );\n"
/>
<function
   name="mq_timedsend, mq_timedsend_monotonic"
   summary="Send a message to a message queue"
   synopsis="#include &lt;mqueue.h&gt;\n #include &lt;time.h&gt;\n int mq_timedsend( mqd_t mqdes, const char * msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec * abs_timeout );\n int mq_timedsend_monotonic( mqd_t mqdes, const char * msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec * abs_timeout );\n"
/>
<function
   name="mq_unlink"
   summary="Remove a queue"
   synopsis="#include &lt;mqueue.h&gt;\n int mq_unlink( const char* name );\n"
/>
<function
   name="mrand48"
   summary="Generate a pseudo-random signed long integer"
   synopsis="#include &lt;stdlib.h&gt;\n long mrand48( void );\n"
/>
<function
   name="MsgCurrent, MsgCurrent_r"
   summary="Resume processing of a message"
   synopsis="int MsgCurrent( int rcvid );\n int MsgCurrent_r( int rcvid );\n"
/>
<function
   name="MsgDeliverEvent, MsgDeliverEvent_r"
   summary="Deliver an event through a channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgDeliverEvent( int rcvid, const struct sigevent* event );\n int MsgDeliverEvent_r( int rcvid, const struct sigevent* event );\n"
/>
<function
   name="MsgError, MsgError_r"
   summary="Unblock a client and set its errno"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgError( int rcvid, int error );\n int MsgError_r( int rcvid, int error );\n"
/>
<function
   name="MsgInfo, MsgInfo_r"
   summary="Get additional information about a message"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgInfo( int rcvid, struct _msg_info* info );\n int MsgInfo_r( int rcvid, struct _msg_info* info );\n"
/>
<function
   name="MsgKeyData, MsgKeyData_r"
   summary="Pass data through a common client"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgKeyData( int rcvid, int op, uint32_t key, uint32_t * key2, const iov_t * msg, int parts );\n int MsgKeyData_r( int rcvid, int op, uint32_t key, uint32_t * key2, const iov_t * msg, int parts );\n"
/>
<function
   name="MsgRead, MsgRead_r"
   summary="Read data from a message"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgRead( int rcvid, void* msg, int bytes, int offset );\n int MsgRead_r( int rcvid, void* msg, int bytes, int offset );\n"
/>
<function
   name="MsgReadv, MsgReadv_r"
   summary="Read data from a message"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgReadv( int rcvid, const iov_t* riov, int rparts, int offset );\n int MsgReadv_r( int rcvid, const iov_t* riov, int rparts, int offset );\n"
/>
<function
   name="MsgReceive, MsgReceive_r"
   summary="Wait for a message or pulse on a channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgReceive( int chid, void * msg, int bytes, struct _msg_info * info );\n int MsgReceive_r( int chid, void * msg, int bytes, struct _msg_info * info );\n"
/>
<function
   name="MsgReceivePulse, MsgReceivePulse_r"
   summary="Receive a pulse on a channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgReceivePulse( int chid, void * pulse, int bytes, struct _msg_info * info );\n int MsgReceivePulse_r( int chid, void * pulse, int bytes, struct _msg_info * info );\n"
/>
<function
   name="MsgReceivePulsev, MsgReceivePulsev_r"
   summary="Receive a pulse on a channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgReceivePulsev( int chid, const iov_t * piov, int parts, struct _msg_info * info );\n int MsgReceivePulsev_r( int chid, const iov_t * piov, int parts, struct _msg_info * info );\n"
/>
<function
   name="MsgReceivev, MsgReceivev_r"
   summary="Wait for a message or pulse on a channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgReceivev( int chid, const iov_t * riov, int rparts, struct _msg_info * info );\n int MsgReceivev_r( int chid, const iov_t * riov, int rparts, struct _msg_info * info );\n"
/>
<function
   name="MsgReply, MsgReply_r"
   summary="Reply with a message"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgReply( int rcvid, int status, const void* msg, int size );\n int MsgReply_r( int rcvid, int status, const void* msg, int size );\n"
/>
<function
   name="MsgReplyv, MsgReplyv_r"
   summary="Reply with a message"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgReplyv( int rcvid, int status, const iov_t* riov, int rparts );\n int MsgReplyv_r( int rcvid, int status, const iov_t* riov, int rparts );\n"
/>
<function
   name="MsgSend, MsgSend_r"
   summary="Send a message to a channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgSend( int coid, const void* smsg, int sbytes, void* rmsg, int rbytes );\n int MsgSend_r( int coid, const void* smsg, int sbytes, void* rmsg, int rbytes );\n"
/>
<function
   name="MsgSendnc, MsgSendnc_r"
   summary="Send a message to a channel (non-cancellation point)"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgSendnc( int coid, const void* smsg, int sbytes, void* rmsg, int rbytes );\n int MsgSendnc_r( int coid, const void* smsg, int sbytes, void* rmsg, int rbytes );\n"
/>
<function
   name="MsgSendPulse, MsgSendPulse_r"
   summary="Send a pulse to a process"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgSendPulse ( int coid, int priority, int code, int value );\n int MsgSendPulse_r ( int coid, int priority, int code, int value );\n"
/>
<function
   name="MsgSendsv, MsgSendsv_r"
   summary="Send a message to a channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgSendsv( int coid, const void* smsg, int sbytes, const iov_t* riov, int rparts );\n int MsgSendsv_r( int coid, const void* smsg, int sbytes, const iov_t* riov, int rparts );\n"
/>
<function
   name="MsgSendsvnc, MsgSendsvnc_r"
   summary="Send a message to a channel (non-cancellation point)"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgSendsvnc( int coid, const void* smsg, int sbytes, const iov_t* riov, int rparts );\n int MsgSendsvnc_r( int coid, const void* smsg, int sbytes, const iov_t* riov, int rparts );\n"
/>
<function
   name="MsgSendv, MsgSendv_r"
   summary="Send a message to a channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgSendv( int coid, const iov_t* siov, int sparts, const iov_t* riov, int rparts );\n int MsgSendv_r( int coid, const iov_t* siov, int sparts, const iov_t* riov, int rparts );\n"
/>
<function
   name="MsgSendvnc, MsgSendvnc_r"
   summary="Send a message to a channel (non-cancellation point)"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgSendvnc( int coid, const iov_t* siov, int sparts, const iov_t* riov, int rparts );\n int MsgSendvnc_r( int coid, const iov_t* siov, int sparts, const iov_t* riov, int rparts );\n"
/>
<function
   name="MsgSendvs, MsgSendvs_r"
   summary="Send a message to a channel"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgSendvs( int coid, const iov_t* siov, int sparts, void* rmsg, int rbytes );\n int MsgSendvs_r( int coid, const iov_t* siov, int sparts, void* rmsg, int rbytes );\n"
/>
<function
   name="MsgSendvsnc, MsgSendvsnc_r"
   summary="Send a message to a channel (non-cancellation point)"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgSendvsnc( int coid, const iov_t* siov, int sparts, void* rmsg, int rbytes );\n int MsgSendvsnc_r( int coid, const iov_t* siov, int sparts, void* rmsg, int rbytes );\n"
/>
<function
   name="MsgVerifyEvent, MsgVerifyEvent_r"
   summary="Check the validity of a receive ID and an event configuration"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgVerifyEvent( int rcvid, const struct sigevent event );\n int MsgVerifyEvent_r( int rcvid, const struct sigevent event );\n"
/>
<function
   name="MsgWrite, MsgWrite_r"
   summary="Write a reply"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgWrite( int rcvid, const void* msg, int size, int offset );\n int MsgWrite_r( int rcvid, const void* msg, int size, int offset );\n"
/>
<function
   name="MsgWritev, MsgWritev_r"
   summary="Write a reply"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int MsgWritev( int rcvid, const iov_t* iov, int parts, int offset );\n int MsgWritev_r( int rcvid, const iov_t* iov, int parts, int offset );\n"
/>
<function
   name="msync"
   summary="Synchronize memory with physical storage"
   synopsis="#include &lt;sys/mman.h&gt;\n int msync( void * addr, size_t len, int flags );\n"
/>
<function
   name="munlock"
   summary="Unlock the range of process address space already allocated"
   synopsis="#include &lt;sys/mman.h&gt;\n int munlock(const void * addr, size_t len);\n"
/>
<function
   name="munlockall"
   summary="Unlock a process's address space"
   synopsis="#include &lt;sys/mman.h&gt;\n int munlockall( void );\n"
/>
<function
   name="munmap"
   summary="Unmap previously mapped addresses"
   synopsis="#include &lt;sys/mman.h&gt;\n int munmap( void * addr, size_t len );\n"
/>
<function
   name="munmap_device_io"
   summary="Free access to a device's registers"
   synopsis="#include &lt;sys/mman.h&gt;\n int munmap_device_io( uintptr_t io, size_t len );\n"
/>
<function
   name="munmap_device_memory"
   summary="Unmap previously mapped addresses"
   synopsis="#include &lt;sys/mman.h&gt;\n int munmap_device_memory( void * addr, size_t len );\n"
/>
<function
   name="munmap_flags"
   summary="Unmap previously mapped addresses, exercising more control than possible with munmap"
   synopsis="#include &lt;sys/mman.h&gt;\n int munmap_flags( void * addr, size_t len, unsigned flags );\n"
/>
<function
   name="name_attach"
   summary="Register a name in the namespace and create a channel"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n name_attach_t * name_attach( dispatch_t * dpp, const char * path, unsigned flags );\n"
/>
<function
   name="name_close"
   summary="Close a server connection that was opened by name_open"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int name_close( int coid );\n"
/>
<function
   name="name_detach"
   summary="Remove a name from the namespace and destroy the channel"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int name_detach( name_attach_t * attach, unsigned flags );\n"
/>
<function
   name="name_open"
   summary="Open a name for a server connection"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int name_open( const char * name, int flags );\n"
/>
<function
   name="nanosleep"
   summary="Suspend a thread until a timeout or signal occurs"
   synopsis="#include &lt;time.h&gt;\n int nanosleep( const struct timespec* rqtp, struct timespec* rmtp );\n"
/>
<function
   name="nanospin"
   summary="Busy-wait without thread blocking for a period of time"
   synopsis="#include &lt;time.h&gt;\n int nanospin( const struct timespec *when );\n"
/>
<function
   name="nanospin_calibrate"
   summary="Calibrate before calling nanospin*"
   synopsis="#include &lt;time.h&gt;\n int nanospin_calibrate( int disable );\n"
/>
<function
   name="nanospin_count"
   summary="Busy-wait without blocking for a number of iterations"
   synopsis="#include &lt;time.h&gt;\n void nanospin_count( unsigned long count );\n"
/>
<function
   name="nanospin_ns"
   summary="Busy-wait without blocking for a period of time"
   synopsis="#include &lt;time.h&gt;\n int nanospin_ns( unsigned long nsec );\n"
/>
<function
   name="nanospin_ns_to_count"
   summary="Convert a time in nanoseconds into a number of iterations"
   synopsis="#include &lt;time.h&gt;\n unsigned long nanospin_ns_to_count( unsigned long nsec );\n"
/>
<function
   name="nap"
   summary="Sleep for a given number of milliseconds"
   synopsis="#include &lt;unix.h&gt;\n unsigned int nap( unsigned int ms);\n"
/>
<function
   name="napms"
   summary="Sleep for a given number of milliseconds"
   synopsis="#include &lt;curses.h&gt;\n int napms( int ms);\n"
/>
<function
   name="nbaconnect"
   summary="Initiate a connection on a socket (nonblocking)"
   synopsis="#include &lt;sys/socket.h&gt;\n int nbaconnect( int s, const struct sockaddr * name, size_t namelen );\n"
/>
<function
   name="nbaconnect_result"
   summary="Get the status of the previous call to nbaconnect"
   synopsis="#include &lt;sys/socket.h&gt;\n int nbaconnect_result( int fd, int * error );\n"
/>
<function
   name="ND_NODE_CMP"
   summary="Compare two node descriptors"
   synopsis="#include &lt;sys/netmgr.h&gt;\n #define ND_NODE_CMP(a,b) &#8230;"
/>
<function
   name="netmgr_ndtostr"
   summary="Convert a node descriptor into a string"
   synopsis="#include &lt;sys/netmgr.h&gt;\n int netmgr_ndtostr( unsigned flags, int nd, char * buf, size_t maxbuf );\n"
/>
<function
   name="netmgr_remote_nd"
   summary="Get a node descriptor that's relative to a remote node"
   synopsis="#include &lt;sys/netmgr.h&gt;\n int netmgr_remote_nd( int remote_nd, int local_nd );\n"
/>
<function
   name="netmgr_strtond"
   summary="Convert a string into a node descriptor"
   synopsis="#include &lt;sys/netmgr.h&gt;\n int netmgr_strtond( const char * nodename, char ** endstr );\n"
/>
<function
   name="nextafter, nextafterf"
   summary="Compute the next representable double-precision floating-point number"
   synopsis="#include &lt;math.h&gt;\n double nextafter ( double x, double y);\n float nextafterf ( float x, float y );\n"
/>
<function
   name="nftw, nftw64"
   summary="Walk a file tree"
   synopsis="#include &lt;ftw.h&gt;\n int nftw( const char *path, int (*fn)( const char *fname, const struct stat *sbuf, int flags, struct FTW *ftw), int depth, int flags);\n"
/>
<function
   name="nice"
   summary="Change the priority of a process"
   synopsis="#include &lt;unistd.h&gt;\n int nice( int incr );\n"
/>
<function
   name="nrand48"
   summary="Generate a pseudo-random nonnegative long integer in a thread-safe manner"
   synopsis="#include &lt;stdlib.h&gt;\n long nrand48( unsigned short xsubi[3] );\n"
/>
<function
   name="nsec2timespec"
   summary="Convert nanoseconds to a timespec structure"
   synopsis="#include &lt;time.h&gt;\n void nsec2timespec( struct timespec *timespec_p, uint64_t nsec );\n"
/>
<function
   name="ntohl"
   summary="Convert a 32-bit value from network-byte order to host-byte order"
   synopsis="#include &lt;arpa/inet.h&gt;\n uint32_t ntohl( uint32_t netlong );\n"
/>
<function
   name="ntohs"
   summary="Convert a 16-bit value from network-byte order to host-byte order"
   synopsis="#include &lt;arpa/inet.h&gt;\n uint16_t ntohs( uint16_t netshort );\n"
/>
<function
   name="offsetof"
   summary="Return the offset of an element within a structure"
   synopsis="#include &lt;stddef.h&gt;\n #define offsetof( composite, name ) &#8230;"
/>
<function
   name="open, open64"
   summary="Open a file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/stat.h&gt;\n #include &lt;fcntl.h&gt;\n int open( const char * path, int oflag, ... );\n int open64( const char * path, int oflag, ... );\n"
/>
<function
   name="opendir"
   summary="Open a directory"
   synopsis="#include &lt;dirent.h&gt;\n DIR * opendir( const char * dirname );\n"
/>
<function
   name="openfd"
   summary="Open for private access a file associated with a given descriptor"
   synopsis="#include &lt;unistd.h&gt;\n int openfd( int fd, int oflag );\n"
/>
<function
   name="openlog"
   summary="Open the system log"
   synopsis="#include &lt;syslog.h&gt;\n void openlog( const char * ident, int logopt, int facility );\n"
/>
<function
   name="openpty"
   summary="Find an available pseudo-tty"
   synopsis="#include &lt;unix.h&gt;\n int openpty( int* amaster, int* aslave, char* name, struct termios* termp, struct winsize* winp );\n"
/>
<function
   name="out8"
   summary="Write an 8-bit value to a port"
   synopsis="#include &lt;hw/inout.h&gt;\n void out8( uintptr_t port, uint8_t val );\n"
/>
<function
   name="out8s"
   summary="Write 8-bit values to a port"
   synopsis="#include &lt;hw/inout.h&gt;\n void * out8s( const void * buff, unsigned len, uintptr_t port );\n"
/>
<function
   name="out16, outbe16, outle16"
   summary="Write a 16-bit value to a port"
   synopsis="#include &lt;hw/inout.h&gt;\n void out16( uintptr_t port, uint16_t val );\n #define outbe16( port, val ) ... #define outle16( port, val ) ..."
/>
<function
   name="out16s"
   summary="Write words to a port"
   synopsis="#include &lt;hw/inout.h&gt;\n void * out16s( const void * buff, unsigned len, uintptr_t port );\n"
/>
<function
   name="out32, outbe32, outle32"
   summary="Write a 32-bit value to a port"
   synopsis="#include &lt;hw/inout.h&gt;\n void out32( uintptr_t port, uint32_t val );\n #define outbe16( port, val ) ... #define outle32( port, val ) ..."
/>
<function
   name="out32s"
   summary="Write longs to a port"
   synopsis="#include &lt;hw/inout.h&gt;\n void * out32s( const void * buff, unsigned len, uintptr_t port );\n"
/>
<function
   name="pathconf"
   summary="Return the value of a configurable limit"
   synopsis="#include &lt;unistd.h&gt;\n long pathconf( const char* path, int name );\n"
/>
<function
   name="pathfind, pathfind_r"
   summary="Search for a file in a list of directories"
   synopsis="#include &lt;libgen.h&gt;\n char *pathfind( const char *path, const char *name, const char *mode );\n char *pathfind_r( const char *path, const char *name, const char *mode, char *buff, size_t buff_size );\n"
/>
<function
   name="pathmgr_symlink"
   summary="Create a symlink"
   synopsis="#include &lt;sys/pathmgr.h&gt;\n int pathmgr_symlink( const char * path, const char * symlink );\n"
/>
<function
   name="pathmgr_unlink"
   summary="Remove a link"
   synopsis="#include &lt;sys/pathmgr.h&gt;\n int pathmgr_unlink( const char * path );\n"
/>
<function
   name="pause"
   summary="Suspend the calling thread until delivery of a signal"
   synopsis="#include &lt;unistd.h&gt;\n int pause( void );\n"
/>
<function
   name="pccard_arm"
   summary="Arm the devp-pccard server"
   synopsis="#include &lt;sys/pccard.h&gt;\n int pccard_arm( pccard_t handle, int devtype, unsigned event, int coid );\n"
/>
<function
   name="pccard_attach"
   summary="Attach to the devp-pccard server"
   synopsis="#include &lt;sys/pccard.h&gt;\n pccard_t pccard_attach( int reserved );\n"
/>
<function
   name="pccard_detach"
   summary="Detach from the devp-pccard server"
   synopsis="#include &lt;sys/pccard.h&gt;\n int pccard_detach( pccard_t handle );\n"
/>
<function
   name="pccard_info"
   summary="Obtain socket information from the devp-pccard server"
   synopsis="#include &lt;sys/pccard.h&gt;\n int pccard_info( pccard_t handle, int socket, struct _pccard_info* info, unsigned size );\n"
/>
<function
   name="pccard_lock"
   summary="Lock the window of the card in the selected socket"
   synopsis="#include &lt;sys/pccard.h&gt;\n int pccard_lock( pccard_t handle, int socket, int index, int oflag );\n"
/>
<function
   name="pccard_raw_read"
   summary="Read the raw CIS data from the PC Card"
   synopsis="#include &lt;sys/pccard.h&gt;\n ssize_t pccard_raw_read( pccard_t handle, int socket, int type, unsigned addr, ssize_t len, void* buf );\n"
/>
<function
   name="pccard_unlock"
   summary="Unlock the window of the card in the selected socket"
   synopsis="#include &lt;sys/pccard.h&gt;\n int pccard_unlock( pccard_t handle, int socket, int index );\n"
/>
<function
   name="pci_attach"
   summary="Connect to the PCI server"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_attach( unsigned flags );\n"
/>
<function
   name="pci_attach_device"
   summary="Attach a driver to a PCI device"
   synopsis="#include &lt;hw/pci.h&gt;\n void* pci_attach_device( void* handle, uint32_t flags, uint16_t idx, struct pci_dev_info* info );\n"
/>
<function
   name="pci_detach"
   summary="Disconnect from the PCI server"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_detach( unsigned handle );\n"
/>
<function
   name="pci_detach_device"
   summary="Detach a driver from a PCI device"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_detach_device( void* handle );\n"
/>
<function
   name="pci_find_class"
   summary="Find devices that have a specific class code"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_find_class( unsigned long class_code, unsigned index, unsigned* bus, unsigned* dev_func );\n"
/>
<function
   name="pci_find_device"
   summary="Find the PCI device with a given device ID and vendor ID"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_find_device( unsigned device, unsigned vendor, unsigned index, unsigned* bus, unsigned* dev_func );\n"
/>
<function
   name="pci_irq_routing_options"
   summary="Retrieve PCI IRQ routing information"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_irq_routing_options( IRQRoutingOptionsBuffer * buf, uint32_t * irq );\n"
/>
<function
   name="pci_map_irq"
   summary="Map an interrupt pin to an IRQ"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_map_irq( unsigned bus, unsigned dev_func, short intno, short intpin );\n"
/>
<function
   name="pci_present"
   summary="Determine whether or not PCI BIOS is present"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_present( unsigned* lastbus, unsigned* version, unsigned* hardware );\n"
/>
<function
   name="pci_read_config"
   summary="Read from the configuration space of a PCI device"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_read_config( void* handle, unsigned offset, unsigned count, size_t size, void* buff );\n"
/>
<function
   name="pci_read_config8"
   summary="Read a byte from the configuration space of a device"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_read_config8( unsigned bus, unsigned dev_func, unsigned offset, unsigned count, char* buff );\n"
/>
<function
   name="pci_read_config16"
   summary="Read 16-bit values from the configuration space of a device"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_read_config16( unsigned bus, unsigned dev_func, unsigned offset, unsigned count, char* buff );\n"
/>
<function
   name="pci_read_config32"
   summary="Read 32-bit values from the configuration space of a device"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_read_config32( unsigned bus, unsigned dev_func, unsigned offset, unsigned count, char* buff );\n"
/>
<function
   name="pci_rescan_bus"
   summary="Rescan the PCI bus for added or removed devices"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_rescan_bus( void );\n"
/>
<function
   name="pci_write_config"
   summary="Write to the configuration space of a PCI device"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_write_config( void* handle, unsigned offset, unsigned count, size_t size, const void* buff );\n"
/>
<function
   name="pci_write_config8"
   summary="Write bytes to the configuration space of a PCI device"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_write_config8( unsigned bus, unsigned dev_func, unsigned offset, unsigned count, char* buff );\n"
/>
<function
   name="pci_write_config16"
   summary="Write 16-bit values to the configuration space of a device"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_write_config16( unsigned bus, unsigned dev_func, unsigned offset, unsigned count, char* buff );\n"
/>
<function
   name="pci_write_config32"
   summary="Write 32-bit values to the configuration space of a device"
   synopsis="#include &lt;hw/pci.h&gt;\n int pci_write_config32( unsigned bus, unsigned dev_func, unsigned offset, unsigned count, char* buff );\n"
/>
<function
   name="pclose"
   summary="Close a pipe"
   synopsis="#include &lt;stdio.h&gt;\n int pclose( FILE* stream );\n"
/>
<function
   name="perror"
   summary="Print an error message associated with errno"
   synopsis="#include &lt;stdio.h&gt;\n void perror( const char *prefix );\n"
/>
<function
   name="pipe"
   summary="Create a pipe"
   synopsis="#include &lt;unistd.h&gt;\n int pipe( int fildes[2] );\n"
/>
<function
   name="poll"
   summary="Multiplex input/output over a set of file descriptors"
   synopsis="#include &lt;sys/poll.h&gt;\n int poll( struct pollfd fds*, nfds_t nfds, int timeout );\n"
/>
<function
   name="popen"
   summary="Execute a command, creating a pipe to it"
   synopsis="#include &lt;stdio.h&gt;\n FILE* popen( const char* command, const char* mode );\n"
/>
<function
   name="posix_mem_offset, posix_mem_offset64"
   summary="Get the offset and length of a mapped typed memory block"
   synopsis="#include &lt;sys/mman.h&gt;\n int posix_mem_offset(const void *restrict addr, size_t len, off_t *restrict off, size_t *restrict contig_len, int *restrict fildes);\n int posix_mem_offset64(const void *restrict addr, size_t len, off64_t *restrict off, size_t *restrict contig_len, int *restrict fildes);\n"
/>
<function
   name="posix_memalign"
   summary="Allocate aligned memory"
   synopsis="#include &lt;stdlib.h&gt;\n int posix_memalign( void ** memptr, size_t alignment, size_t size );\n"
/>
<function
   name="posix_spawn, posix_spawnp"
   summary="Spawn a process"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawn( pid_t *_Restrict pid, const char *_Restrict path, const posix_spawn_file_actions_t * file_actions, const posix_spawnattr_t *_Restrict attrp, char * const argv[_Restrict_arr], char * const envp[_Restrict_arr] );\n int posix_spawnp( pid_t *_Restrict pid, const char *_Restrict file, const posix_spawn_file_actions_t * file_actions, const posix_spawnattr_t *_Restrict attrp, char * const argv[_Restrict_arr], char * const envp[_Restrict_arr] );\n"
/>
<function
   name="posix_spawn_file_actions_addclose"
   summary="Add a close a file descriptor action to a spawn file actions object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawn_file_actions_addclose( posix_spawn_file_actions_t *fact_p, int fd);\n"
/>
<function
   name="posix_spawn_file_actions_adddup2"
   summary="Add a duplicate a file descriptor action to a spawn file actions object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawn_file_actions_adddup2( posix_spawn_file_actions_t *fact_p, int fd, int new_fd);\n"
/>
<function
   name="posix_spawn_file_actions_addopen"
   summary="Add an open a file action to a spawn file action object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawn_file_actions_addopen( posix_spawn_file_actions_t *_Restrict fact_p, int new_fd, const char *_Restrict path, int oflags, mode_t omode);\n"
/>
<function
   name="posix_spawn_file_actions_destroy"
   summary="Destroy a spawn file actions object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawn_file_actions_destroy( posix_spawn_file_actions_t *fact_p);\n"
/>
<function
   name="posix_spawn_file_actions_init"
   summary="Initialize a spawn file actions object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawn_file_actions_init( posix_spawn_file_actions_t *fact_p);\n"
/>
<function
   name="posix_spawnattr_addpartid"
   summary="Specify the ID of a resource partition that the spawned process should be associated with"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_addpartid( posix_spawnattr_t *_Restrict attrp, part_id_t part_id, part_dcmd_flags_t part_flags);\n"
/>
<function
   name="posix_spawnattr_addpartition"
   summary="Specify the name of a resource partition that the spawned process should be associated with"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_addpartition( posix_spawnattr_t *_Restrict attrp, const char *partition_path, part_dcmd_flags_t part_flags);\n"
/>
<function
   name="posix_spawnattr_destroy"
   summary="Destroy a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_destroy( posix_spawnattr_t *attrp);\n"
/>
<function
   name="posix_spawnattr_getcred"
   summary="Get the user and group ID attributes from a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getcred( const posix_spawnattr_t *_Restrict attrp, uid_t *_Restrict uid_p, gid_t *_Restrict gid_p);\n"
/>
<function
   name="posix_spawnattr_getflags"
   summary="Get the POSIX flags from a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getflags( const posix_spawnattr_t *_Restrict attrp, short *_Restrict flags_p);\n"
/>
<function
   name="posix_spawnattr_getnode"
   summary="Get the remote node attribute from a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getnode( const posix_spawnattr_t *_Restrict attrp, uint32_t *_Restrict node_p);\n"
/>
<function
   name="posix_spawnattr_getpartid"
   summary="Retrieve the partition identifiers currently set in a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getpartid( const posix_spawnattr_t *_Restrict attrp, int *num, partlist_info_t plist_info[]);\n"
/>
<function
   name="posix_spawnattr_getpgroup"
   summary="Get the process group attribute of a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getpgroup( const posix_spawnattr_t *_Restrict attrp, pid_t *_Restrict pid_p);\n"
/>
<function
   name="posix_spawnattr_getrunmask"
   summary="Get the runmask attribute from a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getrunmask( const posix_spawnattr_t *_Restrict attrp, uint32_t *_Restrict runmask_p);\n"
/>
<function
   name="posix_spawnattr_getschedparam"
   summary="Get the scheduling parameters attribute of a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getschedparam( const posix_spawnattr_t *_Restrict attrp, struct sched_param *_Restrict sched_p);\n"
/>
<function
   name="posix_spawnattr_getschedpolicy"
   summary="Get the scheduling policy attribute of a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getschedpolicy( const posix_spawnattr_t *_Restrict attrp, int *_Restrict policy_p);\n"
/>
<function
   name="posix_spawnattr_getsigdefault"
   summary="Get the default signals attribute of a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getsigdefault( const posix_spawnattr_t *_Restrict attrp, sigset_t *_Restrict sigset_p);\n"
/>
<function
   name="posix_spawnattr_getsigignore"
   summary="Get the ignored signals attribute from a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getsigignore( const posix_spawnattr_t *_Restrict attrp, sigset_t *_Restrict sigset_p);\n"
/>
<function
   name="posix_spawnattr_getsigmask"
   summary="Get the signal mask attribute of a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getsigmask( const posix_spawnattr_t *_Restrict attrp, sigset_t *_Restrict sigset_p);\n"
/>
<function
   name="posix_spawnattr_getstackmax"
   summary="Get the maximum stack size attribute from a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getstackmax( const posix_spawnattr_t *_Restrict attrp, uint32_t *_Restrict size_p);\n"
/>
<function
   name="posix_spawnattr_getxflags"
   summary="Get the POSIX flags and the QNX Neutrino extended flags from a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_getxflags( const posix_spawnattr_t *_Restrict attrp, uint32_t *_Restrict flags_p);\n"
/>
<function
   name="posix_spawnattr_init"
   summary="Initialize a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_init( posix_spawnattr_t *attrp );\n"
/>
<function
   name="posix_spawnattr_setcred"
   summary="Set the user and group ID attributes in a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setcred( posix_spawnattr_t *attrp, uid_t uid, gid_t gid);\n"
/>
<function
   name="posix_spawnattr_setflags"
   summary="Set the POSIX flags in a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setflags( posix_spawnattr_t *attrp, short flags);\n"
/>
<function
   name="posix_spawnattr_setnode"
   summary="Set the remote node attribute in a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setnode( posix_spawnattr_t *attrp, uint32_t node);\n"
/>
<function
   name="posix_spawnattr_setpgroup"
   summary="Set the process group attribute in a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setpgroup( posix_spawnattr_t *attrp, pid_t pid);\n"
/>
<function
   name="posix_spawnattr_setrunmask"
   summary="Set the runmask attribute in a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setrunmask( posix_spawnattr_t *attrp, uint32_t runmask);\n"
/>
<function
   name="posix_spawnattr_setschedparam"
   summary="Set the scheduling parameters attribute of a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setschedparam( posix_spawnattr_t *_Restrict attrp, const struct sched_param *_Restrict sched_p);\n"
/>
<function
   name="posix_spawnattr_setschedpolicy"
   summary="Set the scheduling policy attribute of a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setschedpolicy( posix_spawnattr_t *attrp, int policy);\n"
/>
<function
   name="posix_spawnattr_setsigdefault"
   summary="Set the default signals attribute of a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setsigdefault( posix_spawnattr_t *_Restrict attrp, const sigset_t *_Restrict sigset_p);\n"
/>
<function
   name="posix_spawnattr_setsigignore"
   summary="Set the ignored signals attribute of a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setsigignore( posix_spawnattr_t *_Restrict attrp, const sigset_t *_Restrict sigset_p );\n"
/>
<function
   name="posix_spawnattr_setsigmask"
   summary="Set the signal mask attribute of a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setsigmask( posix_spawnattr_t *_Restrict attrp, const sigset_t *_Restrict sigset_p);\n"
/>
<function
   name="posix_spawnattr_setstackmax"
   summary="Set the maximum stack size attribute in a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setstackmax( posix_spawnattr_t *attrp, uint32_t size );\n"
/>
<function
   name="posix_spawnattr_setxflags"
   summary="Set the POSIX flags and the QNX Neutrino extended flags in a spawn attributes object"
   synopsis="#include &lt;spawn.h&gt;\n int posix_spawnattr_setxflags( posix_spawnattr_t *attrp, uint32_t flags);\n"
/>
<function
   name="posix_typed_mem_get_info"
   summary="Get information about a typed memory object"
   synopsis="#include &lt;sys/mman.h&gt;\n int posix_typed_mem_get_info( int fildes, struct posix_typed_mem_info *info);\n"
/>
<function
   name="posix_typed_mem_open"
   summary="Open a typed memory object"
   synopsis="#include &lt;sys/mman.h&gt;\n #include &lt;fcntl.h&gt;\n int posix_typed_mem_open( const char * name, int oflag, int tflag);\n"
/>
<function
   name="pow, powf, powl"
   summary="Raise a number to a given power"
   synopsis="#include &lt;math.h&gt;\n double pow( double x, double y );\n float powf( float x, float y );\n long double powl( long double x, long double y );\n"
/>
<function
   name="pread, pread64"
   summary="Read from a file without moving the file pointer"
   synopsis="#include &lt;unistd.h&gt;\n ssize_t pread(int filedes, void *buff, size_t nbytes, off_t offset );\n ssize_t pread64( int filedes, void *buff, size_t nbytes, off64_t offset );\n"
/>
<function
   name="printf"
   summary="Write formatted output to stdout"
   synopsis="#include &lt;stdio.h&gt;\n int printf( const char * format, ... );\n"
/>
<function
   name="procmgr_daemon"
   summary="Run a process in the background"
   synopsis="#include &lt;sys/procmgr.h&gt;\n int procmgr_daemon( int status, unsigned flags );\n"
/>
<function
   name="procmgr_event_notify"
   summary="Ask to be notified of system-wide events"
   synopsis="#include &lt;sys/procmgr.h&gt;\n int procmgr_event_notify ( unsigned flags, const struct sigevent * event );\n"
/>
<function
   name="procmgr_event_notify_add"
   summary="Add a request to be notified of system-wide events"
   synopsis="#include &lt;sys/procmgr.h&gt;\n int procmgr_event_notify_add ( unsigned flags, const struct sigevent * event );\n"
/>
<function
   name="procmgr_event_notify_delete"
   summary="Delete a request to be notified of system-wide events"
   synopsis="#include &lt;sys/procmgr.h&gt;\n int procmgr_event_notify_delete ( const int handle );\n"
/>
<function
   name="procmgr_event_trigger"
   summary="Trigger a system-wide event"
   synopsis="#include &lt;sys/procmgr.h&gt;\n int procmgr_event_trigger( unsigned flags );\n"
/>
<function
   name="procmgr_guardian"
   summary="Let a daemon process take over as a parent"
   synopsis="#include &lt;sys/procmgr.h&gt;\n pid_t procmgr_guardian( pid_t pid );\n"
/>
<function
   name="procmgr_session"
   summary="Provide process manager session support"
   synopsis="#include &lt;sys/procmgr.h&gt;\n int procmgr_session( uint32_t nd, pid_t sid, int id, unsigned event);\n"
/>
<function
   name="pthread_abort"
   summary="Unconditionally terminate the target thread"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_abort( pthread_t thread );\n"
/>
<function
   name="pthread_atfork"
   summary="Register fork handlers"
   synopsis="#include &lt;process.h&gt;\n int pthread_atfork( void (*prepare)(void), void (*parent)(void), void (*child)(void) );\n"
/>
<function
   name="pthread_attr_destroy"
   summary="Destroy a thread-attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_destroy( pthread_attr_t * attr );\n"
/>
<function
   name="pthread_attr_getdetachstate"
   summary="Get thread detach state attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_getdetachstate( const pthread_attr_t* attr, int* detachstate );\n"
/>
<function
   name="pthread_attr_getguardsize"
   summary="Get the size of the thread's guard area"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_getguardsize( const pthread_attr_t* attr, size_t* guardsize );\n"
/>
<function
   name="pthread_attr_getinheritsched"
   summary="Get a thread's inherit-scheduling attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_getinheritsched( const pthread_attr_t* attr, int* inheritsched );\n"
/>
<function
   name="pthread_attr_getschedparam"
   summary="Get thread scheduling parameters attribute"
   synopsis="#include &lt;pthread.h&gt;\n #include &lt;sched.h&gt;\n int pthread_attr_getschedparam( const pthread_attr_t * attr, struct sched_param * param );\n"
/>
<function
   name="pthread_attr_getschedpolicy"
   summary="Get thread scheduling policy attribute"
   synopsis="#include &lt;pthread.h&gt;\n #include &lt;sched.h&gt;\n int pthread_attr_getschedpolicy( const pthread_attr_t* attr, int* policy );\n"
/>
<function
   name="pthread_attr_getscope"
   summary="Get thread contention scope attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_getscope( const pthread_attr_t *attr, int *scope );\n"
/>
<function
   name="pthread_attr_getstackaddr"
   summary="Get thread stack address attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_getstackaddr( const pthread_attr_t* attr, void** stackaddr );\n"
/>
<function
   name="pthread_attr_getstacklazy"
   summary="Get the thread lazy-stack attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_getstacklazy( const pthread_attr_t * attr, int *lazystack );\n"
/>
<function
   name="pthread_attr_getstackprealloc"
   summary="Get the amount of memory to preallocate for a thread's MAP_LAZY stack"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_getstackprealloc( const pthread_attr_t * attr, size_t *stacksize);\n"
/>
<function
   name="pthread_attr_getstacksize"
   summary="Get the thread stack-size attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_getstacksize( const pthread_attr_t* attr, size_t* stacksize );\n"
/>
<function
   name="pthread_attr_init"
   summary="Initialize a thread-attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_init( pthread_attr_t *attr );\n"
/>
<function
   name="pthread_attr_setdetachstate"
   summary="Set thread detach state attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_setdetachstate( pthread_attr_t* attr, int detachstate );\n"
/>
<function
   name="pthread_attr_setguardsize"
   summary="Set the size of the thread's guard area"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_setguardsize( pthread_attr_t* attr, size_t guardsize );\n"
/>
<function
   name="pthread_attr_setinheritsched"
   summary="Set a thread's inherit-scheduling attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_setinheritsched( pthread_attr_t * attr, int inheritsched );\n"
/>
<function
   name="pthread_attr_setschedparam"
   summary="Set a thread's scheduling parameters attribute"
   synopsis="#include &lt;pthread.h&gt;\n #include &lt;sched.h&gt;\n int pthread_attr_setschedparam( pthread_attr_t * attr, const struct sched_param * param );\n"
/>
<function
   name="pthread_attr_setschedpolicy"
   summary="Set the thread scheduling policy attribute"
   synopsis="#include &lt;pthread.h&gt;\n #include &lt;sched.h&gt;\n int pthread_attr_setschedpolicy( pthread_attr_t* attr, int policy );\n"
/>
<function
   name="pthread_attr_setscope"
   summary="Set thread contention scope attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_setscope( pthread_attr_t* attr, int scope );\n"
/>
<function
   name="pthread_attr_setstackaddr"
   summary="Set the thread stack address attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_setstackaddr( pthread_attr_t * attr, void * stackaddr );\n"
/>
<function
   name="pthread_attr_setstacklazy"
   summary="Set the thread lazy-stack attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_setstacklazy( pthread_attr_t * attr, int lazystack );\n"
/>
<function
   name="pthread_attr_setstackprealloc"
   summary="Set the amount of memory to preallocate for a thread's MAP_LAZY stack"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_setstackprealloc( const pthread_attr_t * attr, size_t stacksize);\n"
/>
<function
   name="pthread_attr_setstacksize"
   summary="Set the thread stack-size attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_attr_setstacksize( pthread_attr_t * attr, size_t stacksize );\n"
/>
<function
   name="pthread_barrier_destroy"
   summary="Destroy a barrier object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_barrier_destroy( pthread_barrier_t * barrier );\n"
/>
<function
   name="pthread_barrier_init"
   summary="Initialize a barrier object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_barrier_init( pthread_barrier_t * barrier, const pthread_barrierattr_t * attr unsigned int count );\n"
/>
<function
   name="pthread_barrier_wait"
   summary="Synchronize participating threads at the barrier"
   synopsis="#include &lt;sync.h&gt;\n int pthread_barrier_wait( pthread_barrier_t * barrier );\n"
/>
<function
   name="pthread_barrierattr_destroy"
   summary="Destroy a barrier-attributes object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_barrierattr_destroy( pthread_barrierattr_t * attr );\n"
/>
<function
   name="pthread_barrierattr_getpshared"
   summary="Get the value of a barrier's process-shared attribute"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_barrierattr_getpshared( const pthread_barrierattr_t * attr int * pshared );\n"
/>
<function
   name="pthread_barrierattr_init"
   summary="Initialize a barrier attributes object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_barrierattr_init( pthread_barrierattr_t * attr );\n"
/>
<function
   name="pthread_barrierattr_setpshared"
   summary="Set the value of a barrier's process-shared attribute"
   synopsis="#include &lt;sync.h&gt;\n int pthread_barrierattr_setpshared( pthread_barrierattr_t * attr int pshared );\n"
/>
<function
   name="pthread_cancel"
   summary="Cancel a thread"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_cancel( pthread_t thread );\n"
/>
<function
   name="pthread_cleanup_pop"
   summary="Pop a function off of a thread's cancellation-cleanup stack"
   synopsis="#include &lt;pthread.h&gt;\n void pthread_cleanup_pop( int execute );\n"
/>
<function
   name="pthread_cleanup_push"
   summary="Push a function onto a thread's cancellation-cleanup stack"
   synopsis="#include &lt;pthread.h&gt;\n void pthread_cleanup_push( void (routine)(void*), void* arg );\n"
/>
<function
   name="pthread_cond_broadcast"
   summary="Unblock threads waiting on condition"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_cond_broadcast( pthread_cond_t* cond );\n"
/>
<function
   name="pthread_cond_destroy"
   summary="Destroy condition variable"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_cond_destroy( pthread_cond_t* cond );\n"
/>
<function
   name="pthread_cond_init"
   summary="Initialize a condition variable"
   synopsis="#include &lt;pthread.h&gt;\n pthread_cond_t cond = PTHREAD_COND_INITIALIZER; int pthread_cond_init( pthread_cond_t *cond, const pthread_condattr_t *attr );\n"
/>
<function
   name="pthread_cond_signal"
   summary="Unblock a thread that's waiting on a condition variable"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_cond_signal( pthread_cond_t* cond );\n"
/>
<function
   name="pthread_cond_timedwait"
   summary="Wait on a condition variable, with a time limit"
   synopsis="#include &lt;pthread.h&gt;\n #include &lt;time.h&gt;\n int pthread_cond_timedwait( pthread_cond_t* cond, pthread_mutex_t* mutex, const struct timespec* abstime );\n"
/>
<function
   name="pthread_cond_wait"
   summary="Wait on condition variable"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_cond_wait( pthread_cond_t* cond, pthread_mutex_t* mutex );\n"
/>
<function
   name="pthread_condattr_destroy"
   summary="Destroy a condition-variable attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_condattr_destroy( pthread_condattr_t* attr );\n"
/>
<function
   name="pthread_condattr_getclock"
   summary="Get the clock attribute from a condition-variable attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_condattr_getclock( const pthread_condattr_t * attr, clockid_t * id );\n"
/>
<function
   name="pthread_condattr_getpshared"
   summary="Get the process-shared attribute from a condition variable attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_condattr_getpshared( const pthread_condattr_t* attr, int* pshared );\n"
/>
<function
   name="pthread_condattr_init"
   summary="Initialize the attribute object for creating condition variables"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_condattr_init( pthread_condattr_t* attr );\n"
/>
<function
   name="pthread_condattr_setclock"
   summary="Set the clock attribute of a condition-variable attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_condattr_setclock( pthread_condattr_t * attr, clockid_t id );\n"
/>
<function
   name="pthread_condattr_setpshared"
   summary="Set the process-shared attribute in a condition variable attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_condattr_setpshared( pthread_condattr_t* attr, int pshared );\n"
/>
<function
   name="pthread_create"
   summary="Create a thread"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_create( pthread_t* thread, const pthread_attr_t* attr, void* (*start_routine)(void* ), void* arg );\n"
/>
<function
   name="pthread_detach"
   summary="Detach a thread from a process"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_detach( pthread_t thread );\n"
/>
<function
   name="pthread_equal"
   summary="Compare two thread IDs"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_equal( pthread_t t1, pthread_t t2 );\n"
/>
<function
   name="pthread_exit"
   summary="Terminate a thread"
   synopsis="#include &lt;pthread.h&gt;\n void pthread_exit( void* value_ptr );\n"
/>
<function
   name="pthread_getconcurrency"
   summary="Get the level of thread concurrency"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_getconcurrency( void );\n"
/>
<function
   name="pthread_getcpuclockid"
   summary="Return the clock ID of the CPU-time clock from a specified thread"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;time.h&gt;\n #include &lt;pthread.h&gt;\n extern int pthread_getcpuclockid( pthread_t id, clockid_t* clock_id);\n"
/>
<function
   name="pthread_getname_np"
   summary="Retrieve the name of a thread"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_getname_np(pthread_t tid, char* buffer, int buffersize);\n"
/>
<function
   name="pthread_getschedparam"
   summary="Get a thread's scheduling parameters"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_getschedparam( const pthread_t thread, int *policy, struct sched_param *param );\n"
/>
<function
   name="pthread_getspecific"
   summary="Get a thread-specific data value"
   synopsis="#include &lt;pthread.h&gt;\n void* pthread_getspecific( pthread_key_t key );\n"
/>
<function
   name="pthread_join"
   summary="Join thread"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_join( pthread_t thread, void** value_ptr );\n"
/>
<function
   name="pthread_key_create"
   summary="Create a thread-specific data key"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_key_create( pthread_key_t * key, void (*destructor)( void * ) );\n"
/>
<function
   name="pthread_key_delete"
   summary="Delete a thread-specific data key"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_key_delete( pthread_key_t key );\n"
/>
<function
   name="pthread_kill"
   summary="Send a signal to a thread"
   synopsis="#include &lt;signal.h&gt;\n int pthread_kill( pthread_t thread, int sig );\n"
/>
<function
   name="pthread_mutex_destroy"
   summary="Destroy a mutex"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutex_destroy( pthread_mutex_t* mutex );\n"
/>
<function
   name="pthread_mutex_getprioceiling"
   summary="Get a mutex's priority ceiling"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutex_getprioceiling( const pthread_mutex_t* mutex, int* prioceiling );\n"
/>
<function
   name="pthread_mutex_init"
   summary="Initialize mutex"
   synopsis="#include &lt;pthread.h&gt;\n pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; int pthread_mutex_init( pthread_mutex_t* mutex, const pthread_mutexattr_t* attr );\n"
/>
<function
   name="pthread_mutex_lock"
   summary="Lock a mutex"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutex_lock( pthread_mutex_t* mutex );\n"
/>
<function
   name="pthread_mutex_setprioceiling"
   summary="Set a mutex's priority ceiling"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutex_setprioceiling( pthread_mutex_t* mutex, int prioceiling, int* old_ceiling );\n"
/>
<function
   name="pthread_mutex_timedlock, pthread_mutex_timedlock_monotonic"
   summary="Attempt to lock a mutex"
   synopsis="#include &lt;pthread.h&gt;\n #include &lt;time.h&gt;\n int pthread_mutex_timedlock( pthread_mutex_t * mutex, const struct timespec * abs_timeout );\n int pthread_mutex_timedlock_monotonic( pthread_mutex_t * mutex, const struct timespec * abs_timeout );\n"
/>
<function
   name="pthread_mutex_trylock"
   summary="Attempt to lock a mutex"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutex_trylock( pthread_mutex_t* mutex );\n"
/>
<function
   name="pthread_mutex_unlock"
   summary="Unlock mutex"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutex_unlock( pthread_mutex_t* mutex );\n"
/>
<function
   name="pthread_mutex_wakeup_np"
   summary="Unblock any threads that are waiting on a mutex"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutex_wakeup_np( pthread_mutex_t * mutex, pid_t pid, pthread_t tid );\n"
/>
<function
   name="pthread_mutexattr_destroy"
   summary="Destroy mutex attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_destroy( pthread_mutexattr_t* attr );\n"
/>
<function
   name="pthread_mutexattr_getprioceiling"
   summary="Get the priority ceiling of a mutex attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_getprioceiling( const pthread_mutexattr_t* attr, int* prioceiling );\n"
/>
<function
   name="pthread_mutexattr_getprotocol"
   summary="Get a mutex's scheduling protocol"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_getprotocol( pthread_mutexattr * attr, int * protocol );\n"
/>
<function
   name="pthread_mutexattr_getpshared"
   summary="Get the process-shared attribute from a mutex attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_getpshared( const pthread_mutexattr_t* attr, int* pshared );\n"
/>
<function
   name="pthread_mutexattr_getrecursive"
   summary="Get the recursive attribute from a mutex attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_getrecursive( const pthread_mutexattr_t* attr, int* recursive );\n"
/>
<function
   name="pthread_mutexattr_gettype"
   summary="Get a mutex type"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_gettype( const pthread_mutexattr_t * attr, int * type );\n"
/>
<function
   name="pthread_mutexattr_getwakeup_np"
   summary="Get the wake-up attribute of a mutex"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_getwakeup_np( const pthread_mutexattr_t *attr, int *wakeup );\n"
/>
<function
   name="pthread_mutexattr_init"
   summary="Initialize a mutex attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_init( pthread_mutexattr_t* attr );\n"
/>
<function
   name="pthread_mutexattr_setprioceiling"
   summary="Set the priority ceiling of a mutex attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_setprioceiling( pthread_mutexattr_t* attr, int prioceiling );\n"
/>
<function
   name="pthread_mutexattr_setprotocol"
   summary="Set a mutex's scheduling protocol"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_setprotocol( pthread_mutexattr * attr, int protocol );\n"
/>
<function
   name="pthread_mutexattr_setpshared"
   summary="Set the process-shared attribute in mutex attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_setpshared( pthread_mutexattr_t* attr, int pshared );\n"
/>
<function
   name="pthread_mutexattr_setrecursive"
   summary="Set the recursive attribute in mutex attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_setrecursive( pthread_mutexattr_t* attr, int recursive );\n"
/>
<function
   name="pthread_mutexattr_settype"
   summary="Set a mutex type"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_settype( pthread_mutexattr_t * attr, int type );\n"
/>
<function
   name="pthread_mutexattr_setwakeup_np"
   summary="Set the wake-up attribute of a mutex"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_mutexattr_setwakeup_np( pthread_mutexattr_t *attr, int wakeup );\n"
/>
<function
   name="pthread_once"
   summary="Dynamic package initialization"
   synopsis="#include &lt;pthread.h&gt;\n pthread_once_t once_control = PTHREAD_ONCE_INIT; int pthread_once( pthread_once_t* once_control, void (*init_routine)(void) );\n"
/>
<function
   name="pthread_rwlock_destroy"
   summary="Destroy a read-write lock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_rwlock_destroy( pthread_rwlock_t* rwl );\n"
/>
<function
   name="pthread_rwlock_init"
   summary="Initialize a read-write lock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_rwlock_init( pthread_rwlock_t * rwl, const pthread_rwlockattr_t * attr );\n"
/>
<function
   name="pthread_rwlock_rdlock"
   summary="Acquire a shared read lock on a read-write lock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_rwlock_rdlock( pthread_rwlock_t* rwl );\n"
/>
<function
   name="pthread_rwlock_timedrdlock"
   summary="Lock a read-write lock for reading"
   synopsis="#include &lt;pthread.h&gt;\n #include &lt;time.h&gt;\n int pthread_rwlock_timedrdlock( pthread_rwlock_t * rwlock, const struct timespec * abs_timeout );\n"
/>
<function
   name="pthread_rwlock_timedwrlock"
   summary="Lock a read-write lock for writing"
   synopsis="#include &lt;pthread.h&gt;\n #include &lt;time.h&gt;\n int pthread_rwlock_timedwrlock( pthread_rwlock_t * rwlock, const struct timespec * abs_timeout );\n"
/>
<function
   name="pthread_rwlock_tryrdlock"
   summary="Attempt to acquire a shared lock on a read-write lock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_rwlock_tryrdlock( pthread_rwlock_t* rwl );\n"
/>
<function
   name="pthread_rwlock_trywrlock"
   summary="Attempt to acquire an exclusive lock on a read-write lock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_rwlock_trywrlock( pthread_rwlock_t* rwl );\n"
/>
<function
   name="pthread_rwlock_unlock"
   summary="Unlock a read-write lock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_rwlock_unlock( pthread_rwlock_t* rwl );\n"
/>
<function
   name="pthread_rwlock_wrlock"
   summary="Acquire an exclusive write lock on a read-write lock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_rwlock_wrlock( pthread_rwlock_t* rwl );\n"
/>
<function
   name="pthread_rwlockattr_destroy"
   summary="Destroy a read-write lock attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_rwlockattr_destroy( pthread_rwlockattr_t* attr );\n"
/>
<function
   name="pthread_rwlockattr_getpshared"
   summary="Get the process-shared attribute of a read-write lock attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_rwlockattr_getpshared( const pthread_rwlockattr_t* attr, int* pshared );\n"
/>
<function
   name="pthread_rwlockattr_init"
   summary="Create a read-write lock attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_rwlockattr_init( pthread_rwlockattr_t* attr );\n"
/>
<function
   name="pthread_rwlockattr_setpshared"
   summary="Set the process-shared attribute of a read-write lock attribute object"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_rwlockattr_setpshared( pthread_rwlockattr_t* attr, int pshared );\n"
/>
<function
   name="pthread_self"
   summary="Get the calling thread's ID"
   synopsis="#include &lt;pthread.h&gt;\n pthread_t pthread_self( void );\n"
/>
<function
   name="pthread_setcancelstate"
   summary="Set a thread's cancellation state"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_setcancelstate( int state, int* oldstate );\n"
/>
<function
   name="pthread_setcanceltype"
   summary="Set a thread's cancellation type"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_setcanceltype( int type, int* oldtype );\n"
/>
<function
   name="pthread_setconcurrency"
   summary="Set the concurrency level for a thread"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_setconcurrency( int new_level );\n"
/>
<function
   name="pthread_setname_np"
   summary="Name a thread"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_setname_np(pthread_t tid, const char* newname);\n"
/>
<function
   name="pthread_setschedparam"
   summary="Set thread scheduling parameters"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_setschedparam( pthread_t thread, int policy, const struct sched_param *param );\n"
/>
<function
   name="pthread_setschedprio"
   summary="Set a thread's priority"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_setschedprio( pthread_t thread, int prio );\n"
/>
<function
   name="pthread_setspecific"
   summary="Set a thread-specific data value"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_setspecific( pthread_key_t key, const void* value );\n"
/>
<function
   name="pthread_sigmask"
   summary="Examine and change blocked signals"
   synopsis="#include &lt;signal.h&gt;\n int pthread_sigmask( int how, const sigset_t* set, sigset_t* oset );\n"
/>
<function
   name="pthread_sleepon_broadcast"
   summary="Unblock waiting threads"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_sleepon_broadcast( const volatile void * addr );\n"
/>
<function
   name="pthread_sleepon_lock"
   summary="Lock the pthread_sleepon* functions"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_sleepon_lock( void );\n"
/>
<function
   name="pthread_sleepon_signal"
   summary="Signal a sleeping thread"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_sleepon_signal( const volatile void * addr );\n"
/>
<function
   name="pthread_sleepon_timedwait"
   summary="Make a thread sleep while waiting"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_sleepon_timedwait( const volatile void * addr, uint64_t nsec );\n"
/>
<function
   name="pthread_sleepon_unlock"
   summary="Unlock the pthread_sleepon*() functions"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_sleepon_unlock( void );\n"
/>
<function
   name="pthread_sleepon_wait"
   summary="Make a thread sleep while waiting"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_sleepon_wait( const volatile void * addr );\n"
/>
<function
   name="pthread_spin_destroy"
   summary="Destroy a thread spinlock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_spin_destroy( pthread_spinlock_t * spinner );\n"
/>
<function
   name="pthread_spin_init"
   summary="Initialize a thread spinlock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_spin_init( pthread_spinlock_t * spinner, int pshared );\n"
/>
<function
   name="pthread_spin_lock"
   summary="Lock a thread spinlock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_spin_lock( pthread_spinlock_t * spinner );\n"
/>
<function
   name="pthread_spin_trylock"
   summary="Try to lock a thread spinlock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_spin_trylock( pthread_spinlock_t * spinner );\n"
/>
<function
   name="pthread_spin_unlock"
   summary="Unlock a thread spinlock"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_spin_unlock( spinlock_t * spinner );\n"
/>
<function
   name="pthread_testcancel"
   summary="Test thread cancellation"
   synopsis="#include &lt;pthread.h&gt;\n void pthread_testcancel( void );\n"
/>
<function
   name="pthread_timedjoin, pthread_timedjoin_monotonic"
   summary="Join a thread, with a time limit"
   synopsis="#include &lt;pthread.h&gt;\n int pthread_timedjoin( pthread_t thread, void** value_ptr, const struct timespec* abstime );\n int pthread_timedjoin_monotonic( pthread_t thread, void** value_ptr, const struct timespec* abstime );\n"
/>
<function
   name="pulse_attach"
   summary="Attach a handler function to a pulse code"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int pulse_attach( dispatch_t * dpp, int flags, int code, int (* func) ( message_context_t * ctp, int code, unsigned flags, void * handle ), void * handle );\n"
/>
<function
   name="pulse_detach"
   summary="Detach a handler function from a pulse code"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int pulse_detach( dispatch_t * dpp, int code, int flags );\n"
/>
<function
   name="putc"
   summary="Write a character to a stream"
   synopsis="#include &lt;stdio.h&gt;\n int putc( int c, FILE* fp );\n"
/>
<function
   name="putc_unlocked"
   summary="Write a character to an output stream"
   synopsis="#include &lt;stdio.h&gt;\n int putc_unlocked( int c, FILE *stream );\n"
/>
<function
   name="putchar"
   summary="Write a character to standard output"
   synopsis="#include &lt;stdio.h&gt;\n int putchar( int c );\n"
/>
<function
   name="putchar_unlocked"
   summary="Write a character to stdout"
   synopsis="#include &lt;stdio.h&gt;\n int putchar_unlocked( int c );\n"
/>
<function
   name="putenv"
   summary="Add, change or delete an environment variable"
   synopsis="#include &lt;stdlib.h&gt;\n int putenv( char *env_name );\n"
/>
<function
   name="puts"
   summary="Write a string to stdout"
   synopsis="#include &lt;stdio.h&gt;\n int puts( const char *buf );\n"
/>
<function
   name="putspent"
   summary="Put an entry into the shadow password database"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;shadow.h&gt;\n int putspent( const struct spwd* p, FILE* fp );\n"
/>
<function
   name="pututline"
   summary="Write an entry in the user-information file"
   synopsis="#include &lt;utmp.h&gt;\n void pututline( struct utmp * __utmp );\n"
/>
<function
   name="putw"
   summary="Put a word on a stream"
   synopsis="#include &lt;wchar.h&gt;\n int putw( int w, FILE *stream );\n"
/>
<function
   name="putwc"
   summary="Write a wide character to a stream"
   synopsis="#include &lt;wchar.h&gt;\n wint_t putwc( wchar_t wc, FILE * fp );\n"
/>
<function
   name="putwchar"
   summary="Write a wide character to a stdout"
   synopsis="#include &lt;wchar.h&gt;\n wint_t putwchar( wchar_t wc );\n"
/>
<function
   name="pwrite, pwrite64"
   summary="Write into a file without changing the file pointer"
   synopsis="#include &lt;unistd.h&gt;\n ssize_t pwrite( int filedes, const void* buff, size_t nbytes, off_t offset );\n ssize_t pwrite64( int filedes, const void* buff, size_t nbytes, off64_t offset );\n"
/>
<function
   name="qnx_crypt"
   summary="Encrypt a password (QNX 4)"
   synopsis="#include &lt;unistd.h&gt;\n char* qnx_crypt( const char* key, const char* salt );\n"
/>
<function
   name="qsort"
   summary="Sort an array"
   synopsis="#include &lt;stdlib.h&gt;\n void qsort( void* base, size_t num, size_t width, int (*compare) ( const void* , const void* ) );\n"
/>
<function
   name="Raccept"
   summary="Accept a connection on a socket (via a SOCKS server)"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n int Raccept( int s, struct sockaddr * addr, int * addrlen );\n"
/>
<function
   name="raise"
   summary="Generate a signal"
   synopsis="#include &lt;signal.h&gt;\n int raise( int condition );\n"
/>
<function
   name="rand"
   summary="Generate a pseudo-random integer"
   synopsis="#include &lt;stdlib.h&gt;\n int rand( void );\n"
/>
<function
   name="rand_r"
   summary="Generate a pseudo-random integer in a thread-safe manner"
   synopsis="#include &lt;stdlib.h&gt;\n int rand_r( unsigned int* seed );\n"
/>
<function
   name="random"
   summary="Generate a pseudo-random number from the default state"
   synopsis="#include &lt;stdlib.h&gt;\n long random( void );\n"
/>
<function
   name="Rbind"
   summary="Bind a name to a socket (via a SOCKS server)"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n int Rbind( int s, const struct sockaddr * name, int namelen );\n"
/>
<function
   name="rcmd, rcmd_af"
   summary="Execute a command on a remote host"
   synopsis="#include &lt;unistd.h&gt;\n int rcmd( char ** ahost, unsigned short inport, const char * locuser, const char * remuser, const char * cmd, int * fd2p );\n int rcmd_af( char ** ahost, unsigned short inport, const char * locuser, const char * remuser, const char * cmd, int * fd2p, int af );\n"
/>
<function
   name="Rconnect"
   summary="Initiate a connection on a socket (via a SOCKS server)"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n int Rconnect( int s, const struct sockaddr * name, int namelen);\n"
/>
<function
   name="rdchk"
   summary="Check to see if a read is likely to succeed"
   synopsis="#include &lt;unix.h&gt;\n int rdchk( int fd );\n"
/>
<function
   name="re_comp"
   summary="Compile a regular expression"
   synopsis="#include &lt;unix.h&gt;\n char *re_comp( char *s );\n"
/>
<function
   name="re_exec"
   summary="Execute a regular expression"
   synopsis="#include &lt;unix.h&gt;\n int re_exec( char *s );\n"
/>
<function
   name="read"
   summary="Read bytes from a file"
   synopsis="#include &lt;unistd.h&gt;\n ssize_t read( int fildes, void* buf, size_t nbyte );\n"
/>
<function
   name="read_main_config_file"
   summary="Read the snmpd.conf file"
   synopsis="#include &lt;snmp/snmp_api.h&gt;\n int read_main_config_file( struct snmpd_conf_data * info );\n"
/>
<function
   name="readblock"
   summary="Read blocks of data from a file"
   synopsis="#include &lt;unistd.h&gt;\n int readblock( int fd, size_t blksize, unsigned block, int numblks, void *buff );\n"
/>
<function
   name="readcond"
   summary="Read data from a terminal device"
   synopsis="#include &lt;unistd.h&gt;\n int readcond( int fd, void * buf, int n, int min, int time, int timeout );\n"
/>
<function
   name="readdir"
   summary="Read a directory entry"
   synopsis="#include &lt;dirent.h&gt;\n struct dirent * readdir( DIR * dirp );\n"
/>
<function
   name="readdir_r"
   summary="Get information about the next matching filename"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;dirent.h&gt;\n int readdir_r( DIR * dirp, struct dirent * entry, struct dirent ** result );\n"
/>
<function
   name="readlink"
   summary="Place the contents of a symbolic link into a buffer"
   synopsis="#include &lt;unistd.h&gt;\n int readlink( const char* path, char* buf, size_t bufsiz );\n"
/>
<function
   name="readv"
   summary="Read bytes from a file"
   synopsis="#include &lt;sys/uio.h&gt;\n ssize_t readv( int fildes, const iov_t* iov, int iovcnt );\n"
/>
<function
   name="realloc"
   summary="Allocate, reallocate, or free a block of memory"
   synopsis="#include &lt;stdlib.h&gt;\n void* realloc( void* old_blk, size_t size );\n"
/>
<function
   name="realpath"
   summary="Resolve a pathname"
   synopsis="#include &lt;stdlib.h&gt;\n char * realpath( const char * pathname, char * resolved_name );\n"
/>
<function
   name="recv"
   summary="Receive a message from a socket"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n ssize_t recv( int s, void * buf, size_t len, int flags );\n"
/>
<function
   name="recvfrom"
   summary="Receive a message from the socket at a specified address"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n ssize_t recvfrom( int s, void * buff, size_t len, int flags, struct sockaddr * from, socklen_t * fromlen );\n"
/>
<function
   name="recvmsg"
   summary="Receive a message and its header from a socket"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n ssize_t recvmsg( int s, struct msghdr * msg, int flags );\n"
/>
<function
   name="regcomp"
   summary="Compile a regular expression"
   synopsis="#include &lt;regex.h&gt;\n int regcomp( regex_t * preg, const char * pattern, int cflags );\n"
/>
<function
   name="regerror"
   summary="Explain a regular expression error code"
   synopsis="#include &lt;regex.h&gt;\n size_t regerror( int err, const regex_t * reg, char * buf, size_t len );\n"
/>
<function
   name="regexec"
   summary="Compare a string with a compiled regular expression"
   synopsis="#include &lt;regex.h&gt;\n int regexec( const regex_t * preg, const char * string, size_t nmatch, regmatch_t * pmatch, int eflags );\n"
/>
<function
   name="regfree"
   summary="Release memory allocated for a regular expression"
   synopsis="#include &lt;regex.h&gt;\n void regfree( regex_t * preg );\n"
/>
<function
   name="remainder, remainderf, remainderl"
   summary="Compute the floating point remainder"
   synopsis="#include &lt;math.h&gt;\n double remainder( double x, double y );\n float remainderf( float x, float y );\n long double remainder( long double x, long double y );\n"
/>
<function
   name="remove"
   summary="Remove a link to a file"
   synopsis="#include &lt;stdio.h&gt;\n int remove( const char * filename );\n"
/>
<function
   name="remque"
   summary="Remove an element from a doubly linked queue"
   synopsis="#include &lt;search.h&gt;\n void remque( void *elem);\n"
/>
<function
   name="rename"
   summary="Rename a file"
   synopsis="#include &lt;stdio.h&gt;\n int rename( const char* old, const char* new );\n"
/>
<function
   name="res_init"
   summary="Initialize the Internet domain name resolver routines"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/nameser.h&gt;\n #include &lt;resolv.h&gt;\n int res_init( void );\n"
/>
<function
   name="res_mkquery"
   summary="Construct an Internet domain name query"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/nameser.h&gt;\n #include &lt;resolv.h&gt;\n int res_mkquery( int op, const char * dname, int class, int type, const u_char * data, int datalen, const u_char * newrr, u_char * buf, int buflen );\n"
/>
<function
   name="res_query"
   summary="Query the local Internet domain name server"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/nameser.h&gt;\n #include &lt;resolv.h&gt;\n int res_query( const char * dname, int class, int type, u_char * answer, int anslen );\n"
/>
<function
   name="res_querydomain"
   summary="Query the local Internet domain name server"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/nameser.h&gt;\n #include &lt;resolv.h&gt;\n int res_querydomain( const char * name, const char * domain, int class, int type, u_char * answer, int anslen );\n"
/>
<function
   name="res_search"
   summary="Query a local server, using search options"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/nameser.h&gt;\n #include &lt;resolv.h&gt;\n int res_search( const char * dname, int class, int type, u_char * answer, int anslen );\n"
/>
<function
   name="res_send"
   summary="Send a preformatted Internet domain name query"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;arpa/nameser.h&gt;\n #include &lt;resolv.h&gt;\n int res_send( const u_char * msg, int msglen, u_char * answer, int anslen );\n"
/>
<function
   name="resmgr_attach"
   summary="Attach a path to the pathname space"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int resmgr_attach ( dispatch_t *dpp, resmgr_attr_t *attr, const char *path, enum _file_type file_type, unsigned flags, const resmgr_connect_funcs_t *connect_funcs, const resmgr_io_funcs_t *io_funcs, RESMGR_HANDLE_T *handle );\n"
/>
<function
   name="resmgr_block"
   summary="Block while waiting for a message"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n resmgr_context_t * resmgr_block ( resmgr_context_t * ctp );\n"
/>
<function
   name="resmgr_context_alloc"
   summary="Allocate a resource-manager context"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n resmgr_context_t * resmgr_context_alloc ( dispatch_t * dpp );\n"
/>
<function
   name="resmgr_context_free"
   summary="Free a resource-manager context"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n void resmgr_context_free( resmgr_context_t * ctp );\n"
/>
<function
   name="resmgr_detach"
   summary="Remove a pathname from the pathname space"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int resmgr_detach( dispatch_t * dpp, int id, unsigned flags );\n"
/>
<function
   name="resmgr_devino"
   summary="Get the device and inode number"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_devino( int id, dev_t *pdevno, ino64_t *pino );\n"
/>
<function
   name="resmgr_handle_grow"
   summary="Expand the capacity of the device manager database"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_handle_grow ( unsigned min );\n"
/>
<function
   name="resmgr_handle_tune"
   summary="Tune aspects of client fd-to-OCB mapping"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_handle_tune(int min_handles, int min_clients, int max_client_handles, int *min_handles_old, int *min_clients_old, int *max_client_handles_old);\n"
/>
<function
   name="resmgr_handler"
   summary="Handle resource manager messages"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int resmgr_handler( resmgr_context_t * ctp );\n"
/>
<function
   name="resmgr_iofuncs"
   summary="Extract the I/O function pointers associated with client connections"
   synopsis="#include &lt;sys/resmgr.h&gt;\n const resmgr_io_funcs_t * resmgr_iofuncs( resmgr_context_t * ctp);\n"
/>
<function
   name="resmgr_msg_again"
   summary="Process a message again in a resource manager"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_msg_again( resmgr_context_t *ctp, int rcvid);\n"
/>
<function
   name="resmgr_msgread"
   summary="Read a message from a client"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_msgread( resmgr_context_t * ctp, void * msg, int size, int offset );\n"
/>
<function
   name="resmgr_msgreadv"
   summary="Read a message from a client"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_msgreadv( resmgr_context_t * ctp, iov_t * rmsg, int rparts, int offset );\n"
/>
<function
   name="resmgr_msgreply"
   summary="Reply to client with a message"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_msgreply( resmgr_context_t *ctp, void *ptr, int len );\n"
/>
<function
   name="resmgr_msgreplyv"
   summary="Reply to client with a message"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_msgreplyv( resmgr_context_t *ctp, struct iovec *iov, int parts );\n"
/>
<function
   name="resmgr_msgwrite"
   summary="Write a message to a client"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_msgwrite( resmgr_context_t *ctp, const void *msg, int size, int offset );\n"
/>
<function
   name="resmgr_msgwritev"
   summary="Write a message to a client"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_msgwritev( resmgr_context_t *ctp, const iov_t *smsg, int sparts, int offset );\n"
/>
<function
   name="_RESMGR_NPARTS"
   summary="Indicate how many parts from the ctp-&gt;iov structure to return to the client"
   synopsis="#include &lt;sys/resmgr.h&gt;\n #define _RESMGR_NPARTS( int num ) ..."
/>
<function
   name="resmgr_ocb"
   summary="Retrieve an Open Control Block"
   synopsis="#include &lt;sys/resmgr.h&gt;\n void * resmgr_ocb( resmgr_context_t * ctp);\n"
/>
<function
   name="resmgr_open_bind"
   summary="Associate an OCB with an open request"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_open_bind( resmgr_context_t* ctp, void* ocb, const resmgr_io_funcs_t* iofuncs );\n"
/>
<function
   name="resmgr_pathname"
   summary="Return the pathname associated with an ID"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_pathname( int id, unsigned flags, char* path, int maxbuf );\n"
/>
<function
   name="_RESMGR_PTR"
   summary="Get one part from the ctp-&gt;iov structure and fill in its fields"
   synopsis="#include &lt;sys/resmgr.h&gt;\n #define_RESMGR_PTR( resmgr_context_t ctp, void msg, size_t nbytes ) ..."
/>
<function
   name="_RESMGR_STATUS"
   summary="Set the status member of a resource-manager context"
   synopsis="#include &lt;sys/resmgr.h&gt;\n #define _RESMGR_STATUS( resmgr_context_t *ctp, int status ) ..."
/>
<function
   name="resmgr_unbind"
   summary="Disassociate an OCB from an open request"
   synopsis="#include &lt;sys/resmgr.h&gt;\n int resmgr_unbind( resmgr_context_t * ctp);\n"
/>
<function
   name="rewind"
   summary="Rewind a file stream to the beginning of the file"
   synopsis="#include &lt;stdio.h&gt;\n void rewind( FILE *fp );\n"
/>
<function
   name="rewinddir"
   summary="Rewind a directory stream to the start of the directory"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;dirent.h&gt;\n void rewinddir( DIR * dirp );\n"
/>
<function
   name="Rgetsockname"
   summary="Get the name of a socket (via a SOCKS server)"
   synopsis="#include &lt;sys/socket.h&gt;\n int Rgetsockname( int s, struct sockaddr * name, int * namelen );\n"
/>
<function
   name="rindex"
   summary="Find the last occurrence of a character in a string"
   synopsis="#include &lt;strings.h&gt;\n char *rindex( const char *s, int c );\n"
/>
<function
   name="rint, rintf, rintl"
   summary="Round to the nearest integral value"
   synopsis="#include &lt;math.h&gt;\n double rint ( double x );\n float rintf ( float x );\n long double rintl( long double x );\n"
/>
<function
   name="Rlisten"
   summary="Listen for connections on a socket (via a SOCKS server)"
   synopsis="#include &lt;sys/socket.h&gt;\n int Rlisten( int s, int backlog );\n"
/>
<function
   name="rmdir"
   summary="Delete an empty directory"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n int rmdir( const char* path );\n"
/>
<function
   name="round, roundf, roundl"
   summary="Round a number to the closest integer"
   synopsis="#include &lt;math.h&gt;\n double round( double x );\n float roundf( float x );\n long double roundl( long double x );\n"
/>
<function
   name="Rrcmd"
   summary="Execute a command on a remote host (via a SOCKS server)"
   synopsis="int Rrcmd( char ** ahost, int inport, const char * locuser, const char * remuser, const char * cmd, int * fd2p );\n"
/>
<function
   name="rresvport, rresvport_af"
   summary="Obtain a socket with a privileged address"
   synopsis="#include &lt;unistd.h&gt;\n int rresvport( int * port );\n int rresvport_af( int * port, int af );\n"
/>
<function
   name="Rselect"
   summary="Check for descriptors that are ready for reading or writing (via a SOCKS server)"
   synopsis="int Rselect( int width, fd_set * readfds, fd_set * writefds, fd_set * exceptionfds, struct timeval * timeout );\n"
/>
<function
   name="rsrcdbmgr_attach"
   summary="Reserve a system resource for a process"
   synopsis="#include &lt;sys/rsrcdbmgr.h&gt;\n #include &lt;sys/rsrcdbmsg.h&gt;\n int rsrcdbmgr_attach( rsrc_request_t * list, int count );\n"
/>
<function
   name="rsrcdbmgr_create"
   summary="Create a system resource"
   synopsis="#include &lt;sys/rsrcdbmgr.h&gt;\n #include &lt;sys/rsrcdbmsg.h&gt;\n int rsrcdbmgr_create( rsrc_alloc_t *item, int count );\n"
/>
<function
   name="rsrcdbmgr_destroy"
   summary="Destroy a system resource"
   synopsis="#include &lt;sys/rsrcdbmgr.h&gt;\n #include &lt;sys/rsrcdbmsg.h&gt;\n int rsrcdbmgr_destroy( rsrc_alloc_t *item, int count );\n"
/>
<function
   name="rsrcdbmgr_detach"
   summary="Return a system resource to the resource database"
   synopsis="#include &lt;sys/rsrcdbmgr.h&gt;\n #include &lt;sys/rsrcdbmsg.h&gt;\n int rsrcdbmgr_detach( rsrc_request_t *list, int count );\n"
/>
<function
   name="rsrcdbmgr_devno_attach"
   summary="Get major and minor device numbers"
   synopsis="#include &lt;sys/rsrcdbmgr.h&gt;\n #include &lt;sys/rsrcdbmsg.h&gt;\n dev_t rsrcdbmgr_devno_attach( const char * name, int minor_request, int flags );\n"
/>
<function
   name="rsrcdbmgr_devno_detach"
   summary="Detach a major and minor number"
   synopsis="#include &lt;sys/rsrcdbmgr.h&gt;\n #include &lt;sys/rsrcdbmsg.h&gt;\n int rsrcdbmgr_devno_detach( dev_t devno, int flags );\n"
/>
<function
   name="rsrcdbmgr_query_name"
   summary="Query the resource database"
   synopsis="#include &lt;sys/rsrcdbmgr.h&gt;\n #include &lt;sys/rsrcdbmsg.h&gt;\n int rsrcdbmgr_query_name( rsrc_alloc_t *list, int listcnt, int start, pid_t pid );\n char *name );\n unsigned type );\n"
/>
<function
   name="ruserok"
   summary="Check the identity of a remote host"
   synopsis="#include &lt;unistd.h&gt;\n int ruserok( char * rhost, int superuser, char * ruser, char * luser );\n"
/>
<function
   name="sbrk"
   summary="Set the allocation break value"
   synopsis="#include &lt;unistd.h&gt;\n void* sbrk( int increment );\n"
/>
<function
   name="scalb"
   summary="Load the exponent of a radix-independent floating point number"
   synopsis="#include &lt;math.h&gt;\n double scalb( double x, double n );\n"
/>
<function
   name="scalbn, scalbnf"
   summary="Load the exponent of a radix-independent floating point number"
   synopsis="#include &lt;math.h&gt;\n double scalbn ( double x, int n );\n float scalbnf ( float x, int n );\n"
/>
<function
   name="_scalloc"
   summary="Allocate space for an array"
   synopsis="#include &lt;malloc.h&gt;\n void* _scalloc( size_t size );\n"
/>
<function
   name="scandir"
   summary="Scan a directory"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/dir.h&gt;\n int scandir( char * dirname, struct direct * (* namelist[]), int (*select)(struct dirent *), int (*compar)(const void *,const void *) );\n"
/>
<function
   name="scanf"
   summary="Scan formatted input from stdin"
   synopsis="#include &lt;stdio.h&gt;\n int scanf( const char* format, ... );\n"
/>
<function
   name="sched_getparam"
   summary="Get the current scheduling parameters of a process"
   synopsis="#include &lt;sched.h&gt;\n int sched_getparam( pid_t pid, struct sched_param *param );\n"
/>
<function
   name="sched_get_priority_adjust"
   summary="Calculate the allowable priority for the scheduling policy"
   synopsis="#include &lt;sched.h&gt;\n int sched_get_priority_adjust( int prio, int policy, int adjust );\n"
/>
<function
   name="sched_get_priority_max"
   summary="Get the maximum priority for the scheduling policy"
   synopsis="#include &lt;sched.h&gt;\n int sched_get_priority_max( int policy );\n"
/>
<function
   name="sched_get_priority_min"
   summary="Get the minimum priority for the scheduling policy"
   synopsis="#include &lt;sched.h&gt;\n int sched_get_priority_min( int policy );\n"
/>
<function
   name="sched_getscheduler"
   summary="Get the current scheduling policy for a process"
   synopsis="#include &lt;sched.h&gt;\n int sched_getscheduler( pid_t pid );\n"
/>
<function
   name="sched_rr_get_interval"
   summary="Get the execution time limit of a process"
   synopsis="#include &lt;sched.h&gt;\n int sched_rr_get_interval( pid_t pid, struct timespec * interval );\n"
/>
<function
   name="sched_setparam"
   summary="Change the priority of a process"
   synopsis="#include &lt;sched.h&gt;\n int sched_setparam( pid_t pid, const struct sched_param *param );\n"
/>
<function
   name="sched_setscheduler"
   summary="Change the priority and scheduling policy of a process"
   synopsis="#include &lt;sched.h&gt;\n int sched_setscheduler( pid_t pid, int policy, const struct sched_param *param );\n"
/>
<function
   name="sched_yield"
   summary="Yield to other ready threads at the same priority"
   synopsis="#include &lt;sched.h&gt;\n int sched_yield( void );\n"
/>
<function
   name="SchedCtl, SchedCtl_r"
   summary="Control the adaptive partitioning scheduler"
   synopsis="#include &lt;sys/sched_aps.h&gt;\n #include &lt;sys/neutrino.h&gt;\n int SchedCtl( int cmd, void *data, int length);\n int SchedCtl_r( int cmd, void *data, int length);\n"
/>
<function
   name="SchedGet, SchedGet_r"
   summary="Get the scheduling policy for a thread"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SchedGet( pid_t pid, int tid, struct sched_param *param );\n int SchedGet_r( pid_t pid, int tid, struct sched_param *param );\n"
/>
<function
   name="SchedInfo, SchedInfo_r"
   summary="Get scheduler information"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SchedInfo( pid_t pid, int policy, struct _sched_info* info );\n int SchedInfo_r( pid_t pid, int policy, struct _sched_info* info );\n"
/>
<function
   name="SchedSet, SchedSet_r"
   summary="Set the scheduling policy for a thread"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SchedSet( pid_t pid, int tid, int policy, const struct sched_param *param );\n int SchedSet_r( pid_t pid, int tid, int policy, const struct sched_param *param );\n"
/>
<function
   name="SchedYield, SchedYield_r"
   summary="Yield to other threads"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SchedYield( void );\n int SchedYield_r( void );\n"
/>
<function
   name="searchenv"
   summary="Search the directories listed in an environment variable"
   synopsis="#include &lt;stdlib.h&gt;\n void searchenv( const char* name, const char* env_var, char* buffer );\n"
/>
<function
   name="seed48"
   summary="Initialize the seed for a sequence of pseudo-random numbers"
   synopsis="#include &lt;stdlib.h&gt;\n unsigned short int *seed48( unsigned short int seed16v[3] );\n"
/>
<function
   name="seekdir"
   summary="Set the position for the next read of the directory stream"
   synopsis="#include &lt;dirent.h&gt;\n void seekdir( DIR * dirp, long int pos );\n"
/>
<function
   name="select"
   summary="Check for files that are ready for reading or writing"
   synopsis="#include &lt;sys/select.h&gt;\n int select( int width, fd_set * readfds, fd_set * writefds, fd_set * exceptfds, struct timeval * timeout );\n FD_SET( int fd, fd_set * fdset );\n FD_CLR( int fd, fd_set * fdset );\n FD_ISSET( int fd, fd_set * fdset );\n FD_ZERO( fd_set * fdset );\n"
/>
<function
   name="select_attach"
   summary="Attach a file descriptor to a dispatch handle"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int select_attach ( void *dpp, select_attr_t *attr, int fd, unsigned flags, int (*func)( select_context_t *ctp, int fd, unsigned flags, void *handle ), void *handle );\n"
/>
<function
   name="select_detach"
   summary="Detach a file descriptor from a dispatch handle"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int select_detach( void *dpp, int fd );\n"
/>
<function
   name="select_query"
   summary="Decode the last select event"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int select_query ( select_context_t *ctp, int *fd, unsigned *flags, int (**func)( select_context_t *ctp, int fd, unsigned flags, void *handle ), void **handle );\n"
/>
<function
   name="sem_close"
   summary="Close a named semaphore"
   synopsis="#include &lt;semaphore.h&gt;\n int sem_close( sem_t * sem );\n"
/>
<function
   name="sem_destroy"
   summary="Destroy an unnamed semaphore"
   synopsis="#include &lt;semaphore.h&gt;\n int sem_destroy( sem_t * sem );\n"
/>
<function
   name="sem_getvalue"
   summary="Get the value of a named or unnamed semaphore"
   synopsis="#include &lt;semaphore.h&gt;\n int sem_getvalue( sem_t * sem, int * value );\n"
/>
<function
   name="sem_init"
   summary="Initialize an unnamed semaphore"
   synopsis="#include &lt;semaphore.h&gt;\n int sem_init( sem_t * sem, int pshared, unsigned value );\n"
/>
<function
   name="sem_open"
   summary="Create or access a named semaphore"
   synopsis="#include &lt;semaphore.h&gt;\n #include &lt;fcntl.h&gt;\n sem_t * sem_open( const char * sem_name, int oflags, ... );\n"
/>
<function
   name="sem_post"
   summary="Increment a named or unnamed semaphore"
   synopsis="#include &lt;semaphore.h&gt;\n int sem_post( sem_t * sem );\n"
/>
<function
   name="sem_timedwait, sem_timedwait_monotonic"
   summary="Wait on a named or unnamed semaphore, with a timeout"
   synopsis="#include &lt;semaphore.h&gt;\n #include &lt;time.h&gt;\n int sem_timedwait( sem_t * sem, const struct timespec * abs_timeout );\n int sem_timedwait_monotonic( sem_t * sem, const struct timespec * abs_timeout );\n"
/>
<function
   name="sem_trywait"
   summary="Wait on a named or unnamed semaphore, but don't block"
   synopsis="#include &lt;semaphore.h&gt;\n int sem_trywait( sem_t * sem );\n"
/>
<function
   name="sem_unlink"
   summary="Destroy a named semaphore"
   synopsis="#include &lt;semaphore.h&gt;\n int sem_unlink( const char * sem_name );\n"
/>
<function
   name="sem_wait"
   summary="Wait on a named or unnamed semaphore"
   synopsis="#include &lt;semaphore.h&gt;\n int sem_wait( sem_t * sem );\n"
/>
<function
   name="send"
   summary="Send a message to a connected socket"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n ssize_t send( int s, const void * msg, size_t len, int flags );\n"
/>
<function
   name="sendmsg"
   summary="Send a message and its header to a socket"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n ssize_t sendmsg( int s, const struct msghdr * msg, int flags );\n"
/>
<function
   name="sendto"
   summary="Send a message to a socket at a specific address"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n ssize_t sendto( int s, const void * msg, size_t len, int flags, const struct sockaddr * to, socklen_t tolen );\n"
/>
<function
   name="setbuf"
   summary="Associate a buffer with a stream"
   synopsis="#include &lt;stdio.h&gt;\n void setbuf( FILE *fp, char *buffer );\n"
/>
<function
   name="setbuffer"
   summary="Assign block buffering to a stream"
   synopsis="#include &lt;unix.h&gt;\n void setbuffer( FILE *iop, char *abuf, size_t asize );\n"
/>
<function
   name="setdomainname"
   summary="Set the domain name of the current host"
   synopsis="#include &lt;unistd.h&gt;\n int setdomainname( const char * name, size_t namelen );\n"
/>
<function
   name="setegid"
   summary="Set the effective group ID for a process"
   synopsis="#include &lt;unistd.h&gt;\n int setegid( gid_t gid );\n"
/>
<function
   name="setenv"
   summary="Create or change an environment variable"
   synopsis="#include &lt;stdlib.h&gt;\n int setenv( const char* name, const char* value, int overwrite );\n"
/>
<function
   name="seteuid"
   summary="Set the effective user ID"
   synopsis="#include &lt;unistd.h&gt;\n int seteuid( uid_t uid );\n"
/>
<function
   name="setgid"
   summary="Set the real, effective and saved group IDs"
   synopsis="#include &lt;unistd.h&gt;\n int setgid( gid_t gid );\n"
/>
<function
   name="setfsent"
   summary="Open the filesystem table (/etc/fstab) file"
   synopsis="#include &lt;fstab.h&gt;\n int setfsent( void );\n"
/>
<function
   name="setgrent"
   summary="Rewind to the start of the group database file"
   synopsis="#include &lt;grp.h&gt;\n int setgrent( void );\n"
/>
<function
   name="setgroups"
   summary="Set supplementary group IDs"
   synopsis="#include &lt;unistd.h&gt;\n int setgroups( int ngroups, const gid_t *gidset );\n"
/>
<function
   name="sethostent"
   summary="Open the host database file"
   synopsis="#include &lt;netdb.h&gt;\n void sethostent( int stayopen );\n"
/>
<function
   name="sethostname"
   summary="Set the name of the current host"
   synopsis="#include &lt;unistd.h&gt;\n int sethostname( const char * name, size_t namelen );\n"
/>
<function
   name="SETIOV"
   summary="Fill in the fields of an iov_t structure"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n void SETIOV( iov_t *msg, void *addr, size_t len );\n"
/>
<function
   name="setitimer"
   summary="Set the value of an interval timer"
   synopsis="#include &lt;sys/time.h&gt;\n int setitimer ( int which, const struct itimerval *value, struct itimerval *ovalue );\n"
/>
<function
   name="setjmp"
   summary="Save the calling environment for longjmp"
   synopsis="#include &lt;setjmp.h&gt;\n int setjmp( jmp_buf env );\n"
/>
<function
   name="setkey"
   summary="Set the key used in encryption"
   synopsis="#include &lt;stdlib.h&gt;\n void setkey( const char *__key );\n"
/>
<function
   name="setlinebuf"
   summary="Assign line buffering to a stream"
   synopsis="#include &lt;unix.h&gt;\n int setlinebuf( FILE *iop );\n"
/>
<function
   name="setlocale"
   summary="Select a program's locale"
   synopsis="#include &lt;locale.h&gt;\n char * setlocale( int category, const char * locale );\n"
/>
<function
   name="setlogmask"
   summary="Set the system log priority mask"
   synopsis="#include &lt;syslog.h&gt;\n int setlogmask( int maskpri );\n"
/>
<function
   name="setnetent"
   summary="Open the network name database file"
   synopsis="#include &lt;netdb.h&gt;\n void setnetent( int stayopen );\n"
/>
<function
   name="setpgid"
   summary="Join or create a process group"
   synopsis="#include &lt;process.h&gt;\n int setpgid( pid_t pid, pid_t pgid );\n"
/>
<function
   name="setpgrp"
   summary="Set the process group"
   synopsis="#include &lt;unistd.h&gt;\n pid_t setpgrp( void );\n"
/>
<function
   name="setprio"
   summary="Set the priority of a process"
   synopsis="#include &lt;sched.h&gt;\n int setprio( pid_t pid, int prio );\n"
/>
<function
   name="setprotoent"
   summary="Open the protocol name database file"
   synopsis="#include &lt;netdb.h&gt;\n void setprotoent( int stayopen );\n"
/>
<function
   name="setpwent"
   summary="Rewind the password database file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;pwd.h&gt;\n int setpwent( void );\n"
/>
<function
   name="setregid"
   summary="Set real and effective group IDs"
   synopsis="#include &lt;unistd.h&gt;\n int setregid( gid_t rgid, gid_t egid );\n"
/>
<function
   name="setreuid"
   summary="Set real and effect user IDs"
   synopsis="#include &lt;unistd.h&gt;\n int setreuid( uit_t ruid, uid_t euid );\n"
/>
<function
   name="setrlimit, setrlimit64"
   summary="Set the limit on a system resource"
   synopsis="#include &lt;sys/resource.h&gt;\n int setrlimit( int resource, const struct rlimit * rlp );\n int setrlimit64( int resource, const struct rlimit64 * rlp );\n"
/>
<function
   name="setservent"
   summary="Open the network services database file"
   synopsis="#include &lt;netdb.h&gt;\n void setservent( int stayopen );\n"
/>
<function
   name="setsid"
   summary="Create a new session"
   synopsis="#include &lt;unistd.h&gt;\n pid_t setsid( void );\n"
/>
<function
   name="setsockopt"
   summary="Set options associated with a socket"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n int setsockopt( int s, int level, int optname, const void * optval, socklen_t optlen );\n"
/>
<function
   name="setspent"
   summary="Rewind the shadow password database file"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;shadow.h&gt;\n void setspent( void );\n"
/>
<function
   name="setstate"
   summary="Reset the state of a pseudo-random number generator"
   synopsis="#include &lt;stdlib.h&gt;\n char *setstate( const char *state );\n"
/>
<function
   name="settimeofday"
   summary="Set the time and date"
   synopsis="#include &lt;sys/time.h&gt;\n int settimeofday( const struct timeval *when, void *not_used );\n"
/>
<function
   name="setuid"
   summary="Set the real, effective and saved user IDs"
   synopsis="#include &lt;unistd.h&gt;\n int setuid( uid_t uid );\n"
/>
<function
   name="setutent"
   summary="Return to the beginning of the user-information file"
   synopsis="#include &lt;utmp.h&gt;\n void setutent( void );\n"
/>
<function
   name="setvbuf"
   summary="Associate a buffer with a stream"
   synopsis="#include &lt;stdio.h&gt;\n int setvbuf( FILE *fp, char *buf, int mode, size_t size );\n"
/>
<function
   name="_sfree"
   summary="Deallocate a block of memory"
   synopsis="#include &lt;malloc.h&gt;\n void _sfree( void *ptr, size_t size );\n"
/>
<function
   name="shm_ctl"
   summary="Give special attributes to a shared memory object"
   synopsis="#include &lt;sys/mman.h&gt;\n int shm_ctl( int fd, int flags, uint64_t paddr, uint64_t size );\n"
/>
<function
   name="shm_ctl_special"
   summary="Give special attributes to a shared memory object"
   synopsis="#include &lt;sys/mman.h&gt;\n int shm_ctl_special( int fd, int flags, uint64_t paddr, uint64_t size, unsigned special );\n"
/>
<function
   name="shm_open"
   summary="Open a shared memory object"
   synopsis="#include &lt;fcntl.h&gt;\n #include &lt;sys/mman.h&gt;\n int shm_open( const char * name, int oflag, mode_t mode );\n"
/>
<function
   name="shm_unlink"
   summary="Remove a shared memory object"
   synopsis="#include &lt;sys/mman.h&gt;\n int shm_unlink( const char * name );\n"
/>
<function
   name="shutdown"
   summary="Shut down part of a full-duplex connection"
   synopsis="#include &lt;sys/socket.h&gt;\n int shutdown( int s, int how );\n"
/>
<function
   name="shutdown_system"
   summary="Shut down the system"
   synopsis="#include &lt;sys/shutdown.h&gt;\n void shutdown_system( int type, int flags );\n"
/>
<function
   name="sigaction"
   summary="Examine or specify the action associated with a signal"
   synopsis="#include &lt;signal.h&gt;\n int sigaction( int sig, const struct sigaction * act, struct sigaction * oact );\n"
/>
<function
   name="sigaddset"
   summary="Add a signal to a set"
   synopsis="#include &lt;signal.h&gt;\n int sigaddset( sigset_t *set, int signo );\n"
/>
<function
   name="sigblock"
   summary="Add to the mask of signals to block"
   synopsis="#include &lt;unix.h&gt;\n int sigblock( int mask );\n"
/>
<function
   name="sigdelset"
   summary="Delete a signal from a set"
   synopsis="#include &lt;signal.h&gt;\n int sigdelset( sigset_t *set, int signo );\n"
/>
<function
   name="sigemptyset"
   summary="Initialize a set to contain no signals"
   synopsis="#include &lt;signal.h&gt;\n int sigemptyset( sigset_t *set );\n"
/>
<function
   name="sigfillset"
   summary="Initialize a set to contain all signals"
   synopsis="#include &lt;signal.h&gt;\n int sigfillset( sigset_t *set );\n"
/>
<function
   name="sigismember"
   summary="See if a given signal is in a given set"
   synopsis="#include &lt;signal.h&gt;\n int sigismember( const sigset_t *set, int signo );\n"
/>
<function
   name="siglongjmp"
   summary="Restore the environment saved by sigsetjmp, including the signal mask"
   synopsis="#include &lt;setjmp.h&gt;\n void siglongjmp( sigjmp_buf env, int val );\n"
/>
<function
   name="sigmask"
   summary="Construct a mask for a signal number"
   synopsis="#include &lt;unix.h&gt;\n #define sigmask(s) (1L&lt;&lt;((s)-1))"
/>
<function
   name="signal"
   summary="Set handling for exceptional conditions"
   synopsis="#include &lt;signal.h&gt;\n void ( * signal( int sig, void ( * func)(int) ) )( int );\n"
/>
<function
   name="SignalAction, SignalAction_r"
   summary="Examine and/or specify actions for signals"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SignalAction( pid_t pid, void ( * sigstub)(), int signo, const struct sigaction * act, struct sigaction * oact );\n int SignalAction_r( pid_t pid, void * (sigstub)(), int signo, const struct sigaction * act, struct sigaction * oact );\n"
/>
<function
   name="SignalKill, SignalKill_r"
   summary="Send a signal to a process group, process, or thread"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SignalKill( uint32_t nd, pid_t pid, int tid, int signo, int code, int value );\n int SignalKill_r( uint32_t nd, pid_t pid, int tid, int signo, int code, int value );\n"
/>
<function
   name="SignalProcmask, SignalProcmask_r"
   summary="Modify or examine the signal-blocked mask of a thread"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SignalProcmask( pid_t pid, int tid, int how, const sigset_t* set, sigset_t* oldset );\n int SignalProcmask_r( pid_t pid, int tid, int how, const sigset_t* set, sigset_t* oldset );\n"
/>
<function
   name="SignalSuspend, SignalSuspend_r"
   summary="Suspend a thread until a signal is received"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SignalSuspend( const sigset_t* set );\n int SignalSuspend_r( const sigset_t* set );\n"
/>
<function
   name="SignalWaitinfo, SignalWaitinfo_r"
   summary="Select a pending signal"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SignalWaitinfo( const sigset_t* set, siginfo_t* info );\n int SignalWaitinfo_r( const sigset_t* set, siginfo_t* info );\n"
/>
<function
   name="sigpause"
   summary="Wait for a signal"
   synopsis="#include &lt;signal.h&gt;\n int sigpause( int sig );\n"
/>
<function
   name="sigpending"
   summary="Examine the set of pending, masked signals for a process"
   synopsis="#include &lt;signal.h&gt;\n int sigpending( sigset_t *set );\n"
/>
<function
   name="sigprocmask"
   summary="Examine or change the signal mask for a thread"
   synopsis="#include &lt;signal.h&gt;\n int sigprocmask( int how, const sigset_t *set, sigset_t *oset );\n"
/>
<function
   name="sigqueue"
   summary="Queue a signal to a process"
   synopsis="#include &lt;signal.h&gt;\n int sigqueue ( pid_t pid, int signo, const union sigval value );\n"
/>
<function
   name="sigsetjmp"
   summary="Save the environment, including the signal mask"
   synopsis="#include &lt;setjmp.h&gt;\n int sigsetjmp( sigjmp_buf env, int savemask );\n"
/>
<function
   name="sigsetmask"
   summary="Set the mask of signals to block"
   synopsis="#include &lt;unix.h&gt;\n int sigsetmask( int mask );\n"
/>
<function
   name="sigsuspend"
   summary="Replace the signal mask, and then suspend the thread"
   synopsis="#include &lt;signal.h&gt;\n int sigsuspend( const sigset_t *sigmask );\n"
/>
<function
   name="sigtimedwait"
   summary="Wait for a signal or a timeout"
   synopsis="#include &lt;signal.h&gt;\n int sigtimedwait( const sigset_t *set, siginfo_t *info, const struct timespec *timeout );\n"
/>
<function
   name="sigunblock"
   summary="Unblock signals"
   synopsis="#include &lt;unix.h&gt;\n int sigunblock( int mask );\n"
/>
<function
   name="sigwait"
   summary="Wait for a pending signal"
   synopsis="#include &lt;signal.h&gt;\n int sigwait( const sigset_t *set, int *sig );\n"
/>
<function
   name="sigwaitinfo"
   summary="Wait for a specified signal and return its information"
   synopsis="#include &lt;signal.h&gt;\n int sigwaitinfo ( const sigset_t *set, siginfo_t *info );\n"
/>
<function
   name="sin, sinf, sinl"
   summary="Calculate the sine of an angle"
   synopsis="#include &lt;math.h&gt;\n double sin( double x );\n float sinf( float x );\n long double sinl( long double x );\n"
/>
<function
   name="sinh, sinhf, sinhl"
   summary="Compute the hyperbolic sine"
   synopsis="#include &lt;math.h&gt;\n double sinh( double x );\n float sinhf( float x );\n long double asinhl( long double x );\n"
/>
<function
   name="sleep"
   summary="Suspend a thread for a given length of time"
   synopsis="#include &lt;unistd.h&gt;\n unsigned int sleep( unsigned int seconds );\n"
/>
<function
   name="_sleepon_broadcast"
   summary="Wake up multiple threads"
   synopsis="#include &lt;pthread.h&gt;\n int _sleepon_broadcast( sleepon_t * l, const volatile void * addr );\n"
/>
<function
   name="_sleepon_destroy"
   summary="Destroy a sleepon"
   synopsis="#include &lt;pthread.h&gt;\n int _sleepon_destroy( sleepon_t * l );\n"
/>
<function
   name="_sleepon_init"
   summary="Initialize a sleepon"
   synopsis="#include &lt;pthread.h&gt;\n int _sleepon_init( sleepon_t ** pl, unsigned flags);\n"
/>
<function
   name="_sleepon_lock"
   summary="Lock a sleepon"
   synopsis="#include &lt;pthread.h&gt;\n int _sleepon_lock( sleepon_t * l );\n"
/>
<function
   name="_sleepon_signal"
   summary="Wake up a single thread"
   synopsis="#include &lt;pthread.h&gt;\n int _sleepon_signal( sleepon_t * l, const volatile void * addr );\n"
/>
<function
   name="_sleepon_unlock"
   summary="Unlock a sleepon"
   synopsis="#include &lt;pthread.h&gt;\n int _sleepon_unlock( sleepon_t * l );\n"
/>
<function
   name="_sleepon_wait"
   summary="Wait on a sleepon lock"
   synopsis="#include &lt;pthread.h&gt;\n int _sleepon_wait( sleepon_t * l, const volatile void * addr, uint64_t nsec);\n"
/>
<function
   name="slogb"
   summary="Send a message to the system logger"
   synopsis="#include &lt;stdio.h&gt;\n #include &lt;sys/slog.h&gt;\n int slogb( int code, int severity, void * data, int size );\n"
/>
<function
   name="slogf"
   summary="Send a message to the system logger"
   synopsis="#include &lt;stdio.h&gt;\n #include &lt;sys/slog.h&gt;\n int slogf( int opcode, int severity, const char * fmt, ... );\n"
/>
<function
   name="slogi"
   summary="Send a message to the system logger"
   synopsis="#include &lt;stdio.h&gt;\n #include &lt;sys/slog.h&gt;\n int slogi( int code, int severity, int nargs, ... );\n"
/>
<function
   name="_smalloc"
   summary="Allocate memory in blocks"
   synopsis="#include &lt;malloc.h&gt;\n void* _smalloc( size_t size );\n"
/>
<function
   name="snmp_close"
   summary="Close an SNMP session"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;snmp/asn1.h&gt;\n #include &lt;snmp/snmp_api.h&gt;\n extern int snmp_errno int snmp_close( struct snmp_session * session );\n"
/>
<function
   name="snmp_free_pdu"
   summary="Free an SNMP Protocol Data Unit message structure"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;snmp/asn1.h&gt;\n #include &lt;snmp/snmp_api.h&gt;\n void snmp_free_pdu( struct snmp_pdu * pdu );\n"
/>
<function
   name="snmp_open"
   summary="Open an SNMP session"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;snmp/asn1.h&gt;\n #include &lt;snmp/snmp_api.h&gt;\n extern int snmp_errno; struct snmp_session * snmp_open( struct snmp_session * session );\n"
/>
<function
   name="snmp_pdu_create"
   summary="Create an SNMP Protocol Data Unit message structure"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;snmp/snmp.h&gt;\n #include &lt;snmp/asn1.h&gt;\n #include &lt;snmp/snmp_api.h&gt;\n #include &lt;snmp/snmp_client.h&gt;\n extern int snmp_errno; struct snmp_pdu * snmp_pdu_create (int command );\n"
/>
<function
   name="snmp_read"
   summary="Read an SNMP message"
   synopsis="#include &lt;sys/select.h&gt;\n #include &lt;snmp/snmp_impl.h&gt;\n void snmp_read( struct fd_set * fdset );\n"
/>
<function
   name="snmp_select_info"
   summary="Get information that select needs for SNMP"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/select.h&gt;\n #include &lt;sys/time.h&gt;\n #include &lt;snmp/snmp_api.h&gt;\n int snmp_select_info( int * numfds, struct fd_set * fdset, struct timeval * timeout, int * block );\n"
/>
<function
   name="snmp_send"
   summary="Send SNMP messages"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;snmp/asn1.h&gt;\n #include &lt;netinet/in.h&gt;\n #include &lt;snmp/snmp_api.h&gt;\n extern int snmp_errno int snmp_send( struct snmp_session * session, struct snmp_pdu * pdu );\n"
/>
<function
   name="snmp_timeout"
   summary="Time out during an SNMP session"
   synopsis="#include &lt;snmp/snmp_api.h&gt;\n void snmp_timeout( void );\n"
/>
<function
   name="snprintf"
   summary="Write formatted output to a character array, up to a given maximum number of characters"
   synopsis="#include &lt;stdio.h&gt;\n int snprintf( char* buf, size_t count, const char* format, ... );\n"
/>
<function
   name="sockatmark"
   summary="Determine whether a socket is at the out-of-band mark"
   synopsis="#include &lt;sys/socket.h&gt;\n int sockatmark( int s );\n"
/>
<function
   name="socket"
   summary="Create an endpoint for communication"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n int socket( int domain, int type, int protocol );\n"
/>
<function
   name="socketpair"
   summary="Create a pair of connected sockets"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/socket.h&gt;\n int socketpair( int domain, int type, int protocol, int * fd[2] );\n"
/>
<function
   name="SOCKSinit"
   summary="Initialize a connection with a SOCKS server"
   synopsis="#include &lt;sys/select.h&gt;\n int SOCKSinit( char * progname );\n"
/>
<function
   name="sopen"
   summary="Open a file for shared access"
   synopsis="#include &lt;unistd.h&gt;\n #include &lt;fcntl.h&gt;\n #include &lt;sys/stat.h&gt;\n #include &lt;sys/types.h&gt;\n #include &lt;share.h&gt;\n int sopen( const char* filename, int oflag, int share, ... );\n"
/>
<function
   name="sopenfd"
   summary="Open for shared access a file associated with a given descriptor"
   synopsis="#include &lt;unistd.h&gt;\n int sopenfd( int fd, int oflag, int sflag );\n"
/>
<function
   name="spawn"
   summary="Create and execute a new child process"
   synopsis="#include &lt;spawn.h&gt;\n pid_t spawn( const char * path, int fd_count, const int fd_map[ ], const struct inheritance * inherit, char * const argv[ ], char * const envp[ ] );\n"
/>
<function
   name="spawnl"
   summary="Spawn a child process, given a list of arguments"
   synopsis="#include &lt;process.h&gt;\n int spawnl( int mode, const char * path, const char * arg0, const char * arg1..., const char * argn, NULL );\n"
/>
<function
   name="spawnle"
   summary="Spawn a child process, given a list of arguments and an environment"
   synopsis="#include &lt;process.h&gt;\n int spawnle( int mode, const char * path, const char * arg0, const char * arg1..., const char * argn, NULL, const char * envp[] );\n"
/>
<function
   name="spawnlp"
   summary="Spawn a child process, given a list of arguments and a relative path"
   synopsis="#include &lt;process.h&gt;\n int spawnlp( int mode, const char * file, const char * arg0, const char * arg1..., const char * argn, NULL );\n"
/>
<function
   name="spawnlpe"
   summary="Spawn a child process, given a list of arguments, an environment, and a relative path"
   synopsis="#include &lt;process.h&gt;\n int spawnlpe( int mode, const char * file, const char * arg0, const char * arg1..., const char * argn, NULL, const char * envp[] );\n"
/>
<function
   name="spawnp"
   summary="Create and execute a new child process, given a relative path"
   synopsis="#include &lt;spawn.h&gt;\n pid_t spawnp( const char * file, int fd_count, const int fd_map[ ], const struct inheritance * inherit, char * const argv[ ], char * const envp[ ] );\n"
/>
<function
   name="spawnv"
   summary="Spawn a child process, given a vector of arguments"
   synopsis="#include &lt;process.h&gt;\n int spawnv( int mode, const char * path, char * const argv[] );\n"
/>
<function
   name="spawnve"
   summary="Spawn a child process, given a vector of arguments and an environment"
   synopsis="#include &lt;process.h&gt;\n int spawnve( int mode, const char * path, char * const argv[], char * const envp[] );\n"
/>
<function
   name="spawnvp"
   summary="Spawn a child process, given a vector of arguments and a relative path"
   synopsis="#include &lt;process.h&gt;\n int spawnvp( int mode, const char * file, char * const argv[] );\n"
/>
<function
   name="spawnvpe"
   summary="Spawn a child process, given a vector of arguments, an environment, and a relative path"
   synopsis="#include &lt;spawn.h&gt;\n int spawnvpe( int mode, const char * file, char * const argv[], char * const envp[] );\n"
/>
<function
   name="sprintf"
   summary="Print formatted output into a string"
   synopsis="#include &lt;stdio.h&gt;\n int sprintf( char* buf, const char* format, ... );\n"
/>
<function
   name="sqrt, sqrtf, sqrtl"
   summary="Calculate the nonnegative square root of a number"
   synopsis="#include &lt;math.h&gt;\n double sqrt( double x );\n float sqrtf( float x );\n long double sqrtl( long double x );\n"
/>
<function
   name="srand"
   summary="Start a new sequence of pseudo-random integers"
   synopsis="#include &lt;stdlib.h&gt;\n void srand( unsigned int seed );\n"
/>
<function
   name="srand48"
   summary="Initialize a sequence of pseudo-random numbers"
   synopsis="#include &lt;stdlib.h&gt;\n void srand48( long seed );\n"
/>
<function
   name="srandom"
   summary="Set the seed for a pseudo-random number generator"
   synopsis="#include &lt;stdlib.h&gt;\n void srandom( unsigned int seed );\n"
/>
<function
   name="_srealloc"
   summary="Allocate, reallocate or free a block of memory"
   synopsis="#include &lt;malloc.h&gt;\n void *_srealloc( void* ptr, size_t old_size, size_t new_size );\n"
/>
<function
   name="sscanf"
   summary="Scan input from a character string"
   synopsis="#include &lt;stdio.h&gt;\n int sscanf( const char* in_string, const char* format, ... );\n"
/>
<function
   name="stat, stat64"
   summary="Get information about a file or directory, given a path"
   synopsis="#include &lt;sys/stat.h&gt;\n int stat( const char * path, struct stat * buf );\n int stat64( const char * path, struct stat64 * buf );\n"
/>
<function
   name="statvfs, statvfs64"
   summary="Get filesystem information, given a path"
   synopsis="#include &lt;sys/statvfs.h&gt;\n int statvfs( const char *path, struct statvfs *buf );\n int statvfs64( const char *path, struct statvfs64 *buf );\n"
/>
<function
   name="straddstr"
   summary="Concatenate one string on to the end of another"
   synopsis="#include &lt;string.h&gt;\n int straddstr( const char * str, int len, char ** pbuf, size_t * pmaxbuf );\n"
/>
<function
   name="strcasecmp"
   summary="Compare two strings, ignoring case"
   synopsis="#include &lt;strings.h&gt;\n int strcasecmp( const char* str1, const char* str2 );\n"
/>
<function
   name="strcat"
   summary="Concatenate two strings"
   synopsis="#include &lt;string.h&gt;\n char* strcat( char* dst, const char* src );\n"
/>
<function
   name="strchr"
   summary="Find the first occurrence of a character in a string"
   synopsis="#include &lt;string.h&gt;\n char* strchr(char* s, int c );\n"
/>
<function
   name="strcmp"
   summary="Compare two strings"
   synopsis="#include &lt;string.h&gt;\n int strcmp( const char* s1, const char* s2 );\n"
/>
<function
   name="strcmpi"
   summary="Compare two strings, ignoring case"
   synopsis="#include &lt;string.h&gt;\n int strcmpi( const char* s1, const char* s2 );\n"
/>
<function
   name="strcoll"
   summary="Compare two strings, using the locale's collating sequence"
   synopsis="#include &lt;string.h&gt;\n int strcoll( const char* s1, const char* s2 );\n"
/>
<function
   name="strcpy"
   summary="Copy a string"
   synopsis="#include &lt;string.h&gt;\n char* strcpy( char* dst, const char* src );\n"
/>
<function
   name="strcspn"
   summary="Count the characters at the beginning of a string that aren't in a given character set"
   synopsis="#include &lt;string.h&gt;\n size_t strcspn( const char* str, const char* charset );\n"
/>
<function
   name="strdup"
   summary="Create a duplicate of a string"
   synopsis="#include &lt;string.h&gt;\n char* strdup( const char* src );\n"
/>
<function
   name="strerror"
   summary="Convert an error number into an error message"
   synopsis="#include &lt;string.h&gt;\n char* strerror( int errnum );\n"
/>
<function
   name="strerror_r"
   summary="Convert an error number into an error message (reentrant)"
   synopsis="#include &lt;string.h&gt;\n int strerror_r( int errnum, char *strerrbuf, size_t buflen );\n"
/>
<function
   name="strftime"
   summary="Format a time into a string"
   synopsis="#include &lt;time.h&gt;\n size_t strftime( char * s, size_t maxsize, const char * format, const struct tm * timeptr );\n"
/>
<function
   name="stricmp"
   summary="Compare two strings, ignoring case"
   synopsis="#include &lt;string.h&gt;\n int stricmp( const char* s1, const char* s2 );\n"
/>
<function
   name="strlcat, strlcpy"
   summary="Size-bounded string copying and concatenation"
   synopsis="#include &lt;string.h&gt;\n size_t strlcpy( char *dst, const char *src, size_t size );\n size_t strlcat( char *dst, const char *src, size_t size );\n"
/>
<function
   name="strlen"
   summary="Compute the length of a string"
   synopsis="#include &lt;string.h&gt;\n size_t strlen( const char * s );\n"
/>
<function
   name="strlwr"
   summary="Convert a string to lowercase"
   synopsis="#include &lt;string.h&gt;\n char* strlwr( char* s1 );\n"
/>
<function
   name="strncasecmp"
   summary="Compare two strings, ignoring case, up to a given length"
   synopsis="#include &lt;strings.h&gt;\n int strncasecmp( const char* str1, const char* str2, size_t n );\n"
/>
<function
   name="strncat"
   summary="Concatenate two strings, up to a maximum length"
   synopsis="#include &lt;string.h&gt;\n char* strncat( char* dst, const char* src, size_t n );\n"
/>
<function
   name="strncmp"
   summary="Compare two strings, up to a given length"
   synopsis="#include &lt;string.h&gt;\n int strncmp( const char* s1, const char* s2, size_t n );\n"
/>
<function
   name="strncpy"
   summary="Copy a string, to a maximum length"
   synopsis="#include &lt;string.h&gt;\n char* strncpy( char* dst, const char* src, size_t n );\n"
/>
<function
   name="strnicmp"
   summary="Compare two strings up to a given length, ignoring case"
   synopsis="#include &lt;string.h&gt;\n int strnicmp( const char* s1, const char* s2, size_t len );\n"
/>
<function
   name="strnset"
   summary="Fill a string with a given character, to a given length"
   synopsis="#include &lt;string.h&gt;\n char * strnset( char * s1, int fill, size_t len );\n"
/>
<function
   name="strpbrk"
   summary="Find the first character in a string that's in a given character set"
   synopsis="#include &lt;string.h&gt;\n char* strpbrk(char* str, char* charset );\n"
/>
<function
   name="strptime"
   summary="Convert a string into a time"
   synopsis="#include &lt;time.h&gt;\n char * strptime( const char *buf, const char *format, struct tm *timeptr );\n"
/>
<function
   name="strrchr"
   summary="Find the last occurrence of a character in a string"
   synopsis="#include &lt;string.h&gt;\n const char* strrchr(const char* s, int c );\n"
/>
<function
   name="strrev"
   summary="Reverse a string"
   synopsis="#include &lt;string.h&gt;\n char* strrev( char* s1 );\n"
/>
<function
   name="strsep"
   summary="Separate a string into pieces marked by given delimiters"
   synopsis="#include &lt;string.h&gt;\n char *strsep( char **stringp, char *delim );\n"
/>
<function
   name="strset"
   summary="Fill a string with a given character"
   synopsis="#include &lt;string.h&gt;\n char* strset( char* s1, int fill );\n"
/>
<function
   name="strsignal"
   summary="Return the description of a signal"
   synopsis="#include &lt;string.h&gt;\n char *strsignal( int signo );\n"
/>
<function
   name="strspn"
   summary="Count the characters at the beginning of a string that are in a given character set"
   synopsis="#include &lt;string.h&gt;\n size_t strspn( const char* str, const char* charset );\n"
/>
<function
   name="strstr"
   summary="Find one string inside another"
   synopsis="#include &lt;string.h&gt;\n char* strstr(char* str, char* substr );\n"
/>
<function
   name="strtod, strtof, strtold"
   summary="Convert a string into a double-precision number"
   synopsis="#include &lt;stdlib.h&gt;\n double strtod( const char *ptr, char **endptr );\n float strtof( const char *ptr, char **endptr );\n long double strtold( const char *ptr, char **endptr );\n"
/>
<function
   name="strtoimax, strtoumax"
   summary="Convert a string into an integer"
   synopsis="#include &lt;inttypes.h&gt;\n intmax_t strtoimax ( const char * nptr, char ** endptr, int base );\n uintmax_t strtoumax ( const char * nptr, char ** endptr, int base );\n"
/>
<function
   name="strtok"
   summary="Break a string into tokens"
   synopsis="#include &lt;string.h&gt;\n char* strtok( char* s1, const char* s2 );\n"
/>
<function
   name="strtok_r"
   summary="Break a string into tokens (reentrant)"
   synopsis="#include &lt;string.h&gt;\n char* strtok_r( char* s, const char* sep, char** lasts );\n"
/>
<function
   name="strtol, strtoll"
   summary="Convert a string into a long integer"
   synopsis="#include &lt;stdlib.h&gt;\n long int strtol( const char * ptr, char ** endptr, int base );\n long long strtoll( const char * ptr, char ** endptr, int base );\n"
/>
<function
   name="strtoul, strtoull"
   summary="Convert a string into an unsigned long integer"
   synopsis="#include &lt;stdlib.h&gt;\n unsigned long int strtoul( const char * ptr, char ** endptr, int base );\n unsigned long long strtoull( const char * ptr, char ** endptr, int base );\n"
/>
<function
   name="strupr"
   summary="Convert a string to uppercase"
   synopsis="#include &lt;string.h&gt;\n char* strupr( char* s1 );\n"
/>
<function
   name="strxfrm"
   summary="Transform one string into another, to a given length"
   synopsis="#include &lt;string.h&gt;\n size_t strxfrm( char* dst, const char* src, size_t n );\n"
/>
<function
   name="swab"
   summary="Endian-swap a given number of bytes"
   synopsis="#include &lt;unistd.h&gt;\n void swab( const void * src, void * dest, ssize_t nbytes );\n"
/>
<function
   name="swprintf"
   summary="Print formatted wide-character output into a string"
   synopsis="#include &lt;wchar.h&gt;\n int swprintf( wchar_t * ws, size_t n, const wchar_t * format, ... );\n"
/>
<function
   name="swscanf"
   summary="Scan input from a wide-character string"
   synopsis="#include &lt;wchar.h&gt;\n int swscanf( const wchar_t * ws, const wchar_t * format, ... );\n"
/>
<function
   name="symlink"
   summary="Create a symbolic link to a path"
   synopsis="#include &lt;unistd.h&gt;\n int symlink( const char* pname, const char* slink );\n"
/>
<function
   name="sync"
   summary="Synchronize filesystem updates"
   synopsis="#include &lt;unistd.h&gt;\n void sync( void );\n"
/>
<function
   name="SyncCondvarSignal, SyncCondvarSignal_r"
   summary="Wake up any threads that are blocked on a synchronization object"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SyncCondvarSignal( sync_t* sync, int broadcast );\n int SyncCondvarSignal_r( sync_t* sync, int broadcast );\n"
/>
<function
   name="SyncCondvarWait, SyncCondvarWait_r"
   summary="Block a thread on a synchronization object"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SyncCondvarWait( sync_t * sync, sync_t * mutex );\n int SyncCondvarWait_r( sync_t * sync, sync_t * mutex );\n"
/>
<function
   name="SyncCtl, SyncCtl_r"
   summary="Perform an operation on a synchronization object"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SyncCtl( int cmd, sync_t * sync, void * data );\n int SyncCtl_r( int cmd, sync_t * sync, void * data );\n"
/>
<function
   name="SyncDestroy, SyncDestroy_r"
   summary="Destroy a synchronization object"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SyncDestroy( sync_t* sync );\n int SyncDestroy_r ( sync_t* sync );\n"
/>
<function
   name="SyncMutexEvent, SyncMutexEvent_r"
   summary="Attach an event to a mutex"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SyncMutexEvent( sync_t * sync, struct sigevent * event );\n int SyncMutexEvent_r( sync_t * sync, struct sigevent * event );\n"
/>
<function
   name="SyncMutexLock, SyncMutexLock_r"
   summary="Lock a mutex synchronization object"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SyncMutexLock( sync_t * sync );\n int SyncMutexLock_r( sync_t * sync );\n"
/>
<function
   name="SyncMutexRevive, SyncMutexRevive_r"
   summary="Revive a mutex that's in the DEAD state"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SyncMutexRevive( sync_t * sync );\n int SyncMutexRevive_r( sync_t * sync );\n"
/>
<function
   name="SyncMutexUnlock, SyncMutexUnlock_r"
   summary="Unlock a mutex synchronization object"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SyncMutexUnlock( sync_t * sync );\n int SyncMutexUnlock_r( sync_t * sync );\n"
/>
<function
   name="SyncSemPost, SyncSemPost_r"
   summary="Increment a semaphore"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SyncSemPost( sync_t* sync );\n int SyncSemPost_r( sync_t* sync );\n"
/>
<function
   name="SyncSemWait, SyncSemWait_r"
   summary="Wait on a semaphore"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SyncSemWait( sync_t* sync, int try );\n int SyncSemWait_r( sync_t* sync, int try );\n"
/>
<function
   name="SyncTypeCreate, SyncTypeCreate_r"
   summary="Create a synchronization object"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int SyncTypeCreate( unsigned type, sync_t * sync, const struct _sync_attr * attr );\n int SyncTypeCreate_r( unsigned type, sync_t * sync, const struct _sync_attr * attr );\n"
/>
<function
   name="sysconf"
   summary="Return the value of a configurable system limit"
   synopsis="#include &lt;unistd.h&gt;\n #include &lt;limits.h&gt;\n long sysconf( int name );\n"
/>
<function
   name="sysctl"
   summary="Get or set information about the socket manager"
   synopsis="#include &lt;sys/param.h&gt;\n #include &lt;sys/sysctl.h&gt;\n int sysctl( int * name, u_int namelen, void * oldp, size_t * oldlenp, void * newp, size_t newlen );\n"
/>
<function
   name="syslog"
   summary="Write a message to the system log"
   synopsis="#include &lt;syslog.h&gt;\n void syslog( int priority, const char * message, ...)"
/>
<function
   name="sysmgr_reboot"
   summary="Reboot the system"
   synopsis="#include &lt;sys/sysmgr.h&gt;\n int sysmgr_reboot( void );\n"
/>
<function
   name="SYSPAGE_CPU_ENTRY"
   summary="Return a CPU-specific entry from the system page"
   synopsis="#include &lt;sys/syspage.h&gt;\n #define SYSPAGE_CPU_ENTRY( cpu, entry )..."
/>
<function
   name="SYSPAGE_ENTRY"
   summary="Return an entry from the system page"
   synopsis="#include &lt;sys/syspage.h&gt;\n #define SYSPAGE_ENTRY( entry )..."
/>
<function
   name="system"
   summary="Execute a system command"
   synopsis="#include &lt;stdlib.h&gt;\n int system( const char *command );\n"
/>
<function
   name="tan, tanf, tanl"
   summary="Calculate the tangent of an angle"
   synopsis="#include &lt;math.h&gt;\n double tan( double x );\n float tanf( float x );\n long double tanl( long double x );\n"
/>
<function
   name="tanh, tanhf, tanhl"
   summary="Calculate the hyperbolic tangent"
   synopsis="#include &lt;math.h&gt;\n double tanh( double x );\n float tanhf( float x );\n long double tanhl( long double x );\n"
/>
<function
   name="tcdrain"
   summary="Wait until all output has been transmitted to a device"
   synopsis="#include &lt;termios.h&gt;\n int tcdrain( int fildes );\n"
/>
<function
   name="tcdropline"
   summary="Disconnect a communications line"
   synopsis="#include &lt;termios.h&gt;\n int tcdropline( int fd, int duration );\n"
/>
<function
   name="tcflow"
   summary="Perform a flow-control operation on a data stream"
   synopsis="#include &lt;termios.h&gt;\n int tcflow( int fildes, int action );\n"
/>
<function
   name="tcflush"
   summary="Flush the input and/or output stream"
   synopsis="#include &lt;termios.h&gt;\n int tcflush( int fildes, int queue_selector );\n"
/>
<function
   name="tcgetattr"
   summary="Get the current terminal control settings"
   synopsis="#include &lt;termios.h&gt;\n int tcgetattr( int fildes, struct termios *termios_p );\n"
/>
<function
   name="tcgetpgrp"
   summary="Get the process group ID associated with a device"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n pid_t tcgetpgrp( int fildes );\n"
/>
<function
   name="tcgetsid"
   summary="Get the process group ID of the session leader for a controlling terminal"
   synopsis="#include &lt;unistd.h&gt;\n int tcgetsid( int filedes );\n"
/>
<function
   name="tcgetsize"
   summary="Get the size of a character device"
   synopsis="#include &lt;termios.h&gt;\n int tcgetsize( int filedes, int* prows, int* pcols );\n"
/>
<function
   name="tcinject"
   summary="Inject characters into a device's input buffer"
   synopsis="#include &lt;termios.h&gt;\n int tcinject( int fd, char *buf, int n );\n"
/>
<function
   name="tcischars"
   summary="Determine the number of characters waiting to be read"
   synopsis="#include &lt;termios.h&gt;\n int tcischars( int filedes );\n"
/>
<function
   name="tcsendbreak"
   summary="Assert a break condition over a communications line"
   synopsis="#include &lt;termios.h&gt;\n int tcsendbreak( int fildes, int duration );\n"
/>
<function
   name="tcsetattr"
   summary="Change the terminal control settings for a device"
   synopsis="#include &lt;termios.h&gt;\n int tcsetattr( int fildes, int optional_actions, const struct termios *termios_p );\n"
/>
<function
   name="tcsetpgrp"
   summary="Set the process group ID for a device"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;unistd.h&gt;\n int tcsetpgrp( int fildes, pid_t pgrp_id );\n"
/>
<function
   name="tcsetsid"
   summary="Make a terminal device a controlling device"
   synopsis="#include &lt;termios.h&gt;\n int tcsetsid( int fd, pid_t pid );\n"
/>
<function
   name="tcsetsize"
   summary="Set the size of a character device"
   synopsis="#include &lt;termios.h&gt;\n int tcsetsize( int filedes, int rows, int cols );\n"
/>
<function
   name="tell, tell64"
   summary="Determine the current file position"
   synopsis="#include &lt;unistd.h&gt;\n off_t tell( int filedes );\n off64_t tell64( int filedes );\n"
/>
<function
   name="telldir"
   summary="Get the location associated with the directory stream"
   synopsis="#include &lt;dirent.h&gt;\n long int telldir( DIR * dirp );\n"
/>
<function
   name="tempnam"
   summary="Create a name for a temporary file"
   synopsis="#include &lt;stdio.h&gt;\n char* tempnam( const char* dir, const char* pfx );\n"
/>
<function
   name="thread_pool_control"
   summary="Control the thread pool behavior"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n thread_pool_control( thread_pool_t * pool, thread_pool_attr_t * attr, uint16_t lower, uint16_t upper, unsigned flags )"
/>
<function
   name="thread_pool_create"
   summary="Create a thread pool handle"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n thread_pool_t * thread_pool_create ( thread_pool_attr_t * pool_attr, unsigned flags );\n"
/>
<function
   name="thread_pool_destroy"
   summary="Free the memory allocated to a thread pool"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int thread_pool_destroy( thread_pool_t * pool );\n"
/>
<function
   name="thread_pool_limits"
   summary="Convenience wrapper function for thread_pool_control"
   synopsis="#include &lt;sys/iofunc.h&gt;\n #include &lt;sys/dispatch.h&gt;\n int thread_pool_limits( thread_pool_t * pool, int lowater, int hiwater, int maximum, int increment, unsigned flags );\n"
/>
<function
   name="thread_pool_start"
   summary="Start a thread pool"
   synopsis="#include &lt;sys/dispatch.h&gt;\n int thread_pool_start( void *pool );\n"
/>
<function
   name="ThreadCancel, ThreadCancel_r"
   summary="Cancel a thread"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ThreadCancel( int tid, void (*canstub)(void) );\n int ThreadCancel_r( int tid, void (*canstub)(void) );\n"
/>
<function
   name="ThreadCreate, ThreadCreate_r"
   summary="Create a thread"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ThreadCreate( pid_t pid, void* (func)( void* ), void* arg, const struct _thread_attr* attr );\n int ThreadCreate_r( pid_t pid, void* (func)( void* ), void* arg, const struct _thread_attr* attr );\n"
/>
<function
   name="ThreadCtl, ThreadCtl_r"
   summary="Control a thread"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ThreadCtl( int cmd, void * data );\n int ThreadCtl_r( int cmd, void * data );\n"
/>
<function
   name="ThreadDestroy, ThreadDestroy_r"
   summary="Destroy a thread immediately"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ThreadDestroy( int tid, int priority, void* status );\n int ThreadDestroy_r( int tid, int priority, void* status );\n"
/>
<function
   name="ThreadDetach, ThreadDetach_r"
   summary="Detach a thread from a process"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ThreadDetach( int tid );\n int ThreadDetach_r( int tid );\n"
/>
<function
   name="ThreadJoin, ThreadJoin_r"
   summary="Block until a thread terminates"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int ThreadJoin( int tid, void** status );\n int ThreadJoin_r( int tid, void** status );\n"
/>
<function
   name="time"
   summary="Determine the current calendar time"
   synopsis="#include &lt;time.h&gt;\n time_t time( time_t * tloc );\n"
/>
<function
   name="timer_create"
   summary="Create a timer"
   synopsis="#include &lt;signal.h&gt;\n #include &lt;time.h&gt;\n int timer_create( clockid_t clock_id, struct sigevent * evp, timer_t * timerid );\n"
/>
<function
   name="timer_delete"
   summary="Delete a timer"
   synopsis="#include &lt;time.h&gt;\n int timer_delete( timer_t timerid );\n"
/>
<function
   name="timer_getexpstatus"
   summary="Get the expiry status of a timer"
   synopsis="#include &lt;time.h&gt;\n int timer_getexpstatus( timer_t timerid );\n"
/>
<function
   name="timer_getoverrun"
   summary="Return the number of timer overruns"
   synopsis="#include &lt;signal.h&gt;\n #include &lt;time.h&gt;\n int timer_getoverrun( timer_t timerid );\n"
/>
<function
   name="timer_gettime"
   summary="Get the amount of time left on a timer"
   synopsis="#include &lt;time.h&gt;\n int timer_gettime( timer_t timerid, struct itimerspec *value );\n"
/>
<function
   name="timer_settime"
   summary="Set the expiration time for a timer"
   synopsis="#include &lt;time.h&gt;\n int timer_settime( timer_t timerid, int flags, const struct itimerspec * value, struct itimerspec * ovalue );\n"
/>
<function
   name="timer_timeout, timer_timeout_r"
   summary="Set a timeout on a blocking state"
   synopsis="#include &lt;time.h&gt;\n extern int timer_timeout( clockid_t id, int flags, const struct sigevent* notify, const struct timespec* ntime, struct timespec* otime );\n extern int timer_timeout_r( clockid_t id, int flags, const struct sigevent* notify, const struct timespec* ntime, struct timespec* otime );\n"
/>
<function
   name="TimerAlarm, TimerAlarm_r"
   summary="Send an alarm signal"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int TimerAlarm( clockid_t id, const struct _itimer * itime, struct _itimer * otime );\n int TimerAlarm_r( clockid_t id, const struct _itimer * itime, struct _itimer * otime );\n"
/>
<function
   name="TimerCreate, TimerCreate_r"
   summary="Create a timer for a process"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int TimerCreate( clockid_t id, const struct sigevent *event );\n int TimerCreate_r( clockid_t id, const struct sigevent *event );\n"
/>
<function
   name="TimerDestroy, TimerDestroy_r"
   summary="Destroy a process timer"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int TimerDestroy( timer_t id );\n int TimerDestroy_r( timer_t id );\n"
/>
<function
   name="TimerInfo, TimerInfo_r"
   summary="Get information about a timer"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int TimerInfo( pid_t pid, timer_t id, int flags, struct _timer_info* info );\n int TimerInfo_r( pid_t pid, timer_t id, int flags, struct _timer_info* info );\n"
/>
<function
   name="TimerSettime, TimerSettime_r"
   summary="Set the expiration time for a timer"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int TimerSettime( timer_t id, int flags, const struct _itimer * itime, struct _itimer * oitime );\n int TimerSettime_r( timer_t id, int flags, const struct _itimer * itime, struct _itimer * oitime );\n"
/>
<function
   name="TimerTimeout, TimerTimeout_r"
   summary="Set a timeout on a blocking state"
   synopsis="#include &lt;sys/neutrino.h&gt;\n int TimerTimeout( clockid_t id, int flags, const struct sigevent * notify, const uint64_t * ntime, uint64_t * otime );\n int TimerTimeout_r( clockid_t id, int flags, const struct sigevent * notify, const uint64_t * ntime, uint64_t * otime );\n"
/>
<function
   name="times"
   summary="Get time-accounting information"
   synopsis="#include &lt;sys/times.h&gt;\n clock_t times( struct tms* buffer );\n"
/>
<function
   name="timespec2nsec"
   summary="Convert a timespec structure to nanoseconds"
   synopsis="#include &lt;time.h&gt;\n uint64_t timespec2nsec( const struct timespec* ts );\n"
/>
<function
   name="tmpfile, tmpfile64"
   summary="Create a temporary file"
   synopsis="#include &lt;stdio.h&gt;\n FILE* tmpfile( void );\n FILE* tmpfile64( void );\n"
/>
<function
   name="tmpnam"
   summary="Generate a unique string for use as a filename"
   synopsis="#include &lt;stdio.h&gt;\n char* tmpnam( char* buffer );\n"
/>
<function
   name="tolower"
   summary="Convert a character to lowercase"
   synopsis="#include &lt;ctype.h&gt;\n int tolower( int c );\n"
/>
<function
   name="toupper"
   summary="Convert a character to uppercase"
   synopsis="#include &lt;ctype.h&gt;\n int toupper( int c );\n"
/>
<function
   name="towctrans"
   summary="Convert a wide character in a specified manner"
   synopsis="#include &lt;wctype.h&gt;\n wint_t towctrans( wint_t wc, wctrans_t category );\n"
/>
<function
   name="towlower"
   summary="Convert a wide character to lowercase"
   synopsis="#include &lt;wctype.h&gt;\n wint_t towlower( wint_t wc );\n"
/>
<function
   name="towupper"
   summary="Convert a wide character to uppercase"
   synopsis="#include &lt;wctype.h&gt;\n wint_t towupper( wint_t wc );\n"
/>
<function
   name="trace_func_enter"
   summary="Insert a trace event for the entry to a function"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/trace.h&gt;\n int trace_func_enter( void *this_fn, void *call_site );\n"
/>
<function
   name="trace_func_exit"
   summary="Insert a trace event for the exit from a function"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/trace.h&gt;\n int trace_func_exit( void *this_fn, void *call_site );\n"
/>
<function
   name="trace_here"
   summary="Insert a trace event for the current address"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/trace.h&gt;\n int trace_here( void );\n"
/>
<function
   name="trace_logb"
   summary="Insert a user combine trace event"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/trace.h&gt;\n int trace_logb( int code, const void *buf, size_t nbytes );\n"
/>
<function
   name="trace_logbc"
   summary="Insert a trace event of an arbitrary class and type with arbitrary data"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/trace.h&gt;\n int trace_logbc( int class, int event, const void *data, size_t nbytes );\n"
/>
<function
   name="trace_logf"
   summary="Insert a user string trace event"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/trace.h&gt;\n int trace_logf( int code, const char *fmt, ...);\n"
/>
<function
   name="trace_logi"
   summary="Insert a user simple trace event"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/trace.h&gt;\n int trace_logi( int code, unsigned d1, unsigned d2 );\n"
/>
<function
   name="trace_nlogf"
   summary="Insert a user string trace event, specifying a maximum string length"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/trace.h&gt;\n int trace_nlogf( int code, int max, const char *fmt, ... );\n"
/>
<function
   name="trace_vnlogf"
   summary="Insert a user string trace event, using a variable argument list"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/trace.h&gt;\n int trace_vnlogf( int code, int max, const char *fmt, va_list arglist );\n"
/>
<function
   name="TraceEvent"
   summary="Control the tracing of kernel events"
   synopsis="#include &lt;sys/neutrino.h&gt;\n #include &lt;sys/trace.h&gt;\n int TraceEvent( int cmd, ... );\n"
/>
<function
   name="traceparser"
   summary="Process trace data"
   synopsis="#include &lt;sys/traceparser.h&gt;\n extern int traceparser ( struct traceparser_state * stateptr, void * userdata, const char * filename );\n"
/>
<function
   name="traceparser_cs"
   summary="Attach a callback to a trace event"
   synopsis="#include &lt;sys/traceparser.h&gt;\n int traceparser_cs ( struct traceparser_state * stateptr, void * userdata, tracep_callb_func_t funcptr, unsigned class, unsigned event );\n"
/>
<function
   name="traceparser_cs_range"
   summary="Attach a callback to a range of events"
   synopsis="#include &lt;sys/traceparser.h&gt;\n int traceparser_cs_range ( struct traceparser_state * stateptr, void * userdata, tracep_callb_func_t funcptr, unsigned class, unsigned firstevent, unsigned lastevent );\n"
/>
<function
   name="traceparser_debug"
   summary="Set the traceparser debug modes"
   synopsis="#include &lt;sys/traceparser.h&gt;\n int traceparser_debug ( struct traceparser_state * stateptr, FILE * streamptr, unsigned flags );\n"
/>
<function
   name="traceparser_destroy"
   summary="Destroy a traceparser state structure"
   synopsis="#include &lt;sys/traceparser.h&gt;\n void traceparser_destroy ( struct traceparser_state ** stateptr );\n"
/>
<function
   name="traceparser_get_info"
   summary="Get information about traceparser"
   synopsis="#include &lt;sys/traceparser.h&gt;\n void * traceparser_get_info ( struct traceparser_state * stateptr, info_modes_t infomodes, unsigned * len );\n"
/>
<function
   name="traceparser_init"
   summary="Initialize the traceparser state information"
   synopsis="#include &lt;sys/traceparser.h&gt;\n struct traceparser_state * traceparser_init ( struct traceparser_state * stateptr );\n"
/>
<function
   name="truncate"
   summary="Truncate a file to a specified length"
   synopsis="#include &lt;unistd.h&gt;\n int truncate( const char* path, off_t length );\n"
/>
<function
   name="ttyname"
   summary="Get a fully qualified pathname for a file"
   synopsis="#include &lt;unistd.h&gt;\n char *ttyname( int fildes );\n"
/>
<function
   name="ttyname_r"
   summary="Get a fully qualified pathname for a file"
   synopsis="#include &lt;unistd.h&gt;\n int ttyname_r( int fildes, char* name, size_t namesize );\n"
/>
<function
   name="tzset"
   summary="Set the time according to the current time zone"
   synopsis="#include &lt;time.h&gt;\n void tzset( void );\n"
/>
<function
   name="ualarm"
   summary="Schedule an alarm"
   synopsis="#include &lt;unistd.h&gt;\n useconds_t ualarm( useconds_t usec, useconds_t interval );\n"
/>
<function
   name="ultoa, ulltoa"
   summary="Convert an unsigned long integer into a string, using a given base"
   synopsis="#include &lt;stdlib.h&gt;\n char* ultoa( unsigned long int value, char* buffer, int radix );\n char* ulltoa( unsigned long long value char* buffer, int radix );\n"
/>
<function
   name="umask"
   summary="Set the file-mode creation mask for the process"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/stat.h&gt;\n mode_t umask( mode_t cmask );\n"
/>
<function
   name="umount"
   summary="Unmount a filesystem"
   synopsis="#include &lt;sys/mount.h&gt;\n int umount( const char* dir, int flags);\n"
/>
<function
   name="UNALIGNED_PUT16"
   summary="Write a misaligned 16-bit value safely"
   synopsis="#include &lt;gulliver.h&gt;\n void UNALIGNED_PUT16( uint16_t *loc, uint16_t num );\n"
/>
<function
   name="UNALIGNED_PUT32"
   summary="Write a misaligned 32-bit value safely"
   synopsis="#include &lt;gulliver.h&gt;\n void UNALIGNED_PUT32( uint32_t *loc, uint32_t num );\n"
/>
<function
   name="UNALIGNED_PUT64"
   summary="Write a misaligned 64-bit value safely"
   synopsis="#include &lt;gulliver.h&gt;\n void UNALIGNED_PUT64( uint64_t * loc, uint64_t num );\n"
/>
<function
   name="UNALIGNED_RET16"
   summary="Access a misaligned 16-bit value safely"
   synopsis="#include &lt;gulliver.h&gt;\n uint16_t UNALIGNED_RET16( const uint16_t *loc );\n"
/>
<function
   name="UNALIGNED_RET32"
   summary="Access a misaligned 32-bit value safely"
   synopsis="#include &lt;gulliver.h&gt;\n uint32_t UNALIGNED_RET32( const uint32_t *loc );\n"
/>
<function
   name="UNALIGNED_RET64"
   summary="Access a misaligned 64-bit value safely"
   synopsis="#include &lt;gulliver.h&gt;\n uint64_t UNALIGNED_RET64( const uint64_t * loc );\n"
/>
<function
   name="uname"
   summary="Get information about the operating system"
   synopsis="#include &lt;sys/utsname.h&gt;\n int uname( struct utsname * name );\n"
/>
<function
   name="ungetc"
   summary="Push a character back onto an input stream"
   synopsis="#include &lt;stdio.h&gt;\n int ungetc( int c, FILE *fp );\n"
/>
<function
   name="ungetwc"
   summary="Push a wide character back onto an input stream"
   synopsis="#include &lt;wchar.h&gt;\n wint_t ungetwc( wint_t wc, FILE * fp );\n"
/>
<function
   name="unlink"
   summary="Remove a link to a file"
   synopsis="#include &lt;unistd.h&gt;\n int unlink( const char * path );\n"
/>
<function
   name="unsetenv"
   summary="Remove an environment variable"
   synopsis="#include &lt;stdlib.h&gt;\n int unsetenv( const char* name );\n"
/>
<function
   name="usleep"
   summary="Suspend a thread for a given number of microseconds"
   synopsis="#include &lt;unistd.h&gt;\n int usleep( useconds_t useconds );\n"
/>
<function
   name="utime"
   summary="Record the modification time for a file or directory"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;utime.h&gt;\n struct utimbuf { time_t actime; /* access time */ time_t modtime; /* modification time */ }; int utime( const char* path, const struct utimbuf* times );\n"
/>
<function
   name="utimes"
   summary="Set a file's access and modification times"
   synopsis="#include &lt;sys/time.h&gt;\n int utimes( const char * __path, const struct timeval * __times );\n"
/>
<function
   name="utmpname"
   summary="Change the name of the user-information file"
   synopsis="#include &lt;utmp.h&gt;\n void utmpname( char * __filename );\n"
/>
<function
   name="utoa"
   summary="Convert an unsigned integer into a string, using a given base"
   synopsis="#include &lt;stdlib.h&gt;\n char* utoa( unsigned int value, char* buffer, int radix );\n"
/>
<function
   name="va_arg"
   summary="Get the next item in a list of variable arguments"
   synopsis="#include &lt;stdarg.h&gt;\n type va_arg( va_list param, type );\n"
/>
<function
   name="va_copy"
   summary="Make a copy of a variable argument list"
   synopsis="#include &lt;stdarg.h&gt;\n void va_copy( va_list d, va_list s );\n"
/>
<function
   name="va_end"
   summary="Finish getting items from a variable argument list"
   synopsis="#include &lt;stdarg.h&gt;\n void va_end( va_list param );\n"
/>
<function
   name="va_start"
   summary="Start getting items from a variable argument list"
   synopsis="#include &lt;stdarg.h&gt;\n void va_start( va_list param, previous );\n"
/>
<function
   name="valloc"
   summary="Allocate a heap block aligned on a page boundary"
   synopsis="#include &lt;stdarg.h&gt;\n void * valloc( size_t size);\n"
/>
<function
   name="verr, verrx"
   summary="Display a formatted error message, and then exit (varargs)"
   synopsis="#include &lt;err.h&gt;\n void verr( int eval, const char *fmt, va_list args );\n void verrx( int eval, const char *fmt, va_list args );\n"
/>
<function
   name="vfork"
   summary="Spawn a new process and block the parent"
   synopsis="#include &lt;process.h&gt;\n pid_t vfork( void );\n"
/>
<function
   name="vfprintf"
   summary="Write formatted output to a file (varargs)"
   synopsis="#include &lt;stdio.h&gt;\n #include &lt;stdarg.h&gt;\n int vfprintf( FILE* fp, const char* format, va_list arg );\n"
/>
<function
   name="vfscanf"
   summary="Scan input from a file (varargs)"
   synopsis="#include &lt;stdio.h&gt;\n #include &lt;stdarg.h&gt;\n int vfscanf( FILE *fp, const char *format, va_list arg );\n"
/>
<function
   name="vfwprintf"
   summary="Write formatted wide-character output to a file (varargs)"
   synopsis="#include &lt;wchar.h&gt;\n #include &lt;stdarg.h&gt;\n int vfwprintf( FILE * fp, const wchar_t * format, va_list arg );\n"
/>
<function
   name="vfwscanf"
   summary="Scan input from a file (varargs)"
   synopsis="#include &lt;wchar.h&gt;\n #include &lt;stdarg.h&gt;\n int vfwscanf( FILE * fp, const wchar_t *format, va_list arg );\n"
/>
<function
   name="vprintf"
   summary="Write formatted output to standard output (varargs)"
   synopsis="#include &lt;stdio.h&gt;\n #include &lt;stdarg.h&gt;\n int vprintf( const char* format, va_list arg );\n"
/>
<function
   name="vscanf"
   summary="Scan input from standard input (varargs)"
   synopsis="#include &lt;stdio.h&gt;\n #include &lt;stdarg.h&gt;\n int vscanf( const char * format, va_list args );\n"
/>
<function
   name="vslogf"
   summary="Send a message to the system logger (varargs)"
   synopsis="#include &lt;stdio.h&gt;\n #include &lt;sys/slog.h&gt;\n int vslogf( int opcode, int severity, const char * fmt, va_list arg );\n"
/>
<function
   name="vsnprintf"
   summary="Write formatted output to a character array, up to a maximum number of characters (varargs)"
   synopsis="#include &lt;stdarg.h&gt;\n #include &lt;stdio.h&gt;\n int vsnprintf( char* buf, size_t count, const char* format, va_list arg );\n"
/>
<function
   name="vsprintf"
   summary="Write formatted output to a buffer (varargs)"
   synopsis="#include &lt;stdio.h&gt;\n #include &lt;stdarg.h&gt;\n int vsprintf( char* buf, const char* format, va_list arg );\n"
/>
<function
   name="vsscanf"
   summary="Scan input from a string (varargs)"
   synopsis="#include &lt;stdio.h&gt;\n #include &lt;stdarg.h&gt;\n int vsscanf( const char* in_string, const char* format, va_list arg );\n"
/>
<function
   name="vswprintf"
   summary="Write wide-character formatted output to a buffer (varargs)"
   synopsis="#include &lt;wchar.h&gt;\n #include &lt;stdarg.h&gt;\n int vswprintf( wchar_t * buf, size_t n, const wchar_t * format, va_list arg );\n"
/>
<function
   name="vswscanf"
   summary="Scan input from a wide-character string (varargs)"
   synopsis="#include &lt;wchar.h&gt;\n #include &lt;stdarg.h&gt;\n int vswscanf( const wchar_t * ws, const wchar_t * format, va_list arg );\n"
/>
<function
   name="vsyslog"
   summary="Control system log (varargs)"
   synopsis="#include &lt;syslog.h&gt;\n #include &lt;stdarg.h&gt;\n void vsyslog( int priority, const char *message, va_list args );\n"
/>
<function
   name="vwarn, vwarnx"
   summary="Formatted error message (varargs)"
   synopsis="#include &lt;err.h&gt;\n void vwarn( const char *fmt, va_list args );\n void vwarnx( const char *fmt, va_list args );\n"
/>
<function
   name="vwprintf"
   summary="Write formatted output to standard output (varargs)"
   synopsis="#include &lt;wchar.h&gt;\n #include &lt;stdarg.h&gt;\n int vwprintf( const wchar_t * format, va_list arg );\n"
/>
<function
   name="vwscanf"
   summary="Scan wide-character input from standard input (varargs)"
   synopsis="#include &lt;wchar.h&gt;\n #include &lt;stdarg.h&gt;\n int vwscanf( const wchar_t * format, va_list arg );\n"
/>
<function
   name="wait"
   summary="Wait for the status of a terminated child process"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/wait.h&gt;\n pid_t wait( int * stat_loc );\n"
/>
<function
   name="wait3"
   summary="Wait for any child process to change its state"
   synopsis="#include &lt;sys/wait.h&gt;\n pid_t wait3( int * stat_loc int options, struct rusage * resource_usage );\n"
/>
<function
   name="wait4"
   summary="Wait for one or more child process to change its state"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/wait.h&gt;\n pid_t wait4( pid_t pid, int * stat_loc, int options, struct rusage * resource_usage );\n"
/>
<function
   name="waitid"
   summary="Wait for a child process to change state"
   synopsis="#include &lt;sys/wait.h&gt;\n int waitid( idtype_t idtype, id_t id, siginfo_t * infop, int options );\n"
/>
<function
   name="waitpid"
   summary="Wait for a child process to stop or terminate"
   synopsis="#include &lt;sys/types.h&gt;\n #include &lt;sys/wait.h&gt;\n pid_t waitpid( pid_t pid, int * stat_loc, int options );\n"
/>
<function
   name="warn, warnx"
   summary="Formatted error message"
   synopsis="#include &lt;err.h&gt;\n void warn( const char* fmt, ...);\n void warnx( const char* fmt, ...);\n"
/>
<function
   name="wcrtomb"
   summary="Convert a wide-character code to a character"
   synopsis="#include &lt;wchar.h&gt;\n size_t wcrtomb( char * s, wchar_t wc, mbstate_t * ps);\n"
/>
<function
   name="wcscat"
   summary="Concatenate two wide-character strings"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wcscat( wchar_t * ws1, const wchar_t * ws2 );\n"
/>
<function
   name="wcschr"
   summary="Find the first occurrence of a wide character in a string"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wcschr( const wchar_t * ws, wchar_t wc );\n"
/>
<function
   name="wcscmp"
   summary="Compare two wide-character strings"
   synopsis="#include &lt;wchar.h&gt;\n int wcscmp( const wchar_t * ws1, const wchar_t * ws2 );\n"
/>
<function
   name="wcscoll"
   summary="Compare two wide-character strings, using the locale's collating sequence"
   synopsis="#include &lt;wchar.h&gt;\n int wcscoll( const wchar_t * ws1, const wchar_t * ws2 );\n"
/>
<function
   name="wcscpy"
   summary="Copy a wide-character string"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wcscpy( wchar_t * ws1, const wchar_t * ws2 );\n"
/>
<function
   name="wcscspn"
   summary="Count the wide characters at the beginning of a string that aren't in a given character set"
   synopsis="#include &lt;wchar.h&gt;\n size_t wcscspn( const wchar_t * ws1, const wchar_t * ws2 );\n"
/>
<function
   name="wcsftime"
   summary="Format the time into a wide-character string"
   synopsis="#include &lt;wchar.h&gt;\n size_t wcsftime( wchar_t * wcs, size_t maxsize, const wchar_t * format, const struct tm * timeptr );\n"
/>
<function
   name="wcslen"
   summary="Compute the length of a wide-character string"
   synopsis="#include &lt;wchar.h&gt;\n size_t wcslen( const wchar_t * ws );\n"
/>
<function
   name="wcsncat"
   summary="Concatenate two wide-character strings, up to a maximum length"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wcsncat( wchar_t * ws1, const wchar_t * ws2 size_t n );\n"
/>
<function
   name="wcsncmp"
   summary="Compare two wide-character strings, up to a given length"
   synopsis="#include &lt;wchar.h&gt;\n int wcsncmp( const wchar_t * ws1, const wchar_t * ws2, size_t n );\n"
/>
<function
   name="wcsncpy"
   summary="Copy a wide-character string, to a maximum length"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wcsncpy( wchar_t * ws1, const wchar_t * ws2, size_t n );\n"
/>
<function
   name="wcspbrk"
   summary="Find the first wide character in a string that's in a given character set"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wcspbrk( const wchar_t * ws1, const wchar_t * ws2 );\n"
/>
<function
   name="wcsrchr"
   summary="Find the last occurrence of a wide character in a string"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wcsrchr( const wchar_t * ws, wchar_t wc );\n"
/>
<function
   name="wcsrtombs"
   summary="Convert a wide-character string into a multibyte character string (restartable)"
   synopsis="#include &lt;wchar.h&gt;\n size_t wcsrtombs( char * dst, const wchar_t ** src, size_t len, mbstate_t * ps);\n"
/>
<function
   name="wcsspn"
   summary="Count the wide characters at the beginning of a string that are in a given character set"
   synopsis="#include &lt;wchar.h&gt;\n size_t wcsspn( const wchar_t * ws1, const wchar_t * ws2 );\n"
/>
<function
   name="wcsstr"
   summary="Find one wide-character string inside another"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wcsstr( const wchar_t * ws1, const wchar_t * ws2 );\n"
/>
<function
   name="wcstod, wcstof, wcstold"
   summary="Convert a wide-character string into a double, float, or long double"
   synopsis="#include &lt;wchar.h&gt;\n double wcstod( const wchar_t * ptr, wchar_t ** endptr );\n float wcstof( const wchar_t * ptr, wchar ** endptr );\n long double wcstold( const wchar_t * ptr, wchar ** endptr );\n"
/>
<function
   name="wcstoimax, wcstoumax"
   summary="Convert a wide-character string into an integer"
   synopsis="#include &lt;inttypes.h&gt;\n intmax_t wcstoimax ( const wchar_t * nptr, wchar_t ** endptr, int base );\n uintmax_t wcstoumax ( const wchar_t * nptr, wchar_t ** endptr, int base );\n"
/>
<function
   name="wcstok"
   summary="Break a wide-character string into tokens"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wcstok( wchar_t * ws1, const wchar_t * ws2, wchar_t ** ptr );\n"
/>
<function
   name="wcstol, wcstoll"
   summary="Convert a wide-character string into a long integer"
   synopsis="#include &lt;wchar.h&gt;\n long wcstol( const wchar_t * ptr, wchar_t ** endptr, int base );\n long long wcstoll( const wchar_t * ptr, wchar_t ** endptr, int base );\n"
/>
<function
   name="wcstombs"
   summary="Convert a wide-character string into a multibyte character string"
   synopsis="#include &lt;stdlib.h&gt;\n size_t wcstombs( char* s, const wchar_t* pwcs, size_t n );\n"
/>
<function
   name="wcstoul, wcstoull"
   summary="Convert a wide-character string into an unsigned long integer"
   synopsis="#include &lt;wchar.h&gt;\n unsigned long wcstoul( const wchar_t * ptr, wchar_t ** endptr, int base );\n unsigned long long wcstoull( const wchar_t * ptr, wchar_t ** endptr, int base );\n"
/>
<function
   name="wcsxfrm"
   summary="Transform one wide-character string into another, to a given length"
   synopsis="#include &lt;wchar.h&gt;\n size_t wcsxfrm( wchar_t * ws1, const wchar_t * ws2, size_t n );\n"
/>
<function
   name="wctob"
   summary="Convert a wide character to a single-byte code"
   synopsis="#include &lt;wchar.h&gt;\n int wctob( wint_t c );\n"
/>
<function
   name="wctomb"
   summary="Convert a wide character into a multibyte character"
   synopsis="#include &lt;stdlib.h&gt;\n int wctomb( char * s, wchar_t wc );\n"
/>
<function
   name="wctrans"
   summary="Define a wide-character mapping"
   synopsis="#include &lt;wctype.h&gt;\n wctrans_t wctrans(const char *property);\n"
/>
<function
   name="wctype"
   summary="Define a wide-character class"
   synopsis="#include &lt;wctype.h&gt;\n wctype_t wctype( const char * property );\n"
/>
<function
   name="wmemchr"
   summary="Locate the first occurrence of a wide character in a buffer"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wmemchr( const wchar_t * ws, wchar_t wc, size_t n );\n"
/>
<function
   name="wmemcmp"
   summary="Compare the wide characters in two buffers"
   synopsis="#include &lt;wchar.h&gt;\n int wmemcmp( const wchar_t * ws1, const wchar_t * ws2, size_t n );\n"
/>
<function
   name="wmemcpy"
   summary="Copy wide characters from one buffer to another"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wmemcpy( wchar_t * ws1, const wchar_t * ws2, size_t n );\n"
/>
<function
   name="wmemmove"
   summary="Copy wide characters from one buffer to another"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wmemmove( wchar_t * ws1, const wchar_t * ws2, size_t n );\n"
/>
<function
   name="wmemset"
   summary="Set wide characters in memory"
   synopsis="#include &lt;wchar.h&gt;\n wchar_t * wmemset( wchar_t * ws, wchar_t wc, size_t n );\n"
/>
<function
   name="wordexp"
   summary="Perform word expansions"
   synopsis="#include &lt;wordexp.h&gt;\n int wordexp( const char * words, wordexp_t * pwordexp, int flags );\n"
/>
<function
   name="wordfree"
   summary="Free a word expansion buffer"
   synopsis="#include &lt;wordexp.h&gt;\n void wordfree( wordexp_t * pwordexp );\n"
/>
<function
   name="wprintf"
   summary="Write formatted output to stdout"
   synopsis="#include &lt;wchar.h&gt;\n int wprintf( const wchar_t* format, ... );\n"
/>
<function
   name="write"
   summary="Write bytes to a file"
   synopsis="#include &lt;unistd.h&gt;\n ssize_t write( int fildes, const void* buf, size_t nbytes );\n"
/>
<function
   name="writeblock"
   summary="Write blocks of data to a file"
   synopsis="#include &lt;unistd.h&gt;\n int writeblock( int fd, size_t blksize, unsigned block, int numblks, const void *buff );\n"
/>
<function
   name="writev"
   summary="Write bytes to a file"
   synopsis="#include &lt;sys/uio.h&gt;\n ssize_t writev( int fildes, const iov_t* iov, int iovcnt );\n"
/>
<function
   name="wscanf"
   summary="Scan formatted wide-character input from stdin"
   synopsis="#include &lt;wchar.h&gt;\n int wscanf( const wchar_t * format, ... );\n"
/>
<function
   name="y0, y0f"
   summary="Compute a Bessel function of the second kind"
   synopsis="#include &lt;math.h&gt;\n double y0( double x );\n float y0f( float x );\n"
/>
<function
   name="y1, y1f"
   summary="Compute a Bessel function of the second kind"
   synopsis="#include &lt;math.h&gt;\n double y1( double x );\n float y1f( float x );\n"
/>
<function
   name="yn, ynf"
   summary="Compute a Bessel function of the second kind"
   synopsis="#include &lt;math.h&gt;\n double yn( int n, double x );\n float ynf( int n, float x );\n"
/>
</function_summary>
